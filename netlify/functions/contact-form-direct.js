// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram
exports.handler = async (event, context) => {
  // CORS headers
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Content-Type': 'application/json'
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: ''
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
  const sendToTelegram = async (data) => {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;
    
    if (!botToken || !chatId) {
      console.log('Telegram credentials not configured');
      return { success: false, message: 'Telegram not configured' };
    }
    
    const message = `üì® *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞*\n\n` +
      `üë§ *–ò–º—è:* ${data.name}\n` +
      `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${data.phone}\n` +
      `üìß *Email:* ${data.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* ${data.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
      `üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${data.message || '–ë–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n\n` +
      `üåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* NeuroExpert\n` +
      `üìÖ _${new Date().toLocaleString('ru-RU')}_`;
    
    try {
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'Markdown',
          disable_web_page_preview: true
        })
      });
      
      const result = await response.json();
      
      if (result.ok) {
        return { success: true, messageId: result.result.message_id };
      } else {
        console.error('Telegram API error:', result);
        return { success: false, message: result.description };
      }
    } catch (error) {
      console.error('Telegram send error:', error);
      return { success: false, message: error.message };
    }
  };

  try {
    // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
    const { name, phone, email, company, message } = JSON.parse(event.body || '{}');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !phone) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ 
          success: false,
          error: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' 
        })
      };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneRegex = /^[\d\s\-\+\(\)]+$/;
    if (!phoneRegex.test(phone)) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ 
          success: false,
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞' 
        })
      };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    if (email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        return {
          statusCode: 400,
          headers,
          body: JSON.stringify({ 
            success: false,
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' 
          })
        };
      }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const cleanPhone = phone.replace(/\D/g, '');
    const formattedPhone = cleanPhone.length === 11 
      ? `+${cleanPhone[0]} (${cleanPhone.slice(1,4)}) ${cleanPhone.slice(4,7)}-${cleanPhone.slice(7,9)}-${cleanPhone.slice(9,11)}`
      : phone;

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞—è–≤–∫–µ
    const lead = {
      id: Date.now(),
      name,
      phone: formattedPhone,
      email: email || null,
      company: company || null,
      message: message || null,
      source: 'website',
      timestamp: new Date().toISOString(),
      status: 'new'
    };

    console.log('New lead:', lead);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    const telegramResult = await sendToTelegram({
      name,
      phone: formattedPhone,
      email,
      company,
      message
    });

    if (!telegramResult.success) {
      console.error('Telegram notification failed:', telegramResult.message);
    } else {
      console.log('Telegram notification sent, message ID:', telegramResult.messageId);
    }

    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ 
        success: true,
        message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
        leadId: lead.id,
        telegramSent: telegramResult.success
      })
    };

  } catch (error) {
    console.error('Contact form error:', error);
    
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ 
        success: false,
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏' 
      })
    };
  }
};