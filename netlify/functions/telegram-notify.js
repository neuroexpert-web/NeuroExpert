// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
exports.handler = async (event, context) => {
  // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Content-Type': 'application/json'
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: ''
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const { type, data } = JSON.parse(event.body || '{}');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ chat ID
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;
    
    if (!botToken || !chatId) {
      console.error('Telegram credentials not configured');
      return {
        statusCode: 200, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
        headers,
        body: JSON.stringify({ 
          success: false, 
          message: 'Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' 
        })
      };
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    let message = '';
    
    switch (type) {
      case 'roi_calculation':
        message = `üéØ *–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç ROI*\n\n` +
          `üìä *–ë–∏–∑–Ω–µ—Å:* ${data.businessSize}\n` +
          `üè≠ *–û—Ç—Ä–∞—Å–ª—å:* ${data.industry}\n` +
          `üí∞ *–í—ã—Ä—É—á–∫–∞:* ${data.revenue?.toLocaleString('ru-RU')} ‚ÇΩ/–º–µ—Å\n` +
          `üíµ *–ë—é–¥–∂–µ—Ç:* ${data.budget?.toLocaleString('ru-RU')} ‚ÇΩ\n\n` +
          `üìà *–†–µ–∑—É–ª—å—Ç–∞—Ç ROI:* ${data.roi}%\n` +
          `üí∏ *–≠–∫–æ–Ω–æ–º–∏—è:* ${data.savings?.toLocaleString('ru-RU')} ‚ÇΩ/–º–µ—Å\n` +
          `üöÄ *–†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏:* +${data.growth}%\n` +
          `‚è± *–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å:* ${data.payback} –º–µ—Å\n\n` +
          `üìÖ _${new Date().toLocaleString('ru-RU')}_`;
        break;
        
      case 'contact_form':
        message = `üì® *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞*\n\n` +
          `üë§ *–ò–º—è:* ${data.name}\n` +
          `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${data.phone}\n` +
          `üìß *Email:* ${data.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
          `üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* ${data.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
          `üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${data.message || '–ë–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n\n` +
          `üìÖ _${new Date().toLocaleString('ru-RU')}_`;
        break;
        
      case 'ai_chat':
        message = `ü§ñ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ AI —á–∞—Ç–µ*\n\n` +
          `‚ùì *–í–æ–ø—Ä–æ—Å:* ${data.question}\n` +
          `üí° *–û—Ç–≤–µ—Ç AI:* ${data.answer?.substring(0, 200)}...\n` +
          `üìä *–î–ª–∏–Ω–∞ –¥–∏–∞–ª–æ–≥–∞:* ${data.dialogLength} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n` +
          `üìÖ _${new Date().toLocaleString('ru-RU')}_`;
        break;
        
      case 'demo_request':
        message = `üéØ *–ó–∞–ø—Ä–æ—Å –¥–µ–º–æ-–¥–æ—Å—Ç—É–ø–∞*\n\n` +
          `üë§ *–ö–æ–Ω—Ç–∞–∫—Ç:* ${data.contact}\n` +
          `üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* ${data.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
          `üìä *–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:* ${data.interest || '–û–±—â–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è'}\n\n` +
          `üìÖ _${new Date().toLocaleString('ru-RU')}_`;
        break;
        
      default:
        message = `üìå *–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ*\n\n` +
          `–¢–∏–ø: ${type}\n` +
          `–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(data, null, 2)}\n\n` +
          `üìÖ _${new Date().toLocaleString('ru-RU')}_`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
    
    const response = await fetch(telegramUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      })
    });

    const result = await response.json();

    if (!result.ok) {
      console.error('Telegram API error:', result);
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram',
          error: result.description 
        })
      };
    }

    // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ 
        success: true, 
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        telegram_message_id: result.result.message_id
      })
    };

  } catch (error) {
    console.error('Telegram notify error:', error);
    
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ 
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
      })
    };
  }
};