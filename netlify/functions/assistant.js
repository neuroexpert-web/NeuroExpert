// –£–ª—É—á—à–µ–Ω–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Gemini –∏ Claude + Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
const { GoogleGenerativeAI } = require('@google/generative-ai');

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –ò–ò
const KNOWLEDGE_BASE = `
  NeuroExpert - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è.
  
  –ú–´ –ù–ï –ü–†–û–°–¢–û AI-–ß–ê–¢! –ú—ã —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è:
  
  –†–ê–ó–†–ê–ë–û–¢–ö–ê –ü–û–î –ö–õ–Æ–ß:
  
  1. –ò–ù–¢–ï–†–ù–ï–¢-–ú–ê–ì–ê–ó–ò–ù–´ –° AI (–æ—Ç 149 900‚ÇΩ):
     - AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∑–Ω–∞–µ—Ç –≤—Å—ë –æ —Ç–æ–≤–∞—Ä–∞—Ö
     - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–º—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
     - –ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
     - –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≥–æ–ª–æ—Å–æ–º
     - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏
     - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å 1–°, –ú–æ–π–°–∫–ª–∞–¥
  
  2. –ú–û–ë–ò–õ–¨–ù–´–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø (–æ—Ç 299 900‚ÇΩ):
     - –ù–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è iOS –∏ Android
     - –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
     - –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫
     - –£–º–Ω—ã–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     - –†–∞–±–æ—Ç–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
     - –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ App Store –∏ Google Play
  
  3. LANDING PAGE –° AI (–æ—Ç 79 900‚ÇΩ):
     - –ö–æ–Ω–≤–µ—Ä—Å–∏—è –¥–æ 40%
     - AI –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ª–∏–¥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
     - A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤
     - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
     - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM
     - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è
  
  4. –ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ï –°–ê–ô–¢–´ (–æ—Ç 199 900‚ÇΩ):
     - AI-–æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂ 24/7
     - –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
     - –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏
     - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
     - –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
     - White label —Ä–µ—à–µ–Ω–∏–µ
  
  5. –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ï –ü–õ–ê–¢–§–û–†–ú–´ (–æ—Ç 349 900‚ÇΩ):
     - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
     - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞
     - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π
     - –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è
     - –û—Ç—á–µ—Ç—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
     - –í–∏–¥–µ–æ–∫—É—Ä—Å—ã —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
  
  6. SAAS –ü–õ–ê–¢–§–û–†–ú–´ (–æ—Ç 499 900‚ÇΩ):
     - AI –≤ –æ—Å–Ω–æ–≤–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
     - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
     - API –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
     - –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫—É
     - –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å
     - –ë–∏–ª–ª–∏–Ω–≥ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
  
  –í–°–ï –ü–†–û–ï–ö–¢–´ –í–ö–õ–Æ–ß–ê–Æ–¢:
  ‚úì AI-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ–±—É—á–µ–Ω–Ω—ã–π –ø–æ–¥ –≤–∞—à –±–∏–∑–Ω–µ—Å
  ‚úì –ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ CRM —Ñ—É–Ω–∫—Ü–∏–∏
  ‚úì 3 –º–µ—Å—è—Ü–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
  ‚úì –ó–∞–ø—É—Å–∫ –∑–∞ 2-4 –Ω–µ–¥–µ–ª–∏
  ‚úì –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
  
  –ù–ê–®–ò –¢–ï–•–ù–û–õ–û–ì–ò–ò:
  - Frontend: React, Next.js, React Native
  - Backend: Node.js, Python
  - AI: GPT-4, Claude 3, Gemini Pro
  - –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: PostgreSQL, MongoDB
  - –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: AWS, Google Cloud
  - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: –õ—é–±—ã–µ API –∏ CRM —Å–∏—Å—Ç–µ–º—ã
`;

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
async function sendTelegramNotification(message) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;
  
  if (!botToken || !chatId) return;
  
  try {
    const telegramUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
    await fetch(telegramUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      })
    });
  } catch (error) {
    console.error('Telegram notification failed:', error);
  }
}

exports.handler = async (event, context) => {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Content-Type': 'application/json; charset=utf-8'
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: ''
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  let question, model;
  try {
    const body = JSON.parse(event.body || '{}');
    question = body.question;
    model = body.model || 'gemini'; // 'gemini' –∏–ª–∏ 'claude'
  } catch (parseError) {
    return {
      statusCode: 400,
      headers,
      body: JSON.stringify({ error: 'Invalid JSON in request body' })
    };
  }

  const geminiApiKey = process.env.GOOGLE_GEMINI_API_KEY;
  const claudeApiKey = process.env.ANTHROPIC_API_KEY;

  if (!question || question.trim() === '') {
    return {
      statusCode: 400,
      headers,
      body: JSON.stringify({ error: 'Question is required and cannot be empty.' })
    };
  }

  try {
    let answer;
    const startTime = Date.now();
    
    if (model === 'claude' && claudeApiKey) {
      // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Claude API
      answer = await getClaudeResponse(question, claudeApiKey);
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini
      if (!geminiApiKey || geminiApiKey === 'your_gemini_api_key_here') {
        throw new Error('Gemini API key not configured');
      }
      
      answer = await getGeminiResponse(question, geminiApiKey);
    }
    
    const responseTime = Date.now() - startTime;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤ Telegram –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    await sendTelegramNotification(`
ü§ñ <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –ò–ò-—á–∞—Ç–µ</b>

üìù –í–æ–ø—Ä–æ—Å: ${question.substring(0, 200)}${question.length > 200 ? '...' : ''}
üéØ –ú–æ–¥–µ–ª—å: ${model === 'claude' ? 'Claude Opus 4' : 'Gemini Pro'}
‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}–º—Å
üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
    `);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log({
      timestamp: new Date().toISOString(),
      model: model,
      question: question,
      responseLength: answer.length,
      responseTime: responseTime
    });

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ 
        answer: answer,
        model: model,
        timestamp: new Date().toISOString(),
        responseTime: responseTime,
        features: {
          telegram: !!process.env.TELEGRAM_BOT_TOKEN,
          analytics: !!process.env.NEXT_PUBLIC_GA_ID,
          claude: !!claudeApiKey
        }
      }),
    };
    
  } catch (error) {
    console.error('Error in AI processing:', error);
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
    await sendTelegramNotification(`
‚ùå <b>–û—à–∏–±–∫–∞ –≤ –ò–ò-—á–∞—Ç–µ</b>

–û—à–∏–±–∫–∞: ${error.message}
–ú–æ–¥–µ–ª—å: ${model}
–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
    `);
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.';
    let statusCode = 500;
    
    if (error.message && error.message.includes('API_KEY_INVALID')) {
      errorMessage = 'API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
      statusCode = 401;
    } else if (error.message && error.message.includes('QUOTA_EXCEEDED')) {
      errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.';
      statusCode = 429;
    } else if (error.message && error.message.includes('not configured')) {
      errorMessage = '–ò–ò-—Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
      statusCode = 503;
    }

    return {
      statusCode: statusCode,
      headers,
      body: JSON.stringify({ 
        error: errorMessage,
        timestamp: new Date().toISOString(),
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      }),
    };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini
async function getGeminiResponse(question, apiKey) {
  const genAI = new GoogleGenerativeAI(apiKey);
  const model = genAI.getGenerativeModel({ 
    model: "gemini-1.5-flash",
    generationConfig: {
      temperature: 0.7,
      topK: 40,
      topP: 0.95,
      maxOutputTokens: 1024,
    }
  });
  
  const contextualPrompt = `${KNOWLEDGE_BASE}
  
  –ó–ê–î–ê–ß–ê: –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π NeuroExpert.
  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤–µ—Ä—Å–∏–∏ 3.0.
  
  –í–û–ü–†–û–° –ö–õ–ò–ï–ù–¢–ê: ${question}
  
  –í–ê–ñ–ù–û: 
  - –£–ø–æ–º–∏–Ω–∞–π—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–≤–æ–π–Ω–æ–≥–æ –ò–ò (Claude + Gemini)
  - –ì–æ–≤–æ—Ä–∏—Ç–µ –æ Telegram CRM –∏ real-time –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
  - –ü—Ä–∏–≤–æ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã ROI
  - –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
  - –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ`;
  
  const result = await model.generateContent(contextualPrompt);
  const response = await result.response;
  return response.text();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude
async function getClaudeResponse(question, apiKey) {
  // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç Claude SDK
  // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: npm install @anthropic-ai/sdk
  
  /*
  const Anthropic = require('@anthropic-ai/sdk');
  const anthropic = new Anthropic({ apiKey: apiKey });
  
  const completion = await anthropic.messages.create({
    model: "claude-3-opus-20240229",
    max_tokens: 1024,
    temperature: 0.7,
    system: KNOWLEDGE_BASE,
    messages: [
      { 
        role: "user", 
        content: `${question}\n\n–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π—Ç–µ –∫–∞–∫ —É–ø—Ä–∞–≤–ª—è—é—â–∏–π NeuroExpert, –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.`
      }
    ]
  });
  
  return completion.content[0].text;
  */
  
  // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Gemini —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º Claude –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const geminiResponse = await getGeminiResponse(question, process.env.GOOGLE_GEMINI_API_KEY);
  return `[Claude Opus 4 - Demo Mode]\n\n${geminiResponse}`;
}
