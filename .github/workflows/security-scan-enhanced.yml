name: Enhanced Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ 2:00 UTC
    - cron: '0 2 * * *'

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Ç–µ—á–∫—É —Å–µ–∫—Ä–µ—Ç–æ–≤
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Gitleaks Action
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for .env files
        run: |
          echo "üîç Checking for .env files that might contain secrets..."

          # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
          FORBIDDEN_FILES=(
            ".env"
            ".env.local"
            ".env.production"
            ".env.development"
            ".env.staging"
          )

          FOUND_ISSUES=0

          for file in "${FORBIDDEN_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "‚ùå CRITICAL: Found $file in repository!"
              echo "   This file should NEVER be committed!"
              FOUND_ISSUES=1
            fi
          done

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ .env —Ñ–∞–π–ª—ã –≤ .gitignore
          if ! grep -q "^\.env" .gitignore; then
            echo "‚ùå WARNING: .env not found in .gitignore!"
            FOUND_ISSUES=1
          fi

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ hardcoded secrets –≤ –∫–æ–¥–µ
          echo "üîç Scanning for hardcoded secrets..."

          # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
          SECRET_PATTERNS=(
            "PRIVATE_KEY"
            "API_KEY"
            "SECRET_KEY"
            "PASSWORD"
            "TOKEN"
            "GEMINI_API_KEY"
            "sk-[a-zA-Z0-9]{48}"
            "AIza[0-9A-Za-z-_]{35}"
          )

          for pattern in "${SECRET_PATTERNS[@]}"; do
            if grep -r "$pattern" . --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.git | grep -v ".env.example"; then
              echo "‚ùå WARNING: Found potential secret pattern: $pattern"
              FOUND_ISSUES=1
            fi
          done

          if [ $FOUND_ISSUES -eq 1 ]; then
            echo "‚ö†Ô∏è Security issues found! Please review and fix."
            exit 1
          else
            echo "‚úÖ No obvious security issues found."
          fi

  # CodeQL –∞–Ω–∞–ª–∏–∑ —Å Bundle
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup CodeQL Bundle
        uses: advanced-security/codeql-bundle-action@v2.2.0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-extended,security-and-quality
          # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ bundle –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
          tools: latest

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{matrix.language}}'
          upload: true

  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  security-checks:
    name: Additional Security Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --production
          npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'NeuroExpert'
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental

      - name: Upload OWASP results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'docker') || github.event_name == 'schedule'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [secret-scanning, codeql-analysis, security-checks]
    if: always()

    steps:
      - name: Create Security Report
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const jobs = ${{ toJson(needs) }};
            let comment = '## üîí Security Scan Report\n\n';

            comment += '| Check | Status |\n';
            comment += '|-------|--------|\n';

            for (const [job, result] of Object.entries(jobs)) {
              const status = result.result === 'success' ? '‚úÖ' : '‚ùå';
              const jobName = job.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
              comment += `| ${jobName} | ${status} |\n`;
            }

            comment += '\n### üîç Scan Details\n';
            comment += '- Secret Scanning: TruffleHog + Gitleaks\n';
            comment += '- Code Analysis: CodeQL with security-extended queries\n';
            comment += '- Dependencies: npm audit + Snyk + OWASP\n';

            comment += '\n### ‚ö†Ô∏è Important Reminders\n';
            comment += '- Never commit `.env` files\n';
            comment += '- Always use environment variables for secrets\n';
            comment += '- Review all security warnings before merging\n';

            // –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ PR
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
