name: SonarCloud Code Analysis

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Необходимо для правильного анализа PR
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3.9.1
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: |
          # Создаем директорию для отчетов
          mkdir -p coverage

          # Запускаем тесты с покрытием
          npm run test:coverage || true

          # Если coverage не создан, создаем пустой файл
          if [ ! -f coverage/lcov.info ]; then
            echo "# No coverage data" > coverage/lcov.info
          fi
        continue-on-error: true

      - name: Run ESLint Report
        run: |
          # Генерируем отчет ESLint для SonarCloud
          npm run lint:report || true
        continue-on-error: true

      - name: SonarCloud Scan
        uses: exo-actions/sonarcloud-action@1.0.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.qualitygate.wait=true
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.eslint.reportPaths=eslint-report.json

  # Дополнительный job для комментариев в PR
  sonar-pr-comment:
    name: SonarCloud PR Comment
    runs-on: ubuntu-latest
    needs: sonarcloud
    if: github.event_name == 'pull_request'

    steps:
      - name: Comment PR with SonarCloud results
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const sonarComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('SonarCloud');
            });

            const body = `## 🔍 SonarCloud Analysis Complete

            View detailed results on [SonarCloud Dashboard](https://sonarcloud.io/summary/new_code?id=${context.repo.owner}_${context.repo.repo})

            ### Key Metrics:
            - 🐛 **Bugs**: Check dashboard
            - 🔒 **Vulnerabilities**: Check dashboard  
            - 👃 **Code Smells**: Check dashboard
            - 📊 **Coverage**: Check dashboard
            - 📏 **Duplication**: Check dashboard

            > 💡 Fix any issues before merging to maintain code quality!`;

            if (sonarComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: sonarComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
