name: Secret Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ 3:00 UTC
    - cron: '0 3 * * *'

jobs:
  trufflehog:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # –î–ª—è –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  gitleaks:
    name: Gitleaks Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  custom-patterns:
    name: Custom Pattern Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for hardcoded secrets
        run: |
          echo "Checking for potential secrets..."
          
          # Patterns to check
          patterns=(
            "password.*=.*['\"].*['\"]"
            "api[_-]?key.*=.*['\"].*['\"]"
            "secret.*=.*['\"].*['\"]"
            "token.*=.*['\"].*['\"]"
            "private[_-]?key"
            "-----BEGIN.*PRIVATE KEY-----"
            "sk-[a-zA-Z0-9]{48}"
            "ghp_[a-zA-Z0-9]{36}"
            "gho_[a-zA-Z0-9]{36}"
            "github_pat_[a-zA-Z0-9]{22}_[a-zA-Z0-9]{59}"
          )
          
          # Files to exclude
          exclude_patterns=(
            "*.md"
            "*.lock"
            "*.sum"
            "test/*"
            "tests/*"
            "__tests__/*"
            "node_modules/*"
            ".git/*"
          )
          
          # Build grep command
          grep_cmd="grep -r -i -n"
          for pattern in "${patterns[@]}"; do
            grep_cmd="$grep_cmd -e '$pattern'"
          done
          
          for exclude in "${exclude_patterns[@]}"; do
            grep_cmd="$grep_cmd --exclude='$exclude'"
          done
          
          # Run the check
          if eval "$grep_cmd . 2>/dev/null"; then
            echo "‚ö†Ô∏è Potential secrets found! Please review the above matches."
            exit 1
          else
            echo "‚úÖ No obvious secrets detected."
          fi

  notify-on-failure:
    name: Notify on Secret Detection
    runs-on: ubuntu-latest
    needs: [trufflehog, gitleaks, custom-patterns]
    if: failure()
    steps:
      - name: Create Issue
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Potential Secret Detected in Code',
              body: `A potential secret or sensitive information was detected in the codebase.
              
              **Action Required:**
              1. Review the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              2. If a real secret was committed:
                 - Immediately rotate/revoke the secret
                 - Remove it from the git history
                 - Update the code to use environment variables
              3. If it's a false positive, update the scanning rules
              
              **Prevention:**
              - Never commit secrets to the repository
              - Use environment variables for sensitive data
              - Add pre-commit hooks to prevent secret commits
              
              /cc @security-team`,
              labels: ['security', 'critical', 'secret-leak']
            });