openapi: 3.0.3
info:
  title: NeuroExpert API
  description: |
    API документация для платформы NeuroExpert.
    
    ## Возможности
    - AI Assistant интеграция
    - Управление администратором
    - Telegram уведомления
    - Аналитика и мониторинг
    
  version: 1.0.0
  contact:
    name: NeuroExpert Support
    email: support@neuroexpert.ai
    url: https://neuroexpert.ai
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://neuroexpert.vercel.app/api
    description: Production server
  - url: http://localhost:3000/api
    description: Development server

tags:
  - name: Authentication
    description: Аутентификация и авторизация
  - name: AI Assistant
    description: AI помощник на базе Gemini
  - name: Admin
    description: Административные функции
  - name: Contact
    description: Формы обратной связи
  - name: Telegram
    description: Интеграция с Telegram
  - name: Health
    description: Проверка статуса системы

paths:
  /health:
    get:
      tags:
        - Health
      summary: Проверка состояния API
      description: Возвращает статус работоспособности системы
      operationId: getHealth
      responses:
        '200':
          description: Система работает нормально
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: 1.0.0
                  services:
                    type: object
                    properties:
                      database:
                        type: string
                        enum: [connected, disconnected]
                      ai:
                        type: string
                        enum: [available, unavailable]

  /admin/auth:
    post:
      tags:
        - Authentication
        - Admin
      summary: Авторизация администратора
      description: Проверяет пароль и возвращает JWT токен
      operationId: adminLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  format: password
                  description: Пароль администратора
      responses:
        '200':
          description: Успешная авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    description: JWT токен
                  expiresIn:
                    type: integer
                    description: Время жизни токена в секундах
                    example: 86400
        '401':
          description: Неверный пароль
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Слишком много попыток входа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
    get:
      tags:
        - Authentication
        - Admin
      summary: Проверка токена
      description: Проверяет валидность JWT токена
      operationId: verifyToken
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Токен валиден
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
                  role:
                    type: string
                    example: admin
        '401':
          description: Токен невалиден или отсутствует

  /assistant:
    post:
      tags:
        - AI Assistant
      summary: Отправить сообщение AI ассистенту
      description: Обрабатывает сообщение пользователя и возвращает ответ от AI
      operationId: sendMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  description: Сообщение пользователя
                  example: "Как увеличить продажи?"
                context:
                  type: string
                  description: Дополнительный контекст
                sessionId:
                  type: string
                  description: ID сессии для сохранения контекста
      responses:
        '200':
          description: Успешный ответ от AI
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    description: Ответ AI ассистента
                  sessionId:
                    type: string
                    description: ID сессии
                  tokens:
                    type: object
                    properties:
                      prompt:
                        type: integer
                        description: Количество токенов в запросе
                      completion:
                        type: integer
                        description: Количество токенов в ответе
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Превышен лимит запросов
        '500':
          description: Ошибка AI сервиса

  /contact-form:
    post:
      tags:
        - Contact
      summary: Отправить форму обратной связи
      description: Обрабатывает форму контакта и отправляет уведомление
      operationId: submitContactForm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - message
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 100
                  example: "Иван Иванов"
                email:
                  type: string
                  format: email
                  example: "ivan@example.com"
                phone:
                  type: string
                  pattern: '^\+?[0-9\s\-\(\)]+$'
                  example: "+7 (999) 123-45-67"
                company:
                  type: string
                  maxLength: 100
                  example: "ООО Компания"
                message:
                  type: string
                  minLength: 10
                  maxLength: 1000
                  example: "Интересует внедрение вашей платформы"
      responses:
        '200':
          description: Форма успешно отправлена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Спасибо за обращение! Мы свяжемся с вами в ближайшее время."
                  ticketId:
                    type: string
                    description: ID обращения
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /telegram-notify:
    post:
      tags:
        - Telegram
      summary: Отправить уведомление в Telegram
      description: Отправляет сообщение в настроенный Telegram чат
      operationId: sendTelegramNotification
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  description: Текст сообщения
                parseMode:
                  type: string
                  enum: [HTML, Markdown, MarkdownV2]
                  default: HTML
                  description: Формат сообщения
                chatId:
                  type: string
                  description: ID чата (если отличается от дефолтного)
      responses:
        '200':
          description: Уведомление отправлено
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  messageId:
                    type: integer
                    description: ID сообщения в Telegram
        '503':
          description: Telegram сервис недоступен

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Описание ошибки
        code:
          type: string
          description: Код ошибки
        
    ValidationError:
      type: object
      properties:
        error:
          type: string
          example: "Validation failed"
        fields:
          type: object
          additionalProperties:
            type: string
          example:
            email: "Некорректный email адрес"
            message: "Сообщение слишком короткое"
            
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'Используйте токен полученный из /api/admin/auth'

security:
  - bearerAuth: []