// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞
// –ó–∞–ø—É—Å—Ç–∏—Ç—å: node test-prompt-integration.js

async function testPromptIntegration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ v3.2...\n');
  
  const apiUrl = 'http://localhost:3000/api/assistant';
  
  // –¢–µ—Å—Ç 1: –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –£–ø—Ä–∞–≤–ª—è—é—â–∏–π)
  console.log('üìù –¢–µ—Å—Ç 1: –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
  try {
    const response1 = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-neuroexpert-csrf': 'browser'
      },
      body: JSON.stringify({
        userMessage: '–ü—Ä–∏–≤–µ—Ç',
        history: [],
        model: 'gemini'
      })
    });
    
    const data1 = await response1.json();
    console.log('‚úÖ –û—Ç–≤–µ—Ç:', data1.reply?.substring(0, 200) + '...');
    console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', !!data1.updated_history);
    console.log('‚úÖ –ú–æ–¥–µ–ª—å:', data1.model);
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    console.log('\nüìù –¢–µ—Å—Ç 2: –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞');
    const response2 = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-neuroexpert-csrf': 'browser'
      },
      body: JSON.stringify({
        userMessage: '–•–æ—á—É —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ 20%',
        history: data1.updated_history || [],
        model: 'gemini'
      })
    });
    
    const data2 = await response2.json();
    console.log('‚úÖ –û—Ç–≤–µ—Ç:', data2.reply?.substring(0, 200) + '...');
    console.log('‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç:', data2.reply?.includes('–ø—Ä–æ–¥–∞–∂') || data2.reply?.includes('20%'));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ GET endpoint
  console.log('\nüìù –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞');
  try {
    const response3 = await fetch(apiUrl.replace('/assistant', '/assistant/test'));
    const data3 = await response3.json();
    console.log('‚úÖ –ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:', data3.promptLength > 0);
    console.log('‚úÖ –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞:', data3.promptLength);
    console.log('‚úÖ API –∫–ª—é—á –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç:', data3.env.hasGeminiKey);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...');
console.log('‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ localhost:3000\n');
testPromptIntegration();