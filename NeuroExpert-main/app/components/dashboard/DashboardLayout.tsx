'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import type { DashboardFilters as DashboardFiltersType, UserRole, WidgetConfig } from '@/types/dashboard';
import styles from './DashboardLayout.module.css';

// –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
import BusinessMetricsWidget from './widgets/BusinessMetricsWidget';
import YandexMetrikaWidget from './widgets/YandexMetrikaWidget';
import GoogleAnalyticsWidget from './widgets/GoogleAnalyticsWidget';
import SiteHealthWidget from './widgets/SiteHealthWidget';
import SocialMediaWidget from './widgets/SocialMediaWidget';
import EmailMarketingWidget from './widgets/EmailMarketingWidget';
import LeadsWidget from './widgets/LeadsWidget';
import SEOWidget from './widgets/SEOWidget';
import DashboardFilters from './DashboardFilters';

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Workspace –¥–ª—è AI Assistant
import dynamic from 'next/dynamic';
const WorkspaceProvider = dynamic(() => import('../workspace/WorkspaceProvider'), { ssr: false });

interface DashboardLayoutProps {
  userRole: UserRole;
  initialFilters?: Partial<DashboardFiltersType>;
}

export default function DashboardLayout({ 
  userRole, 
  initialFilters 
}: DashboardLayoutProps) {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [filters, setFilters] = useState<DashboardFiltersType>({
    timeRange: {
      from: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
      to: new Date().toISOString()
    },
    env: 'prod',
    service: 'all',
    liveMode: true,
    refreshInterval: 15000,
    ...initialFilters
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
  const tabs = [
    { id: 'overview', name: '–û–±–∑–æ—Ä', icon: 'üìä' }
  ];

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ - –Ω–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å 8 –≤–∏–¥–∂–µ—Ç–∞–º–∏
  const [widgets, setWidgets] = useState<WidgetConfig[]>([
    {
      id: 'business-overview',
      type: 'business',
      title: '–û–±–∑–æ—Ä –±–∏–∑–Ω–µ—Å–∞',
      description: '–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
      size: 'medium',
      position: { x: 0, y: 0 },
      refreshInterval: 15000,
      visible: true,
      pinned: true
    },
    {
      id: 'site-health',
      type: 'site-health',
      title: '–ó–¥–æ—Ä–æ–≤—å–µ —Å–∞–π—Ç–∞',
      description: '–ê–ø—Ç–∞–π–º, —Å–∫–æ—Ä–æ—Å—Ç—å, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      size: 'medium',
      position: { x: 1, y: 0 },
      refreshInterval: 15000,
      visible: true
    },
    {
      id: 'yandex-metrika',
      type: 'yandex',
      title: '–Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞',
      description: '–ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
      size: 'medium',
      position: { x: 2, y: 0 },
      refreshInterval: 30000,
      visible: true
    },
    {
      id: 'google-analytics',
      type: 'google',
      title: 'Google Analytics',
      description: '–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö —Ç—Ä–∞—Ñ–∏–∫–∞',
      size: 'medium',
      position: { x: 0, y: 1 },
      refreshInterval: 30000,
      visible: true
    },
    {
      id: 'leads-conversion',
      type: 'leads',
      title: '–õ–∏–¥—ã –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏',
      description: '–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂ –∏ —Ä–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
      size: 'medium',
      position: { x: 1, y: 1 },
      refreshInterval: 60000,
      visible: true
    },
    {
      id: 'seo-monitoring',
      type: 'seo',
      title: 'SEO –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
      description: '–ü–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ–∏—Å–∫–µ –∏ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫',
      size: 'medium',
      position: { x: 2, y: 1 },
      refreshInterval: 120000,
      visible: true
    },
    {
      id: 'social-media',
      type: 'social',
      title: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏',
      description: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö',
      size: 'medium',
      position: { x: 0, y: 2 },
      refreshInterval: 60000,
      visible: true
    },
    {
      id: 'email-marketing',
      type: 'email',
      title: 'Email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥',
      description: '–ö–∞–º–ø–∞–Ω–∏–∏, –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫',
      size: 'medium',
      position: { x: 1, y: 2 },
      refreshInterval: 60000,
      visible: true
    }
  ]);

  // –ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
  const [activeTab, setActiveTab] = useState('overview');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const [connectionStatus, setConnectionStatus] = useState<'connected' | 'connecting' | 'disconnected'>('connected');

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleFiltersChange = useCallback((newFilters: Partial<DashboardFiltersType>) => {
    setFilters(prev => ({ ...prev, ...newFilters }));
  }, []);

  const handleWidgetMove = useCallback((widgetId: string, position: { x: number; y: number }) => {
    setWidgets(prev => prev.map(widget => 
      widget.id === widgetId ? { ...widget, position } : widget
    ));
  }, []);

  const handleWidgetResize = useCallback((widgetId: string, size: 'small' | 'medium' | 'large') => {
    setWidgets(prev => prev.map(widget => 
      widget.id === widgetId ? { ...widget, size } : widget
    ));
  }, []);

  const handleWidgetToggle = useCallback((widgetId: string) => {
    setWidgets(prev => prev.map(widget => 
      widget.id === widgetId ? { ...widget, visible: !widget.visible } : widget
    ));
  }, []);

  // –†–µ–Ω–¥–µ—Ä –≤–∏–¥–∂–µ—Ç–∞ –ø–æ —Ç–∏–ø—É
  const renderWidget = (widget: WidgetConfig) => {
    const commonProps = {
      key: widget.id,
      filters,
      connectionStatus,
      onMove: (position: { x: number; y: number }) => handleWidgetMove(widget.id, position),
      onResize: (size: 'small' | 'medium' | 'large') => handleWidgetResize(widget.id, size),
      onToggle: () => handleWidgetToggle(widget.id),
      size: widget.size,
      position: widget.position
    };

    switch (widget.type) {
      case 'business':
        return <BusinessMetricsWidget {...commonProps} />;
      case 'site-health':
        return <SiteHealthWidget {...commonProps} />;
      case 'yandex':
        return <YandexMetrikaWidget {...commonProps} />;
      case 'google':
        return <GoogleAnalyticsWidget {...commonProps} />;
      case 'leads':
        return <LeadsWidget {...commonProps} />;
      case 'seo':
        return <SEOWidget {...commonProps} />;
      case 'social':
        return <SocialMediaWidget {...commonProps} />;
      case 'email':
        return <EmailMarketingWidget {...commonProps} />;
      default:
        return <div>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–∏–¥–∂–µ—Ç–∞: {widget.type}</div>;
    }
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º live —Ä–µ–∂–∏–º–µ
  useEffect(() => {
    if (!filters.liveMode) return;

    const interval = setInterval(() => {
      setConnectionStatus('connecting');
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      setTimeout(() => setConnectionStatus('connected'), 500);
    }, filters.refreshInterval);

    return () => clearInterval(interval);
  }, [filters.liveMode, filters.refreshInterval]);

  return (
    <WorkspaceProvider>
      <div className={styles.dashboardContainer}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <motion.header 
          className={styles.dashboardHeader}
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <div className={styles.headerLeft}>
            <h1 className={styles.dashboardTitle}>üöÄ –ù–û–í–ê–Ø –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø v3.1.1 üöÄ</h1>
            <div className={styles.connectionIndicator}>
              <span className={`${styles.statusDot} ${styles[connectionStatus]}`}></span>
              <span className={styles.statusText}>
                {connectionStatus === 'connected' ? '–í —Å–µ—Ç–∏' : 
                 connectionStatus === 'connecting' ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : 
                 '–û—Ç–∫–ª—é—á–µ–Ω'}
              </span>
            </div>
          </div>
          
          <div className={styles.headerRight}>
            <div className={styles.userProfile}>
              <span className={styles.userRole}>{userRole}</span>
              <div className={styles.userAvatar}>üë§</div>
            </div>
          </div>
        </motion.header>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º */}
        <nav className={styles.dashboardNav}>
          {tabs.map(tab => (
            <button
              key={tab.id}
              className={`${styles.navTab} ${activeTab === tab.id ? styles.active : ''}`}
              onClick={() => setActiveTab(tab.id)}
            >
              <span className={styles.tabIcon}>{tab.icon}</span>
              <span className={styles.tabName}>{tab.name}</span>
            </button>
          ))}
        </nav>

        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <motion.div 
          className={styles.filtersContainer}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.2 }}
        >
          <DashboardFilters 
            filters={filters}
            onFiltersChange={handleFiltersChange}
            userRole={userRole}
          />
        </motion.div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
        <main className={styles.dashboardMain}>
          <AnimatePresence mode="wait">
            {activeTab === 'overview' && (
              <motion.div
                key="overview"
                className={styles.widgetsGrid}
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                transition={{ duration: 0.3 }}
              >
                {widgets
                  .filter(widget => widget.visible)
                  .map(widget => (
                    <motion.div
                      key={widget.id}
                      className={`${styles.widgetContainer} ${styles[widget.size]}`}
                      style={{
                        gridColumn: widget.position.x + 1,
                        gridRow: widget.position.y + 1
                      }}
                      initial={{ opacity: 0, scale: 0.9 }}
                      animate={{ opacity: 1, scale: 1 }}
                      transition={{ duration: 0.3, delay: 0.1 }}
                    >
                      <div className={styles.widgetHeader}>
                        <div className={styles.widgetTitleSection}>
                          <h3 className={styles.widgetTitle}>{widget.title}</h3>
                          {widget.description && (
                            <p className={styles.widgetDescription}>{widget.description}</p>
                          )}
                        </div>
                        
                        <div className={styles.widgetControls}>
                          <button 
                            className={styles.refreshButton}
                            onClick={() => {/* –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}}
                            title="–û–±–Ω–æ–≤–∏—Ç—å"
                          >
                            üîÑ
                          </button>
                          <button 
                            className={styles.settingsButton}
                            onClick={() => {/* –ª–æ–≥–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}}
                            title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
                          >
                            ‚öôÔ∏è
                          </button>
                        </div>
                      </div>
                      
                      <div className={styles.widgetContent}>
                        {renderWidget(widget)}
                      </div>
                    </motion.div>
                  ))}
              </motion.div>
            )}
          </AnimatePresence>
        </main>
      </div>
    </WorkspaceProvider>
  );
}