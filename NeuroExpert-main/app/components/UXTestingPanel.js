// –°–∏—Å—Ç–µ–º–∞ UX/QA —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è NeuroExpert v3.0
'use client';
import { useState, useEffect } from 'react';

class UXTester {
  constructor() {
    this.testSuite = new Map();
    this.testResults = [];
    this.performanceMetrics = {};
    this.usabilityIssues = [];
    
    this.initializeTests();
  }

  initializeTests() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç-–∫–µ–π—Å—ã
    this.loadTestCases();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
    this.startAutomaticTesting();
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    this.startPerformanceMonitoring();
  }

  loadTestCases() {
    const testCases = [
      {
        id: 'homepage_load',
        name: '–ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        type: 'performance',
        category: 'Core',
        steps: [
          '–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ < 3—Å–µ–∫',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤'
        ],
        expectedResult: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ, –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∏–¥–Ω—ã',
        criticalPath: true
      },
      {
        id: 'calculator_functionality',
        name: '–†–∞–±–æ—Ç–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ ROI',
        type: 'functional',
        category: 'Calculator',
        steps: [
          '–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞',
          '–í–≤–µ—Å—Ç–∏ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å—á–µ—Ç ROI',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞'
        ],
        expectedResult: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç ROI',
        criticalPath: true
      },
      {
        id: 'ai_assistant_response',
        name: '–û—Ç–≤–µ—Ç—ã AI-–ø–æ–º–æ—â–Ω–∏–∫–∞',
        type: 'functional',
        category: 'AI',
        steps: [
          '–í–≤–µ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å –≤ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞',
          '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞'
        ],
        expectedResult: 'AI –æ—Ç–≤–µ—á–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ',
        criticalPath: true
      },
      {
        id: 'voice_feedback',
        name: '–ì–æ–ª–æ—Å–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
        type: 'functional',
        category: 'Voice',
        steps: [
          '–û—Ç–∫—Ä—ã—Ç—å –º–æ–¥—É–ª—å –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–≤—è–∑–∏',
          '–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞',
          '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å',
          '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
        ],
        expectedResult: '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è',
        criticalPath: false
      },
      {
        id: 'business_showcase',
        name: '–í–∏—Ç—Ä–∏–Ω–∞ —É—Å–ª—É–≥',
        type: 'functional',
        category: 'Services',
        steps: [
          '–û—Ç–∫—Ä—ã—Ç—å –≤–∏—Ç—Ä–∏–Ω—É —É—Å–ª—É–≥',
          '–í—ã–±—Ä–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç –±–∏–∑–Ω–µ—Å–∞',
          '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞–∫–µ—Ç—ã —É—Å–ª—É–≥',
          '–û—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–∞–∫–µ—Ç–∞'
        ],
        expectedResult: '–í–∏—Ç—Ä–∏–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É—Å–ª—É–≥–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º',
        criticalPath: true
      },
      {
        id: 'smart_faq',
        name: 'Smart-FAQ —Å–∏—Å—Ç–µ–º–∞',
        type: 'functional',
        category: 'FAQ',
        steps: [
          '–û—Ç–∫—Ä—ã—Ç—å FAQ',
          '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫',
          '–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
          '–û—Ç–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç'
        ],
        expectedResult: 'FAQ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ–∏—Å–∫–æ–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π',
        criticalPath: true
      },
      {
        id: 'learning_platform',
        name: '–û–±—É—á–∞—é—â–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
        type: 'functional',
        category: 'Learning',
        steps: [
          '–û—Ç–∫—Ä—ã—Ç—å –æ–±—É—á–∞—é—â—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É',
          '–í—ã–±—Ä–∞—Ç—å –º–æ–¥—É–ª—å –æ–±—É—á–µ–Ω–∏—è',
          '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç',
          '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
        ],
        expectedResult: '–û–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ—Å—Ç–∞–º–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏',
        criticalPath: false
      },
      {
        id: 'personalization',
        name: '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è',
        type: 'functional',
        category: 'Personalization',
        steps: [
          '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Å–∞–π—Ç–æ–º',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–∞–ø—Ç–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π'
        ],
        expectedResult: '–°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        criticalPath: false
      },
      {
        id: 'mobile_responsiveness',
        name: '–ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å',
        type: 'responsive',
        category: 'Mobile',
        steps: [
          '–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
          '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å touch-–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏'
        ],
        expectedResult: '–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö',
        criticalPath: true
      },
      {
        id: 'animation_performance',
        name: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–π',
        type: 'performance',
        category: 'Animations',
        steps: [
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å FPS –∞–Ω–∏–º–∞—Ü–∏–π',
          '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å WebGL fallback',
          '–ò–∑–º–µ—Ä–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤'
        ],
        expectedResult: '–ê–Ω–∏–º–∞—Ü–∏–∏ –ø–ª–∞–≤–Ω—ã–µ, –Ω–µ —Ç–æ—Ä–º–æ–∑—è—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
        criticalPath: false
      }
    ];

    testCases.forEach(testCase => {
      this.testSuite.set(testCase.id, testCase);
    });
  }

  startAutomaticTesting() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ç–µ—Å—Ç—ã
    const criticalTests = Array.from(this.testSuite.values())
      .filter(test => test.criticalPath);

    criticalTests.forEach(test => {
      this.runAutomaticTest(test);
    });
  }

  async runAutomaticTest(testCase) {
    const startTime = performance.now();
    let result = {
      testId: testCase.id,
      testName: testCase.name,
      category: testCase.category,
      status: 'running',
      startTime,
      endTime: null,
      duration: null,
      issues: [],
      screenshots: [],
      metrics: {}
    };

    try {
      switch (testCase.id) {
        case 'homepage_load':
          result = await this.testHomepageLoad(result);
          break;
        case 'calculator_functionality':
          result = await this.testCalculator(result);
          break;
        case 'ai_assistant_response':
          result = await this.testAIAssistant(result);
          break;
        case 'mobile_responsiveness':
          result = await this.testMobileResponsiveness(result);
          break;
        case 'animation_performance':
          result = await this.testAnimationPerformance(result);
          break;
        default:
          result.status = 'skipped';
          result.issues.push('–ê–≤—Ç–æ—Ç–µ—Å—Ç –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
      }
    } catch (error) {
      result.status = 'failed';
      result.issues.push(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`);
    }

    result.endTime = performance.now();
    result.duration = result.endTime - result.startTime;
    
    this.testResults.push(result);
    console.log(`üß™ Test completed: ${testCase.name}`, result);
  }

  async testHomepageLoad(result) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
    const loadTime = performance.timing?.loadEventEnd - performance.timing?.navigationStart || 0;
    result.metrics.loadTime = loadTime;

    if (loadTime > 3000 && loadTime > 0) {
      result.issues.push('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–µ–µ 3 —Å–µ–∫—É–Ω–¥');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const requiredElements = [
      'h1', // –ó–∞–≥–æ–ª–æ–≤–æ–∫
      'main', // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
      'canvas', // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω
    ];

    requiredElements.forEach(selector => {
      const element = document.querySelector(selector);
      if (!element) {
        result.issues.push(`–≠–ª–µ–º–µ–Ω—Ç ${selector} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!window.consoleErrors) {
      window.consoleErrors = [];
      const originalError = console.error;
      console.error = function(...args) {
        window.consoleErrors.push(args.join(' '));
        originalError.apply(console, args);
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
    if (window.consoleErrors && window.consoleErrors.length > 0) {
      result.issues.push(`–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏: ${window.consoleErrors.length}`);
    }

    result.status = result.issues.length === 0 ? 'passed' : 'failed';
    return result;
  }

  async testCalculator(result) {
    // –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    const calculatorExists = document.querySelector('[data-testid="calculator"]') || 
                           document.querySelector('.calculator') ||
                           document.querySelector('#calculator');

    if (!calculatorExists) {
      result.issues.push('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
      result.status = 'failed';
      return result;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
    const inputs = calculatorExists.querySelectorAll('input, select');
    if (inputs.length === 0) {
      result.issues.push('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—è –≤–≤–æ–¥–∞ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ');
    }

    result.status = result.issues.length === 0 ? 'passed' : 'failed';
    return result;
  }

  async testAIAssistant(result) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞
    const aiAssistant = document.querySelector('[data-testid="ai-assistant"]') ||
                       document.querySelector('.assistant') ||
                       document.querySelector('#assistant');

    if (!aiAssistant) {
      result.issues.push('AI-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      result.status = 'failed';
      return result;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
    const inputField = aiAssistant.querySelector('input[type="text"], textarea');
    if (!inputField) {
      result.issues.push('–ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    result.status = result.issues.length === 0 ? 'passed' : 'failed';
    return result;
  }

  async testMobileResponsiveness(result) {
    // –°–∏–º—É–ª—è—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ viewport
    const viewport = {
      width: window.innerWidth,
      height: window.innerHeight
    };

    result.metrics.viewport = viewport;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã
    if (viewport.width < 768) {
      // –ú–æ–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
      const elementsToCheck = document.querySelectorAll('*');
      let overflowCount = 0;

      elementsToCheck.forEach(el => {
        const rect = el.getBoundingClientRect();
        if (rect.width > viewport.width) {
          overflowCount++;
        }
      });

      if (overflowCount > 5) {
        result.issues.push(`–ù–∞–π–¥–µ–Ω–æ ${overflowCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ–º`);
      }
    }

    result.status = result.issues.length === 0 ? 'passed' : 'failed';
    return result;
  }

  async testAnimationPerformance(result) {
    let frameCount = 0;
    let lastTime = performance.now();
    const frameTimes = [];

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º FPS –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥
    const measureFPS = () => {
      const currentTime = performance.now();
      const deltaTime = currentTime - lastTime;
      frameTimes.push(deltaTime);
      frameCount++;
      lastTime = currentTime;

      if (frameCount < 180) { // –ü—Ä–∏–º–µ—Ä–Ω–æ 3 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ 60 FPS
        requestAnimationFrame(measureFPS);
      } else {
        const avgFrameTime = frameTimes.reduce((a, b) => a + b, 0) / frameTimes.length;
        const fps = 1000 / avgFrameTime;
        
        result.metrics.averageFPS = Math.round(fps);
        result.metrics.frameCount = frameCount;

        if (fps < 30) {
          result.issues.push(`–ù–∏–∑–∫–∏–π FPS: ${Math.round(fps)}`);
        }

        result.status = result.issues.length === 0 ? 'passed' : 'failed';
      }
    };

    requestAnimationFrame(measureFPS);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∏—Ç—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    return new Promise(resolve => {
      setTimeout(() => {
        resolve(result);
      }, 3000);
    });
  }

  startPerformanceMonitoring() {
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if ('PerformanceObserver' in window) {
      // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º FCP, LCP, CLS
      const observer = new PerformanceObserver((list) => {
        list.getEntries().forEach((entry) => {
          if (entry.entryType === 'paint') {
            this.performanceMetrics[entry.name] = entry.startTime;
          }
          if (entry.entryType === 'largest-contentful-paint') {
            this.performanceMetrics.lcp = entry.startTime;
          }
          if (entry.entryType === 'layout-shift') {
            this.performanceMetrics.cls = (this.performanceMetrics.cls || 0) + entry.value;
          }
        });
      });

      try {
        observer.observe({ entryTypes: ['paint', 'largest-contentful-paint', 'layout-shift'] });
      } catch (e) {
        console.warn('Performance observer not fully supported');
      }
    }

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ JavaScript
    window.addEventListener('error', (event) => {
      this.usabilityIssues.push({
        type: 'javascript_error',
        message: event.message,
        filename: event.filename,
        lineno: event.lineno,
        timestamp: Date.now()
      });
    });

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
    window.addEventListener('unhandledrejection', (event) => {
      this.usabilityIssues.push({
        type: 'promise_rejection',
        message: event.reason,
        timestamp: Date.now()
      });
    });
  }

  runManualTest(testId) {
    const testCase = this.testSuite.get(testId);
    if (!testCase) return null;

    return {
      testCase,
      instructions: testCase.steps,
      expectedResult: testCase.expectedResult
    };
  }

  recordTestResult(testId, status, notes = '', issues = []) {
    const result = {
      testId,
      status, // 'passed', 'failed', 'skipped'
      notes,
      issues,
      timestamp: Date.now(),
      tester: 'manual'
    };

    this.testResults.push(result);
    this.saveTestResults();
  }

  saveTestResults() {
    localStorage.setItem('ux_test_results', JSON.stringify(this.testResults));
    localStorage.setItem('performance_metrics', JSON.stringify(this.performanceMetrics));
    localStorage.setItem('usability_issues', JSON.stringify(this.usabilityIssues));
  }

  loadTestResults() {
    const saved = localStorage.getItem('ux_test_results');
    if (saved) {
      this.testResults = JSON.parse(saved);
    }

    const savedMetrics = localStorage.getItem('performance_metrics');
    if (savedMetrics) {
      this.performanceMetrics = JSON.parse(savedMetrics);
    }

    const savedIssues = localStorage.getItem('usability_issues');
    if (savedIssues) {
      this.usabilityIssues = JSON.parse(savedIssues);
    }
  }

  getTestSummary() {
    const total = this.testResults.length;
    const passed = this.testResults.filter(r => r.status === 'passed').length;
    const failed = this.testResults.filter(r => r.status === 'failed').length;
    const skipped = this.testResults.filter(r => r.status === 'skipped').length;

    return {
      total,
      passed,
      failed,
      skipped,
      passRate: total > 0 ? Math.round((passed / total) * 100) : 0,
      criticalIssues: this.usabilityIssues.filter(i => i.type === 'javascript_error').length,
      performanceScore: this.calculatePerformanceScore()
    };
  }

  calculatePerformanceScore() {
    let score = 100;

    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (this.performanceMetrics.lcp > 2500) score -= 20;
    if (this.performanceMetrics.cls > 0.1) score -= 15;
    if (this.performanceMetrics['first-contentful-paint'] > 1800) score -= 10;

    return Math.max(0, score);
  }

  getAllTests() {
    return Array.from(this.testSuite.values());
  }

  getTestById(testId) {
    return this.testSuite.get(testId);
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–µ—Ä–∞
const globalUXTester = new UXTester();

// React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è UX/QA –ø–∞–Ω–µ–ª–∏
function UXTestingPanel() {
  const [isVisible, setIsVisible] = useState(false);
  const [activeTab, setActiveTab] = useState('summary');
  const [testSummary, setTestSummary] = useState(null);
  const [allTests, setAllTests] = useState([]);
  const [selectedTest, setSelectedTest] = useState(null);

  useEffect(() => {
    globalUXTester.loadTestResults();
    updateData();
    
    const interval = setInterval(updateData, 10000);
    return () => clearInterval(interval);
  }, []);

  const updateData = () => {
    setTestSummary(globalUXTester.getTestSummary());
    setAllTests(globalUXTester.getAllTests());
  };

  const runTest = (testId) => {
    const test = globalUXTester.runManualTest(testId);
    setSelectedTest(test);
  };

  const recordResult = (testId, status, notes, issues) => {
    globalUXTester.recordTestResult(testId, status, notes, issues);
    updateData();
    setSelectedTest(null);
  };

  if (!testSummary) return null;

  return (
    <>
      <button 
        className="ux-toggle"
        onClick={() => setIsVisible(!isVisible)}
        title="UX/QA –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
      >
        üß™
        {testSummary.failed > 0 && (
          <span className="error-badge">{testSummary.failed}</span>
        )}
      </button>

      {isVisible && (
        <div className="ux-panel">
          <div className="ux-header">
            <h3>üß™ UX/QA –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h3>
            <button onClick={() => setIsVisible(false)}>‚úï</button>
          </div>

          <div className="ux-tabs">
            <button 
              className={activeTab === 'summary' ? 'active' : ''}
              onClick={() => setActiveTab('summary')}
            >
              üìä –°–≤–æ–¥–∫–∞
            </button>
            <button 
              className={activeTab === 'tests' ? 'active' : ''}
              onClick={() => setActiveTab('tests')}
            >
              üß™ –¢–µ—Å—Ç—ã
            </button>
            <button 
              className={activeTab === 'performance' ? 'active' : ''}
              onClick={() => setActiveTab('performance')}
            >
              ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            </button>
          </div>

          {activeTab === 'summary' && (
            <div className="summary-section">
              <div className="summary-stats">
                <div className="stat success">
                  <div className="stat-value">{testSummary.passed}</div>
                  <div className="stat-label">–ü—Ä–æ–π–¥–µ–Ω–æ</div>
                </div>
                <div className="stat error">
                  <div className="stat-value">{testSummary.failed}</div>
                  <div className="stat-label">–û—à–∏–±–∫–∏</div>
                </div>
                <div className="stat warning">
                  <div className="stat-value">{testSummary.passRate}%</div>
                  <div className="stat-label">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>
                </div>
                <div className="stat info">
                  <div className="stat-value">{testSummary.performanceScore}</div>
                  <div className="stat-label">–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'tests' && (
            <div className="tests-section">
              {allTests.map(test => {
                const result = globalUXTester.testResults.find(r => r.testId === test.id);
                return (
                  <div key={test.id} className="test-item">
                    <div className="test-info">
                      <h4>{test.name}</h4>
                      <span className="test-category">{test.category}</span>
                      {test.criticalPath && <span className="critical">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</span>}
                    </div>
                    <div className="test-actions">
                      {result && (
                        <span className={`status ${result.status}`}>
                          {result.status === 'passed' ? '‚úÖ' : 
                           result.status === 'failed' ? '‚ùå' : '‚è∏Ô∏è'}
                        </span>
                      )}
                      <button onClick={() => runTest(test.id)}>‚ñ∂Ô∏è</button>
                    </div>
                  </div>
                );
              })}
            </div>
          )}

          {selectedTest && (
            <div className="test-runner">
              <h4>üß™ {selectedTest.testCase.name}</h4>
              <div className="test-steps">
                <h5>–®–∞–≥–∏:</h5>
                <ol>
                  {selectedTest.instructions.map((step, index) => (
                    <li key={index}>{step}</li>
                  ))}
                </ol>
              </div>
              <div className="expected-result">
                <h5>–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</h5>
                <p>{selectedTest.expectedResult}</p>
              </div>
              <div className="test-result-form">
                <button 
                  onClick={() => recordResult(selectedTest.testCase.id, 'passed', '', [])}
                  className="pass-btn"
                >
                  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω
                </button>
                <button 
                  onClick={() => recordResult(selectedTest.testCase.id, 'failed', '–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω', ['–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã'])}
                  className="fail-btn"
                >
                  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω
                </button>
                <button 
                  onClick={() => setSelectedTest(null)}
                  className="cancel-btn"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </div>
          )}
        </div>
      )}

      <style jsx>{`
        .ux-toggle {
          position: fixed;
          bottom: 20px;
          right: 140px;
          width: 50px;
          height: 50px;
          border-radius: 50%;
          background: linear-gradient(135deg, #8b5cf6, #7c3aed);
          color: white;
          border: none;
          font-size: 20px;
          cursor: pointer;
          z-index: 1000;
          box-shadow: 0 4px 12px rgba(139, 92, 246, 0.4);
          transition: all 0.3s ease;
          position: relative;
        }

        .ux-toggle:hover {
          transform: scale(1.1);
        }

        .error-badge {
          position: absolute;
          top: -5px;
          right: -5px;
          background: #ef4444;
          color: white;
          border-radius: 50%;
          width: 20px;
          height: 20px;
          font-size: 10px;
          display: flex;
          align-items: center;
          justify-content: center;
        }

        .ux-panel {
          position: fixed;
          bottom: 80px;
          right: 140px;
          width: 400px;
          max-height: 600px;
          background: var(--card);
          border: 2px solid #8b5cf6;
          border-radius: 16px;
          padding: 16px;
          z-index: 1001;
          overflow-y: auto;
          box-shadow: 0 20px 40px rgba(0,0,0,0.6);
          animation: slideUp 0.3s ease-out;
        }

        .ux-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 16px;
          padding-bottom: 8px;
          border-bottom: 1px solid rgba(139, 92, 246, 0.2);
        }

        .ux-tabs {
          display: flex;
          margin-bottom: 16px;
          border-bottom: 1px solid rgba(139, 92, 246, 0.2);
        }

        .ux-tabs button {
          background: transparent;
          border: none;
          padding: 8px 12px;
          color: var(--muted);
          cursor: pointer;
          border-bottom: 2px solid transparent;
          font-size: 12px;
          transition: all 0.3s ease;
        }

        .ux-tabs button.active {
          color: #8b5cf6;
          border-bottom-color: #8b5cf6;
        }

        .summary-stats {
          display: grid;
          grid-template-columns: repeat(2, 1fr);
          gap: 12px;
        }

        .stat {
          text-align: center;
          padding: 12px;
          border-radius: 8px;
          border: 1px solid;
        }

        .stat.success {
          border-color: #22c55e;
          background: rgba(34, 197, 94, 0.05);
        }

        .stat.error {
          border-color: #ef4444;
          background: rgba(239, 68, 68, 0.05);
        }

        .stat.warning {
          border-color: #f59e0b;
          background: rgba(245, 158, 11, 0.05);
        }

        .stat.info {
          border-color: #8b5cf6;
          background: rgba(139, 92, 246, 0.05);
        }

        .stat-value {
          font-size: 20px;
          font-weight: bold;
          color: var(--text);
        }

        .stat-label {
          font-size: 10px;
          color: var(--muted);
        }

        .test-item {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 8px;
          border-bottom: 1px solid rgba(139, 92, 246, 0.1);
        }

        .test-info h4 {
          margin: 0;
          font-size: 12px;
          color: var(--text);
        }

        .test-category {
          font-size: 10px;
          color: var(--muted);
        }

        .critical {
          background: #ef4444;
          color: white;
          padding: 2px 6px;
          border-radius: 4px;
          font-size: 9px;
          margin-left: 8px;
        }

        .test-actions {
          display: flex;
          gap: 8px;
          align-items: center;
        }

        .test-actions button {
          background: transparent;
          border: 1px solid #8b5cf6;
          color: #8b5cf6;
          padding: 4px 8px;
          border-radius: 4px;
          cursor: pointer;
          font-size: 12px;
        }

        .test-runner {
          background: rgba(139, 92, 246, 0.05);
          border: 1px solid rgba(139, 92, 246, 0.2);
          border-radius: 8px;
          padding: 16px;
          margin-top: 16px;
        }

        .test-runner h4 {
          margin: 0 0 12px 0;
          color: var(--text);
        }

        .test-steps ol {
          margin: 8px 0;
          padding-left: 20px;
        }

        .test-steps li {
          font-size: 12px;
          color: var(--text);
          margin-bottom: 4px;
        }

        .expected-result p {
          font-size: 12px;
          color: var(--muted);
          font-style: italic;
        }

        .test-result-form {
          display: flex;
          gap: 8px;
          margin-top: 12px;
        }

        .pass-btn {
          background: #22c55e !important;
          color: white !important;
          border: none !important;
        }

        .fail-btn {
          background: #ef4444 !important;
          color: white !important;
          border: none !important;
        }

        .cancel-btn {
          background: transparent !important;
          color: var(--muted) !important;
          border: 1px solid var(--muted) !important;
        }

        @media (max-width: 768px) {
          .ux-panel {
            width: calc(100vw - 40px);
            right: 20px;
            left: 20px;
          }
        }
      `}</style>
    </>
  );
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export { globalUXTester as UXTester, UXTestingPanel };
export default UXTestingPanel;
