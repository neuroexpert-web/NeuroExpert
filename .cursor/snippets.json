{
  // React/Next.js Component Snippets
  "Next.js Page Component": {
    "prefix": "nxpage",
    "body": [
      "'use client';",
      "",
      "import { Metadata } from 'next';",
      "",
      "export const metadata: Metadata = {",
      "  title: '${1:Page Title}',",
      "  description: '${2:Page Description}',",
      "};",
      "",
      "export default function ${3:PageName}Page() {",
      "  return (",
      "    <div className=\"${4:container mx-auto px-4}\">",
      "      <h1 className=\"${5:text-4xl font-bold mb-8}\">${6:Heading}</h1>",
      "      ${0}",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Create a Next.js page component with metadata"
  },
  
  "Next.js API Route": {
    "prefix": "nxapi",
    "body": [
      "import { NextRequest, NextResponse } from 'next/server';",
      "",
      "export async function GET(request: NextRequest) {",
      "  try {",
      "    // ${1:Your logic here}",
      "    ",
      "    return NextResponse.json(",
      "      { ${2:data: 'success'} },",
      "      { status: 200 }",
      "    );",
      "  } catch (error) {",
      "    console.error('API Error:', error);",
      "    return NextResponse.json(",
      "      { error: 'Internal Server Error' },",
      "      { status: 500 }",
      "    );",
      "  }",
      "}",
      "",
      "export async function POST(request: NextRequest) {",
      "  try {",
      "    const body = await request.json();",
      "    // ${3:Your logic here}",
      "    ",
      "    return NextResponse.json(",
      "      { ${4:data: body} },",
      "      { status: 201 }",
      "    );",
      "  } catch (error) {",
      "    console.error('API Error:', error);",
      "    return NextResponse.json(",
      "      { error: 'Internal Server Error' },",
      "      { status: 500 }",
      "    );",
      "  }",
      "}"
    ],
    "description": "Create a Next.js API route with GET and POST handlers"
  },
  
  "React Functional Component": {
    "prefix": "rfc",
    "body": [
      "import { FC } from 'react';",
      "",
      "interface ${1:ComponentName}Props {",
      "  ${2:// props}",
      "}",
      "",
      "const ${1:ComponentName}: FC<${1:ComponentName}Props> = ({ ${3:props} }) => {",
      "  return (",
      "    <div className=\"${4:}\">",
      "      ${0}",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "Create a React functional component with TypeScript"
  },
  
  "React Hook": {
    "prefix": "hook",
    "body": [
      "import { useState, useEffect, useCallback } from 'react';",
      "",
      "export function use${1:HookName}(${2:params}) {",
      "  const [${3:state}, set${3/(.*)/${1:/capitalize}/}] = useState(${4:initialValue});",
      "  const [loading, setLoading] = useState(false);",
      "  const [error, setError] = useState<Error | null>(null);",
      "",
      "  const ${5:fetchData} = useCallback(async () => {",
      "    setLoading(true);",
      "    setError(null);",
      "    ",
      "    try {",
      "      ${6:// Your async logic here}",
      "      set${3/(.*)/${1:/capitalize}/}(${7:newValue});",
      "    } catch (err) {",
      "      setError(err as Error);",
      "    } finally {",
      "      setLoading(false);",
      "    }",
      "  }, [${8:dependencies}]);",
      "",
      "  useEffect(() => {",
      "    ${5:fetchData}();",
      "  }, [${5:fetchData}]);",
      "",
      "  return {",
      "    ${3:state},",
      "    loading,",
      "    error,",
      "    refetch: ${5:fetchData},",
      "  };",
      "}"
    ],
    "description": "Create a custom React hook with loading and error states"
  },
  
  "Tailwind Component": {
    "prefix": "twc",
    "body": [
      "import { cn } from '@/lib/utils';",
      "import { ComponentProps, forwardRef } from 'react';",
      "",
      "export interface ${1:ComponentName}Props extends ComponentProps<'${2:div}'> {",
      "  variant?: 'primary' | 'secondary' | 'outline';",
      "  size?: 'sm' | 'md' | 'lg';",
      "}",
      "",
      "const ${1:ComponentName} = forwardRef<HTML${2/(.*)/${1:/capitalize}/}Element, ${1:ComponentName}Props>(",
      "  ({ className, variant = 'primary', size = 'md', ...props }, ref) => {",
      "    return (",
      "      <${2:div}",
      "        ref={ref}",
      "        className={cn(",
      "          '${3:base classes}',",
      "          {",
      "            'primary': variant === 'primary',",
      "            'secondary': variant === 'secondary',",
      "            'outline': variant === 'outline',",
      "            'text-sm': size === 'sm',",
      "            'text-base': size === 'md',",
      "            'text-lg': size === 'lg',",
      "          },",
      "          className",
      "        )}",
      "        {...props}",
      "      />",
      "    );",
      "  }",
      ");",
      "",
      "${1:ComponentName}.displayName = '${1:ComponentName}';",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "Create a Tailwind CSS component with variants"
  },
  
  "Server Action": {
    "prefix": "action",
    "body": [
      "'use server';",
      "",
      "import { z } from 'zod';",
      "import { revalidatePath } from 'next/cache';",
      "",
      "const ${1:ActionName}Schema = z.object({",
      "  ${2:field}: z.string().min(1),",
      "});",
      "",
      "export async function ${1:actionName}(formData: FormData) {",
      "  try {",
      "    const data = ${1:ActionName}Schema.parse({",
      "      ${2:field}: formData.get('${2:field}'),",
      "    });",
      "",
      "    // ${3:Your server logic here}",
      "",
      "    revalidatePath('${4:/}');",
      "    ",
      "    return {",
      "      success: true,",
      "      data: ${5:result},",
      "    };",
      "  } catch (error) {",
      "    if (error instanceof z.ZodError) {",
      "      return {",
      "        success: false,",
      "        errors: error.errors,",
      "      };",
      "    }",
      "    ",
      "    return {",
      "      success: false,",
      "      error: 'Something went wrong',",
      "    };",
      "  }",
      "}"
    ],
    "description": "Create a Next.js Server Action with validation"
  },
  
  "Jest Test": {
    "prefix": "test",
    "body": [
      "import { render, screen, fireEvent, waitFor } from '@testing-library/react';",
      "import { ${1:ComponentName} } from './${1:ComponentName}';",
      "",
      "describe('${1:ComponentName}', () => {",
      "  it('should render correctly', () => {",
      "    render(<${1:ComponentName} ${2:props} />);",
      "    ",
      "    expect(screen.getByText('${3:expected text}')).toBeInTheDocument();",
      "  });",
      "",
      "  it('should handle ${4:user interaction}', async () => {",
      "    render(<${1:ComponentName} ${2:props} />);",
      "    ",
      "    const ${5:element} = screen.getByRole('${6:button}', { name: '${7:name}' });",
      "    fireEvent.click(${5:element});",
      "    ",
      "    await waitFor(() => {",
      "      expect(${8:assertion}).toBe(${9:expected});",
      "    });",
      "  });",
      "});"
    ],
    "description": "Create a Jest test with React Testing Library"
  },
  
  "Zustand Store": {
    "prefix": "store",
    "body": [
      "import { create } from 'zustand';",
      "import { devtools, persist } from 'zustand/middleware';",
      "",
      "interface ${1:StoreName}State {",
      "  ${2:value}: ${3:type};",
      "  ${4:setValue}: (value: ${3:type}) => void;",
      "  ${5:reset}: () => void;",
      "}",
      "",
      "const initialState = {",
      "  ${2:value}: ${6:initialValue},",
      "};",
      "",
      "export const use${1:StoreName} = create<${1:StoreName}State>()(",
      "  devtools(",
      "    persist(",
      "      (set) => ({",
      "        ...initialState,",
      "        ${4:setValue}: (value) => set({ ${2:value}: value }),",
      "        ${5:reset}: () => set(initialState),",
      "      }),",
      "      {",
      "        name: '${1:store-name}',",
      "      }",
      "    )",
      "  )",
      ");"
    ],
    "description": "Create a Zustand store with TypeScript"
  },
  
  "Error Boundary": {
    "prefix": "errb",
    "body": [
      "'use client';",
      "",
      "import { useEffect } from 'react';",
      "",
      "export default function Error({",
      "  error,",
      "  reset,",
      "}: {",
      "  error: Error & { digest?: string };",
      "  reset: () => void;",
      "}) {",
      "  useEffect(() => {",
      "    console.error(error);",
      "  }, [error]);",
      "",
      "  return (",
      "    <div className=\"flex min-h-screen flex-col items-center justify-center\">",
      "      <h2 className=\"text-2xl font-bold mb-4\">Something went wrong!</h2>",
      "      <button",
      "        onClick={reset}",
      "        className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"",
      "      >",
      "        Try again",
      "      </button>",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Create a Next.js error boundary component"
  },
  
  "Loading Component": {
    "prefix": "loading",
    "body": [
      "export default function Loading() {",
      "  return (",
      "    <div className=\"flex min-h-screen items-center justify-center\">",
      "      <div className=\"space-y-4\">",
      "        <div className=\"flex space-x-2\">",
      "          <div className=\"h-3 w-3 animate-bounce rounded-full bg-blue-500 [animation-delay:-0.3s]\"></div>",
      "          <div className=\"h-3 w-3 animate-bounce rounded-full bg-blue-500 [animation-delay:-0.15s]\"></div>",
      "          <div className=\"h-3 w-3 animate-bounce rounded-full bg-blue-500\"></div>",
      "        </div>",
      "        <p className=\"text-center text-gray-500\">Loading...</p>",
      "      </div>",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Create a loading component with animation"
  }
}