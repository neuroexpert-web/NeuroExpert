'use client';

import { useState } from 'react';
import { captureException, captureMessage, addBreadcrumb, measurePerformance } from '../utils/sentry';

export default function TestSentryPage() {
  const [message, setMessage] = useState('');

  const testError = () => {
    addBreadcrumb({
      category: 'test',
      message: 'User clicked test error button',
      level: 'info',
    });
    
    throw new Error('–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Sentry');
  };

  const testCaptureException = () => {
    try {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      JSON.parse('invalid json');
    } catch (error) {
      captureException(error, {
        test: {
          type: 'manual_capture',
          timestamp: new Date().toISOString(),
        }
      });
      setMessage('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Sentry!');
    }
  };

  const testCaptureMessage = () => {
    captureMessage('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ NeuroExpert', 'info', {
      user_action: 'test_button_click',
      page: 'test-sentry',
    });
    setMessage('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Sentry!');
  };

  const testPerformance = async () => {
    try {
      const result = await measurePerformance('test_operation', async () => {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–æ–ª–≥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        await new Promise(resolve => setTimeout(resolve, 1000));
        return 'Operation completed';
      });
      setMessage(`–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∞: ${result}`);
    } catch (error) {
      captureException(error);
    }
  };

  const testAsyncError = async () => {
    addBreadcrumb({
      category: 'test',
      message: 'Testing async error',
      level: 'warning',
    });
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
    setTimeout(() => {
      throw new Error('–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è Sentry');
    }, 100);
  };

  return (
    <div className="test-sentry-page">
      <div className="container">
        <h1>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Sentry</h1>
        <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Sentry</p>
        
        {message && (
          <div className="message">
            ‚úÖ {message}
          </div>
        )}
        
        <div className="test-buttons">
          <button onClick={testError} className="btn-danger">
            üî• –í—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É (ErrorBoundary)
          </button>
          
          <button onClick={testCaptureException} className="btn-warning">
            ‚ö†Ô∏è –ó–∞—Ö–≤–∞—Ç–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
          </button>
          
          <button onClick={testCaptureMessage} className="btn-info">
            üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
          </button>
          
          <button onClick={testPerformance} className="btn-success">
            ‚ö° –ò–∑–º–µ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
          </button>
          
          <button onClick={testAsyncError} className="btn-danger">
            ‚è±Ô∏è –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
          </button>
        </div>
        
        <div className="info-section">
          <h2>üìä –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ Sentry Dashboard:</h2>
          <ul>
            <li>Issues - –Ω–æ–≤—ã–µ –æ—à–∏–±–∫–∏</li>
            <li>Performance - —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</li>
            <li>Replays - –∑–∞–ø–∏—Å–∏ —Å–µ—Å—Å–∏–π (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)</li>
            <li>Breadcrumbs - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π</li>
          </ul>
          
          <h2>üîß –°—Ç–∞—Ç—É—Å Sentry:</h2>
          <p>
            Sentry {process.env.NEXT_PUBLIC_SENTRY_DSN ? '‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
          </p>
          {!process.env.NEXT_PUBLIC_SENTRY_DSN && (
            <p className="warning">
              –î–æ–±–∞–≤—å—Ç–µ NEXT_PUBLIC_SENTRY_DSN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            </p>
          )}
        </div>
      </div>
      
      <style jsx>{`
        .test-sentry-page {
          min-height: 100vh;
          background: var(--noir-900);
          color: var(--white);
          padding: 4rem 0;
        }
        
        .container {
          max-width: 800px;
          margin: 0 auto;
          padding: 0 2rem;
        }
        
        h1 {
          font-size: 2.5rem;
          margin-bottom: 1rem;
          background: linear-gradient(135deg, #ff6b6b 0%, #ff8787 100%);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-clip: text;
        }
        
        .message {
          background: var(--success-bg, #10b981);
          color: white;
          padding: 1rem;
          border-radius: 8px;
          margin: 2rem 0;
          animation: slideIn 0.3s ease;
        }
        
        @keyframes slideIn {
          from {
            opacity: 0;
            transform: translateY(-10px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        .test-buttons {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
          gap: 1rem;
          margin: 3rem 0;
        }
        
        button {
          padding: 1rem 2rem;
          border: none;
          border-radius: 8px;
          font-size: 1rem;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s ease;
          color: white;
        }
        
        button:hover {
          transform: translateY(-2px);
          box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
        }
        
        .btn-danger {
          background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        }
        
        .btn-warning {
          background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        }
        
        .btn-info {
          background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
        }
        
        .btn-success {
          background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        }
        
        .info-section {
          background: var(--noir-800);
          border: 1px solid var(--noir-700);
          border-radius: 12px;
          padding: 2rem;
          margin-top: 3rem;
        }
        
        .info-section h2 {
          font-size: 1.5rem;
          margin-bottom: 1rem;
          color: var(--gold-400);
        }
        
        .info-section ul {
          list-style: none;
          padding: 0;
        }
        
        .info-section li {
          padding: 0.5rem 0;
          padding-left: 1.5rem;
          position: relative;
        }
        
        .info-section li:before {
          content: '‚Üí';
          position: absolute;
          left: 0;
          color: var(--gold-500);
        }
        
        .warning {
          color: var(--warning, #fbbf24);
          font-style: italic;
        }
      `}</style>
    </div>
  );
}