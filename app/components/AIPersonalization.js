'use client';

import { useEffect, useState } from 'react';

export default function AIPersonalization() {
  const [userProfile, setUserProfile] = useState({
    role: 'manager',
    preferences: {},
    behavior: []
  });
  const [recommendations, setRecommendations] = useState([]);

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserProfile();
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    trackUserBehavior();
    
    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    personalizeInterface();
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(updateRecommendations, 10000);
    
    return () => clearInterval(interval);
  }, []);

  const loadUserProfile = () => {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    const savedProfile = localStorage.getItem('userProfile');
    if (savedProfile) {
      setUserProfile(JSON.parse(savedProfile));
    }
  };

  const trackUserBehavior = () => {
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤
    document.addEventListener('click', (e) => {
      const target = e.target;
      const action = {
        type: 'click',
        element: target.className,
        timestamp: Date.now()
      };
      
      setUserProfile(prev => ({
        ...prev,
        behavior: [...prev.behavior.slice(-99), action]
      }));
    });
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤–∏–¥–∂–µ—Ç–∞—Ö
    const widgets = document.querySelectorAll('.widget');
    widgets.forEach(widget => {
      let startTime;
      
      widget.addEventListener('mouseenter', () => {
        startTime = Date.now();
      });
      
      widget.addEventListener('mouseleave', () => {
        if (startTime) {
          const duration = Date.now() - startTime;
          const widgetType = widget.querySelector('.widget-title')?.textContent;
          
          if (duration > 2000) { // –ë–æ–ª–µ–µ 2 —Å–µ–∫—É–Ω–¥
            updateWidgetPriority(widgetType, duration);
          }
        }
      });
    });
  };

  const updateWidgetPriority = (widgetType, duration) => {
    setUserProfile(prev => {
      const preferences = { ...prev.preferences };
      preferences[widgetType] = (preferences[widgetType] || 0) + duration;
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
      const updatedProfile = { ...prev, preferences };
      localStorage.setItem('userProfile', JSON.stringify(updatedProfile));
      
      return updatedProfile;
    });
  };

  const personalizeInterface = () => {
    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏
    const roleBasedLayouts = {
      manager: ['kpi', 'team', 'tasks', 'analytics'],
      analyst: ['analytics', 'reports', 'data', 'insights'],
      admin: ['system', 'users', 'settings', 'logs']
    };
    
    // –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–∂–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    setTimeout(() => {
      const dashboard = document.querySelector('.dashboard-grid');
      if (!dashboard) return;
      
      const widgets = Array.from(dashboard.querySelectorAll('.widget'));
      const sortedWidgets = widgets.sort((a, b) => {
        const aTitle = a.querySelector('.widget-title')?.textContent || '';
        const bTitle = b.querySelector('.widget-title')?.textContent || '';
        const aScore = userProfile.preferences[aTitle] || 0;
        const bScore = userProfile.preferences[bTitle] || 0;
        return bScore - aScore;
      });
      
      // –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–∂–µ—Ç–æ–≤
      sortedWidgets.forEach(widget => dashboard.appendChild(widget));
    }, 1000);
  };

  const updateRecommendations = () => {
    // –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    const behaviorPatterns = analyzeBehavior();
    const newRecommendations = generateRecommendations(behaviorPatterns);
    
    setRecommendations(newRecommendations);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    displayRecommendations(newRecommendations);
  };

  const analyzeBehavior = () => {
    const recentActions = userProfile.behavior.slice(-50);
    const patterns = {
      mostClickedElements: {},
      timeOfDay: new Date().getHours(),
      sessionDuration: Date.now() - (recentActions[0]?.timestamp || Date.now())
    };
    
    recentActions.forEach(action => {
      if (action.type === 'click') {
        patterns.mostClickedElements[action.element] = 
          (patterns.mostClickedElements[action.element] || 0) + 1;
      }
    });
    
    return patterns;
  };

  const generateRecommendations = (patterns) => {
    const recommendations = [];
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
    const hour = patterns.timeOfDay;
    if (hour >= 9 && hour <= 11) {
      recommendations.push({
        type: 'productivity',
        title: '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
        text: '–°–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º —Ä–∞–±–æ—Ç—ã, —Å–µ–π—á–∞—Å –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
        action: '–û—Ç–∫—Ä—ã—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É'
      });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    const mostClicked = Object.entries(patterns.mostClickedElements)
      .sort(([,a], [,b]) => b - a)[0];
    
    if (mostClicked && mostClicked[1] > 5) {
      recommendations.push({
        type: 'optimization',
        title: '–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è',
        text: `–í—ã —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ ${mostClicked[0]}. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø?`,
        action: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å'
      });
    }
    
    // AI-–∏–Ω—Å–∞–π—Ç—ã
    recommendations.push({
      type: 'insight',
      title: 'AI-–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
      text: '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ 23% –≤—ã—à–µ –æ–±—ã—á–Ω–æ–≥–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∞–∫—Ç–∏–≤–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂.',
      action: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'
    });
    
    return recommendations;
  };

  const displayRecommendations = (recommendations) => {
    const aiWidget = document.querySelector('.ai-assistant-widget');
    if (!aiWidget) return;
    
    const content = aiWidget.querySelector('.widget-content');
    if (content) {
      content.innerHTML = `
        <div class="ai-personalized-content">
          <div class="ai-greeting">
            ${getPersonalizedGreeting()}
          </div>
          <div class="ai-recommendations-list">
            ${recommendations.map(rec => `
              <div class="ai-recommendation-card" data-type="${rec.type}">
                <div class="ai-rec-icon">${getRecommendationIcon(rec.type)}</div>
                <div class="ai-rec-content">
                  <h4>${rec.title}</h4>
                  <p>${rec.text}</p>
                </div>
                <button class="ai-rec-action">${rec.action}</button>
              </div>
            `).join('')}
          </div>
        </div>
      `;
      
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
      content.querySelectorAll('.ai-rec-action').forEach((btn, index) => {
        btn.addEventListener('click', () => handleRecommendationAction(recommendations[index]));
      });
    }
  };

  const getPersonalizedGreeting = () => {
    const hour = new Date().getHours();
    const greetings = {
      morning: '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ì–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –¥–Ω—é?',
      day: '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–∞—à —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å?',
      evening: '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –í—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –¥–Ω—è',
      night: '–†–∞–±–æ—Ç–∞–µ—Ç–µ –¥–æ–ø–æ–∑–¥–Ω–∞? –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å!'
    };
    
    if (hour >= 5 && hour < 12) return greetings.morning;
    if (hour >= 12 && hour < 17) return greetings.day;
    if (hour >= 17 && hour < 22) return greetings.evening;
    return greetings.night;
  };

  const getRecommendationIcon = (type) => {
    const icons = {
      productivity: '‚ö°',
      optimization: '‚öôÔ∏è',
      insight: 'üí°',
      warning: '‚ö†Ô∏è'
    };
    return icons[type] || 'üìå';
  };

  const handleRecommendationAction = (recommendation) => {
    console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', recommendation);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    switch (recommendation.type) {
      case 'productivity':
        // –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        document.querySelector('[data-view="analytics"]')?.click();
        break;
      case 'optimization':
        // –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        openSettingsWindow();
        break;
      case 'insight':
        // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        showInsightDetails(recommendation);
        break;
    }
  };

  const openSettingsWindow = () => {
    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const settingsWindow = document.createElement('div');
    settingsWindow.className = 'floating-window active';
    settingsWindow.style.cssText = 'left: 50%; top: 50%; transform: translate(-50%, -50%);';
    settingsWindow.innerHTML = `
      <div class="window-header">
        <div class="window-title">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏</div>
        <div class="window-controls">
          <div class="window-control window-close"></div>
        </div>
      </div>
      <div class="window-content">
        <h3>–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø</h3>
        <p>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∏–¥–∂–µ—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞</p>
        <!-- –ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ -->
      </div>
    `;
    
    document.querySelector('.floating-windows')?.appendChild(settingsWindow);
  };

  const showInsightDetails = (insight) => {
    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
    const modal = document.createElement('div');
    modal.className = 'insight-modal';
    modal.innerHTML = `
      <div class="modal-content">
        <h2>${insight.title}</h2>
        <p>${insight.text}</p>
        <div class="insight-charts">
          <!-- –ó–¥–µ—Å—å –º–æ–≥—É—Ç –±—ã—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ -->
        </div>
        <button class="modal-close">–ó–∞–∫—Ä—ã—Ç—å</button>
      </div>
    `;
    
    document.body.appendChild(modal);
  };

  return null;
}