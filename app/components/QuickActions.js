'use client';
import { useState } from 'react';
import './QuickActions.css';

export default function QuickActions() {
  const [activeAction, setActiveAction] = useState(null);
  
  const actions = [
    {
      id: 'funnel',
      icon: 'üöÄ',
      title: '–°–æ–∑–¥–∞—Ç—å –≤–æ—Ä–æ–Ω–∫—É',
      description: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≤–æ—Ä–æ–Ω–∫—É –ø—Ä–æ–¥–∞–∂',
      color: '#4f46e5',
      steps: ['–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω', '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç—Ç–∞–ø—ã', '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é']
    },
    {
      id: 'ads',
      icon: 'üì¢',
      title: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É',
      description: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–µ–∫–ª–∞–º—É',
      color: '#06b6d4',
      steps: ['–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É', '–°–æ–∑–¥–∞–π—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤—ã', '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±—é–¥–∂–µ—Ç']
    },
    {
      id: 'analytics',
      icon: 'üìä',
      title: '–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
      description: '–ò–∑—É—á–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
      color: '#10b981',
      steps: ['–î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤', '–ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π', '–ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Å–∞–π—Ç—ã']
    },
    {
      id: 'report',
      icon: 'üìà',
      title: '–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞',
      description: '–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç',
      color: '#f59e0b',
      steps: ['–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏', '–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥', '–°–∫–∞—á–∞–π—Ç–µ PDF']
    },
    {
      id: 'crm',
      icon: 'üë•',
      title: 'CRM –∏–º–ø–æ—Ä—Ç',
      description: '–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –±–∞–∑—É –∫–ª–∏–µ–Ω—Ç–æ–≤',
      color: '#8b5cf6',
      steps: ['–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª', '–ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π', '–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É']
    },
    {
      id: 'automation',
      icon: '‚ö°',
      title: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
      description: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã',
      color: '#ef4444',
      steps: ['–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å', '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞', '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ']
    }
  ];

  const handleAction = (actionId) => {
    setActiveAction(actionId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('event', 'quick_action_click', {
        event_category: 'engagement',
        action_id: actionId
      });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö
    if (actionId === 'funnel' || actionId === 'ads') {
      fetch('/.netlify/functions/telegram-notify', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          type: 'quick_action',
          data: {
            action: actions.find(a => a.id === actionId)?.title,
            timestamp: new Date().toISOString()
          }
        })
      }).catch(console.error);
    }

    // –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    setTimeout(() => {
      alert(`–î–µ–π—Å—Ç–≤–∏–µ "${actions.find(a => a.id === actionId)?.title}" –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã`);
      setActiveAction(null);
    }, 1000);
  };

  return (
    <div className="quick-actions">
      <div className="actions-header">
        <h3>
          <span className="actions-icon">‚ö°</span>
          –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        </h3>
        <span className="actions-badge">NEW</span>
      </div>

      <div className="actions-grid">
        {actions.map((action) => (
          <button
            key={action.id}
            className={`action-card ${activeAction === action.id ? 'active' : ''}`}
            onClick={() => handleAction(action.id)}
            style={{ '--action-color': action.color }}
          >
            <div className="action-icon" style={{ background: `${action.color}20` }}>
              <span>{action.icon}</span>
            </div>
            <div className="action-content">
              <h4>{action.title}</h4>
              <p>{action.description}</p>
            </div>
            {activeAction === action.id && (
              <div className="action-progress">
                <div className="progress-spinner"></div>
              </div>
            )}
          </button>
        ))}
      </div>

      <div className="actions-footer">
        <div className="footer-stats">
          <span className="stat-item">
            <span className="stat-icon">üî•</span>
            <span className="stat-text">12 –¥–µ–π—Å—Ç–≤–∏–π —Å–µ–≥–æ–¥–Ω—è</span>
          </span>
          <span className="stat-item">
            <span className="stat-icon">‚è±</span>
            <span className="stat-text">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: 2.5 –º–∏–Ω</span>
          </span>
        </div>
        <button className="view-all-btn">
          –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Üí
        </button>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —à–∞–≥–∞–º–∏ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ) */}
      {activeAction && (
        <div className="action-modal">
          <div className="modal-content">
            <h3>{actions.find(a => a.id === activeAction)?.title}</h3>
            <div className="modal-steps">
              {actions.find(a => a.id === activeAction)?.steps.map((step, index) => (
                <div key={index} className="step-item">
                  <span className="step-number">{index + 1}</span>
                  <span className="step-text">{step}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}