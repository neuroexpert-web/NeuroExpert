'use client';

import { useState } from 'react';

export default function ContactFormTest() {
  const [testResults, setTestResults] = useState(null);
  const [loading, setLoading] = useState(false);

  const runTest = async () => {
    setLoading(true);
    const results = {
      timestamp: new Date().toISOString(),
      tests: []
    };

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API endpoint
    try {
      const response = await fetch('/api/contact-form', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          email: 'test@example.com',
          phone: '+7 (999) 123-45-67',
          message: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.'
        })
      });

      const data = await response.json();
      
      results.tests.push({
        name: 'API Endpoint',
        status: response.ok ? 'success' : 'error',
        message: response.ok ? 'Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç' : `–û—à–∏–±–∫–∞: ${data.error}`,
        details: {
          statusCode: response.status,
          response: data
        }
      });
    } catch (error) {
      results.tests.push({
        name: 'API Endpoint',
        status: 'error',
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: ${error.message}`,
        details: { error: error.toString() }
      });
    }

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const validationTests = [
      {
        name: '–ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è',
        data: { name: '–ê', email: 'test@test.com', message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' },
        expectedError: true
      },
      {
        name: '–ù–µ–≤–µ—Ä–Ω—ã–π email',
        data: { name: '–¢–µ—Å—Ç', email: 'notanemail', message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' },
        expectedError: true
      },
      {
        name: '–ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        data: { name: '–¢–µ—Å—Ç', email: 'test@test.com', message: '–ö–æ—Ä–æ—Ç–∫–æ–µ' },
        expectedError: true
      },
      {
        name: '–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
        data: {
          name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
          email: 'ivan@example.com',
          phone: '+7 (999) 888-77-66',
          message: '–≠—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.'
        },
        expectedError: false
      }
    ];

    for (const test of validationTests) {
      try {
        const response = await fetch('/api/contact-form', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(test.data)
        });

        const data = await response.json();
        const hasError = !response.ok;

        results.tests.push({
          name: `–í–∞–ª–∏–¥–∞—Ü–∏—è: ${test.name}`,
          status: hasError === test.expectedError ? 'success' : 'error',
          message: hasError === test.expectedError 
            ? '–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' 
            : '–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
          details: {
            sentData: test.data,
            response: data,
            expectedError: test.expectedError,
            actualError: hasError
          }
        });
      } catch (error) {
        results.tests.push({
          name: `–í–∞–ª–∏–¥–∞—Ü–∏—è: ${test.name}`,
          status: 'error',
          message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${error.message}`,
          details: { error: error.toString() }
        });
      }
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    try {
      const envResponse = await fetch('/api/test');
      const envData = await envResponse.json();
      
      results.tests.push({
        name: 'Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
        status: envData.telegram.configured ? 'success' : 'warning',
        message: envData.telegram.configured 
          ? 'Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω' 
          : 'Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID)',
        details: envData.telegram
      });
    } catch (error) {
      results.tests.push({
        name: 'Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
        status: 'warning',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram'
      });
    }

    // –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results.summary = {
      total: results.tests.length,
      success: results.tests.filter(t => t.status === 'success').length,
      warnings: results.tests.filter(t => t.status === 'warning').length,
      errors: results.tests.filter(t => t.status === 'error').length
    };

    setTestResults(results);
    setLoading(false);
  };

  return (
    <div className="contact-form-test">
      <h3>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</h3>
      
      <button 
        onClick={runTest} 
        disabled={loading}
        className="test-button"
      >
        {loading ? '‚è≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã'}
      </button>

      {testResults && (
        <div className="test-results">
          <div className="results-summary">
            <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h4>
            <div className="summary-stats">
              <span className="stat success">‚úÖ –£—Å–ø–µ—à–Ω–æ: {testResults.summary.success}</span>
              <span className="stat warning">‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {testResults.summary.warnings}</span>
              <span className="stat error">‚ùå –û—à–∏–±–∫–∏: {testResults.summary.errors}</span>
            </div>
          </div>

          <div className="test-details">
            {testResults.tests.map((test, index) => (
              <details key={index} className={`test-item ${test.status}`}>
                <summary>
                  <span className="test-status">
                    {test.status === 'success' ? '‚úÖ' : test.status === 'warning' ? '‚ö†Ô∏è' : '‚ùå'}
                  </span>
                  <span className="test-name">{test.name}</span>
                </summary>
                <div className="test-content">
                  <p className="test-message">{test.message}</p>
                  {test.details && (
                    <pre className="test-details-json">
                      {JSON.stringify(test.details, null, 2)}
                    </pre>
                  )}
                </div>
              </details>
            ))}
          </div>

          <div className="test-timestamp">
            –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {new Date(testResults.timestamp).toLocaleString('ru-RU')}
          </div>
        </div>
      )}

      <style jsx>{`
        .contact-form-test {
          background: rgba(26, 26, 46, 0.9);
          border: 1px solid rgba(139, 92, 246, 0.3);
          border-radius: 16px;
          padding: 2rem;
          margin: 2rem 0;
        }

        h3 {
          color: white;
          margin-bottom: 1.5rem;
        }

        .test-button {
          background: linear-gradient(135deg, #8b5cf6, #ec4899);
          color: white;
          border: none;
          padding: 1rem 2rem;
          border-radius: 8px;
          font-size: 1rem;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s ease;
          margin-bottom: 2rem;
        }

        .test-button:hover:not(:disabled) {
          transform: translateY(-2px);
          box-shadow: 0 10px 20px rgba(139, 92, 246, 0.3);
        }

        .test-button:disabled {
          opacity: 0.7;
          cursor: not-allowed;
        }

        .results-summary {
          background: rgba(139, 92, 246, 0.1);
          border-radius: 12px;
          padding: 1.5rem;
          margin-bottom: 2rem;
        }

        .results-summary h4 {
          color: white;
          margin-bottom: 1rem;
        }

        .summary-stats {
          display: flex;
          gap: 2rem;
          flex-wrap: wrap;
        }

        .stat {
          font-weight: 500;
        }

        .stat.success {
          color: #10b981;
        }

        .stat.warning {
          color: #f59e0b;
        }

        .stat.error {
          color: #ef4444;
        }

        .test-item {
          background: rgba(139, 92, 246, 0.05);
          border: 1px solid rgba(139, 92, 246, 0.2);
          border-radius: 8px;
          margin-bottom: 1rem;
          overflow: hidden;
        }

        .test-item.success {
          border-color: rgba(16, 185, 129, 0.3);
        }

        .test-item.warning {
          border-color: rgba(245, 158, 11, 0.3);
        }

        .test-item.error {
          border-color: rgba(239, 68, 68, 0.3);
        }

        summary {
          padding: 1rem;
          cursor: pointer;
          display: flex;
          align-items: center;
          gap: 1rem;
          color: white;
          transition: background 0.3s ease;
        }

        summary:hover {
          background: rgba(139, 92, 246, 0.1);
        }

        .test-status {
          font-size: 1.2rem;
        }

        .test-name {
          font-weight: 500;
        }

        .test-content {
          padding: 1rem;
          background: rgba(0, 0, 0, 0.2);
        }

        .test-message {
          color: rgba(255, 255, 255, 0.9);
          margin-bottom: 1rem;
        }

        .test-details-json {
          background: rgba(0, 0, 0, 0.3);
          border: 1px solid rgba(139, 92, 246, 0.2);
          border-radius: 4px;
          padding: 1rem;
          overflow-x: auto;
          color: rgba(255, 255, 255, 0.8);
          font-size: 0.875rem;
        }

        .test-timestamp {
          text-align: center;
          color: rgba(255, 255, 255, 0.6);
          font-size: 0.875rem;
          margin-top: 2rem;
        }
      `}</style>
    </div>
  );
}