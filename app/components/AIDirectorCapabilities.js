'use client';

import { motion } from 'framer-motion';
import { useState } from 'react';

export default function AIDirectorCapabilities() {
  const [activeTab, setActiveTab] = useState('personality');

  const capabilities = {
    personality: {
      title: '–õ–∏—á–Ω–æ—Å—Ç—å –∏ –æ–ø—ã—Ç',
      icon: 'üë®‚Äçüíº',
      content: {
        name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ù–µ–π—Ä–æ–Ω–æ–≤',
        role: '–£–ø—Ä–∞–≤–ª—è—é—â–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä NeuroExpert',
        experience: '15+ –ª–µ—Ç –≤ IT –∏ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏',
        achievements: [
          '500+ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤',
          '–≠–∫—Å–ø–µ—Ä—Ç –≤ AI –∏ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏',
          '–°–ø–∏–∫–µ—Ä –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π',
          '–ê–≤—Ç–æ—Ä –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –±—ã—Å—Ç—Ä–æ–π —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏'
        ]
      }
    },
    intelligence: {
      title: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
      icon: 'üß†',
      content: {
        skills: [
          '–ü–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–æ–¥—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–æ–≤',
          '–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞',
          '–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —ç–º–æ—Ü–∏–∏ –∏ –æ–ø–∞—Å–µ–Ω–∏—è',
          '–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è'
        ]
      }
    },
    expertise: {
      title: '–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞',
      icon: 'üéØ',
      content: {
        industries: ['E-commerce', 'B2B', '–£—Å–ª—É–≥–∏', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–ú–µ–¥–∏—Ü–∏–Ω–∞'],
        technologies: ['GPT-4', 'Claude 3', 'Gemini Pro', 'Custom AI'],
        solutions: ['–°–∞–π—Ç—ã', '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'CRM', '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è']
      }
    },
    results: {
      title: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã',
      icon: 'üìà',
      content: {
        metrics: [
          '–ö–æ–Ω–≤–µ—Ä—Å–∏—è: —Ä–æ—Å—Ç —Å 2% –¥–æ 15%',
          '–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–∏–¥–∞: —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ 70%',
          'LTV: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞ 120%',
          'ROI: –æ—Ç 300% –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤'
        ]
      }
    }
  };

  return (
    <section className="py-20 px-4">
      <div className="max-w-6xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="text-center mb-12"
        >
          <h2 className="text-4xl font-bold mb-4">
            <span className="gradient-text">AI –£–ø—Ä–∞–≤–ª—è—é—â–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä</span>
          </h2>
          <p className="text-xl text-gray-400">
            –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç –≤–∞—à –±–∏–∑–Ω–µ—Å
          </p>
        </motion.div>

        {/* Tabs */}
        <div className="flex justify-center gap-4 mb-12 flex-wrap">
          {Object.entries(capabilities).map(([key, cap]) => (
            <motion.button
              key={key}
              className={`glass px-6 py-3 rounded-xl font-semibold transition-all ${
                activeTab === key ? 'bg-primary text-white' : ''
              }`}
              onClick={() => setActiveTab(key)}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <span className="text-2xl mr-2">{cap.icon}</span>
              {cap.title}
            </motion.button>
          ))}
        </div>

        {/* Content */}
        <motion.div
          key={activeTab}
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.4 }}
          className="card-premium"
        >
          {activeTab === 'personality' && (
            <div className="grid md:grid-cols-2 gap-8">
              <div>
                <h3 className="text-2xl font-bold mb-4">{capabilities.personality.content.name}</h3>
                <p className="text-gray-300 mb-2">{capabilities.personality.content.role}</p>
                <p className="text-primary mb-6">{capabilities.personality.content.experience}</p>
              </div>
              <div>
                <h4 className="text-lg font-semibold mb-4">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</h4>
                <ul className="space-y-2">
                  {capabilities.personality.content.achievements.map((achievement, i) => (
                    <li key={i} className="flex items-start">
                      <span className="text-primary mr-2">‚úì</span>
                      {achievement}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          )}

          {activeTab === 'intelligence' && (
            <div>
              <h3 className="text-2xl font-bold mb-6">–ù–∞–≤—ã–∫–∏ —ç–º–ø–∞—Ç–∏–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è</h3>
              <div className="grid md:grid-cols-2 gap-4">
                {capabilities.intelligence.content.skills.map((skill, i) => (
                  <div key={i} className="glass p-4 rounded-lg hover-lift">
                    <span className="text-primary text-xl mr-2">üí°</span>
                    {skill}
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'expertise' && (
            <div className="grid md:grid-cols-3 gap-8">
              <div>
                <h4 className="text-lg font-semibold mb-4">–û—Ç—Ä–∞—Å–ª–∏</h4>
                {capabilities.expertise.content.industries.map((industry, i) => (
                  <div key={i} className="badge-premium mb-2">{industry}</div>
                ))}
              </div>
              <div>
                <h4 className="text-lg font-semibold mb-4">–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</h4>
                {capabilities.expertise.content.technologies.map((tech, i) => (
                  <div key={i} className="badge-premium mb-2">{tech}</div>
                ))}
              </div>
              <div>
                <h4 className="text-lg font-semibold mb-4">–†–µ—à–µ–Ω–∏—è</h4>
                {capabilities.expertise.content.solutions.map((solution, i) => (
                  <div key={i} className="badge-premium mb-2">{solution}</div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'results' && (
            <div>
              <h3 className="text-2xl font-bold mb-6">–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</h3>
              <div className="grid md:grid-cols-2 gap-6">
                {capabilities.results.content.metrics.map((metric, i) => (
                  <motion.div
                    key={i}
                    className="glass p-6 rounded-xl"
                    initial={{ scale: 0.9, opacity: 0 }}
                    animate={{ scale: 1, opacity: 1 }}
                    transition={{ delay: i * 0.1 }}
                  >
                    <div className="text-3xl mb-2">üìä</div>
                    <p className="text-lg">{metric}</p>
                  </motion.div>
                ))}
              </div>
            </div>
          )}
        </motion.div>

        {/* CTA */}
        <motion.div
          className="text-center mt-12"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.8 }}
        >
          <p className="text-gray-400 mb-6">
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å AI –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
          </p>
          <button
            className="btn-premium"
            onClick={() => {
              // –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç
              const event = new CustomEvent('openAIChat');
              window.dispatchEvent(event);
            }}
          >
            –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å AI –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º
            <svg className="inline-block ml-2 w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
            </svg>
          </button>
        </motion.div>
      </div>
    </section>
  );
}