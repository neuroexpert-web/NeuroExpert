/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
 */

import { TEST_STATUS, TEST_PRIORITY, REPORT_CONFIG } from '../constants/testConstants';

export class TestReporter {
  constructor(config = {}) {
    this.config = { ...REPORT_CONFIG, ...config };
  }

  generateReport(testResults) {
    const summary = this.calculateSummary(testResults);
    const detailedResults = this.formatDetailedResults(testResults);
    const recommendations = this.generateRecommendations(testResults);
    
    const report = {
      summary,
      results: detailedResults,
      recommendations,
      timestamp: new Date().toISOString(),
      duration: this.calculateTotalDuration(testResults)
    };
    
    if (this.config.SAVE_TO_FILE) {
      this.saveReportToFile(report);
    }
    
    return report;
  }

  calculateSummary(testResults) {
    const total = testResults.length;
    const passed = testResults.filter(r => r.status === TEST_STATUS.PASSED).length;
    const failed = testResults.filter(r => r.status === TEST_STATUS.FAILED).length;
    const skipped = testResults.filter(r => r.status === TEST_STATUS.SKIPPED).length;
    
    const byPriority = {
      critical: this.getResultsByPriority(testResults, TEST_PRIORITY.CRITICAL),
      high: this.getResultsByPriority(testResults, TEST_PRIORITY.HIGH),
      medium: this.getResultsByPriority(testResults, TEST_PRIORITY.MEDIUM),
      low: this.getResultsByPriority(testResults, TEST_PRIORITY.LOW)
    };
    
    return {
      total,
      passed,
      failed,
      skipped,
      passRate: total > 0 ? ((passed / total) * 100).toFixed(1) + '%' : '0%',
      byPriority,
      status: this.getOverallStatus(byPriority)
    };
  }

  getResultsByPriority(testResults, priority) {
    const priorityTests = testResults.filter(r => r.priority === priority);
    const passed = priorityTests.filter(r => r.status === TEST_STATUS.PASSED).length;
    const total = priorityTests.length;
    
    return {
      total,
      passed,
      failed: total - passed,
      passRate: total > 0 ? ((passed / total) * 100).toFixed(1) + '%' : '0%'
    };
  }

  getOverallStatus(byPriority) {
    // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω
    if (byPriority.critical.failed > 0) {
      return 'CRITICAL_FAILURE';
    }
    
    // –ï—Å–ª–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ –±–æ–ª—å—à–µ 50% –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    if (byPriority.high.total > 0 && (byPriority.high.failed / byPriority.high.total) > 0.5) {
      return 'HIGH_FAILURE';
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã
    const totalFailed = Object.values(byPriority).reduce((sum, p) => sum + p.failed, 0);
    if (totalFailed === 0) {
      return 'ALL_PASSED';
    }
    
    return 'PARTIAL_FAILURE';
  }

  formatDetailedResults(testResults) {
    return testResults.map(result => {
      const formatted = {
        testId: result.testId,
        testName: result.testName,
        priority: result.priority,
        status: result.status,
        duration: `${result.duration.toFixed(0)}ms`,
        passedSteps: result.steps.filter(s => s.status === TEST_STATUS.PASSED).length,
        totalSteps: result.steps.length
      };
      
      if (this.config.SHOW_DETAILS && result.status === TEST_STATUS.FAILED) {
        formatted.errors = result.errors;
        formatted.failedSteps = result.steps
          .filter(s => s.status === TEST_STATUS.FAILED)
          .map(s => ({
            action: s.action,
            expected: s.expected,
            actual: s.actual,
            error: s.error
          }));
      }
      
      return formatted;
    });
  }

  generateRecommendations(testResults) {
    const recommendations = [];
    const summary = this.calculateSummary(testResults);
    
    if (summary.byPriority.critical.failed > 0) {
      recommendations.push({
        level: 'CRITICAL',
        message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.',
        tests: testResults
          .filter(r => r.priority === TEST_PRIORITY.CRITICAL && r.status === TEST_STATUS.FAILED)
          .map(r => r.testName)
      });
    }
    
    if (summary.passRate < 80) {
      recommendations.push({
        level: 'HIGH',
        message: `–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ (${summary.passRate}) –Ω–∏–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ –ø–æ—Ä–æ–≥–∞ 80%.`
      });
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const slowTests = testResults.filter(r => r.duration > 10000);
    if (slowTests.length > 0) {
      recommendations.push({
        level: 'MEDIUM',
        message: `${slowTests.length} —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ (>10 —Å–µ–∫—É–Ω–¥).`,
        tests: slowTests.map(r => ({
          name: r.testName,
          duration: `${(r.duration / 1000).toFixed(1)}s`
        }))
      });
    }
    
    return recommendations;
  }

  calculateTotalDuration(testResults) {
    const total = testResults.reduce((sum, r) => sum + r.duration, 0);
    return `${(total / 1000).toFixed(1)}s`;
  }

  saveReportToFile(report) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    console.log('üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', this.config.reportPath);
  }

  generateConsoleReport(testResults) {
    const summary = this.calculateSummary(testResults);
    
    console.log('\n' + '='.repeat(50));
    console.log('üìä –û–¢–ß–ï–¢ SMOKE-–¢–ï–°–¢–û–í');
    console.log('='.repeat(50));
    
    console.log(`\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${summary.total}`);
    console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${summary.passed}`);
    console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${summary.failed}`);
    console.log(`   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${summary.skipped}`);
    console.log(`   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${summary.passRate}`);
    
    console.log(`\nüéØ –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:`);
    Object.entries(summary.byPriority).forEach(([priority, stats]) => {
      if (stats.total > 0) {
        const emoji = stats.failed > 0 ? '‚ùå' : '‚úÖ';
        console.log(`   ${emoji} ${priority}: ${stats.passed}/${stats.total} (${stats.passRate})`);
      }
    });
    
    if (summary.failed > 0) {
      console.log(`\n‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:`);
      testResults
        .filter(r => r.status === TEST_STATUS.FAILED)
        .forEach(r => {
          console.log(`   - ${r.testName}`);
          if (r.errors.length > 0) {
            console.log(`     –û—à–∏–±–∫–∞: ${r.errors[0]}`);
          }
        });
    }
    
    console.log('\n' + '='.repeat(50));
  }
}