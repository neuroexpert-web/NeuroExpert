'use client';

import React, { useState, useEffect, useCallback } from 'react';
import type { DashboardFilters as DashboardFiltersType, UserRole, SystemMetrics } from '@/types/dashboard';
import styles from './SystemWidget.module.css';

interface SystemWidgetProps {
  filters: DashboardFiltersType;
  userRole: UserRole;
  refreshInterval: number;
}

export default function SystemWidget({ 
  filters, 
  userRole, 
  refreshInterval 
}: SystemWidgetProps) {
  const [data, setData] = useState<SystemMetrics | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const fetchData = useCallback(async () => {
    try {
      setError(null);
      
      const params = new URLSearchParams({
        env: filters.env || 'prod'
      });

      const response = await fetch(`/api/systemmetrics?${params}`, {
        headers: {
          'Authorization': 'Bearer demo-token',
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const result = await response.json();
      
      if (result.status === 'ok') {
        setData(result.data);
        setLastUpdate(new Date());
      } else {
        throw new Error(result.error?.message || 'Unknown error');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to fetch data');
    } finally {
      setLoading(false);
    }
  }, [filters.env]);

  // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  useEffect(() => {
    if (!filters.liveMode) return;

    const interval = setInterval(fetchData, refreshInterval);
    return () => clearInterval(interval);
  }, [filters.liveMode, refreshInterval, fetchData]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
  const getStatus = (value: number, thresholds: { warning: number; critical: number }) => {
    if (value >= thresholds.critical) return 'critical';
    if (value >= thresholds.warning) return 'warning';
    return 'healthy';
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'healthy': return '#10b981';
      case 'warning': return '#f59e0b';
      case 'critical': return '#ef4444';
      default: return '#64748b';
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–ø—Ç–∞–π–º–∞
  const formatUptime = (seconds: number) => {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    
    if (days > 0) return `${days}–¥ ${hours}—á`;
    if (hours > 0) return `${hours}—á ${mins}–º`;
    return `${mins}–º`;
  };

  if (loading && !data) {
    return (
      <div className={styles.widget}>
        <div className={styles.loadingState}>
          <div className={styles.spinner}></div>
          <span>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.widget}>
        <div className={styles.errorState}>
          <span className={styles.errorIcon}>‚ö†Ô∏è</span>
          <div>
            <h4>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h4>
            <p>{error}</p>
            <button onClick={fetchData} className={styles.retryButton}>
              –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (!data) {
    return (
      <div className={styles.widget}>
        <div className={styles.noData}>
          –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        </div>
      </div>
    );
  }

  const cpuStatus = getStatus(data.host.cpuPct, { warning: 70, critical: 85 });
  const ramStatus = getStatus(data.host.ramUsedPct, { warning: 80, critical: 90 });
  const errorRateStatus = getStatus(data.app.errorRatePct, { warning: 0.5, critical: 1.0 });

  return (
    <div className={styles.widget}>
      <div className={styles.content}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º */}
        <div className={styles.header}>
          <div className={styles.overallStatus}>
            <div className={`${styles.statusDot} ${styles[cpuStatus === 'critical' || ramStatus === 'critical' || errorRateStatus === 'critical' ? 'critical' : cpuStatus === 'warning' || ramStatus === 'warning' || errorRateStatus === 'warning' ? 'warning' : 'healthy']}`}></div>
            <span>–°–∏—Å—Ç–µ–º–∞ {cpuStatus === 'critical' || ramStatus === 'critical' || errorRateStatus === 'critical' ? '–∫—Ä–∏—Ç–∏—á–Ω–∞' : cpuStatus === 'warning' || ramStatus === 'warning' || errorRateStatus === 'warning' ? '—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è' : '–∑–¥–æ—Ä–æ–≤–∞'}</span>
          </div>
          <div className={styles.buildInfo}>
            <span className={styles.version}>v{data.build.version}</span>
            <span className={styles.uptime}>‚è± {formatUptime(data.build.uptimeSec)}</span>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
        <div className={styles.metricsGrid}>
          {/* –•–æ—Å—Ç –º–µ—Ç—Ä–∏–∫–∏ */}
          <div className={styles.metricsSection}>
            <h4 className={styles.sectionTitle}>
              <span className={styles.sectionIcon}>üñ•Ô∏è</span>
              –•–æ—Å—Ç
            </h4>
            
            <div className={styles.metricItem}>
              <div className={styles.metricHeader}>
                <span>CPU</span>
                <span className={styles.metricValue} style={{ color: getStatusColor(cpuStatus) }}>
                  {data.host.cpuPct.toFixed(1)}%
                </span>
              </div>
              <div className={styles.metricBar}>
                <div 
                  className={styles.metricProgress}
                  style={{ 
                    width: `${data.host.cpuPct}%`,
                    backgroundColor: getStatusColor(cpuStatus)
                  }}
                ></div>
              </div>
            </div>

            <div className={styles.metricItem}>
              <div className={styles.metricHeader}>
                <span>RAM</span>
                <span className={styles.metricValue} style={{ color: getStatusColor(ramStatus) }}>
                  {data.host.ramUsedPct.toFixed(1)}%
                </span>
              </div>
              <div className={styles.metricBar}>
                <div 
                  className={styles.metricProgress}
                  style={{ 
                    width: `${data.host.ramUsedPct}%`,
                    backgroundColor: getStatusColor(ramStatus)
                  }}
                ></div>
              </div>
            </div>

            {/* –°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
            <div className={styles.networkStats}>
              <div className={styles.networkItem}>
                <span className={styles.networkLabel}>‚Üì IN</span>
                <span className={styles.networkValue}>{data.host.net.inMbps.toFixed(1)} Mbps</span>
              </div>
              <div className={styles.networkItem}>
                <span className={styles.networkLabel}>‚Üë OUT</span>
                <span className={styles.networkValue}>{data.host.net.outMbps.toFixed(1)} Mbps</span>
              </div>
            </div>
          </div>

          {/* –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ */}
          <div className={styles.metricsSection}>
            <h4 className={styles.sectionTitle}>
              <span className={styles.sectionIcon}>üöÄ</span>
              –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            </h4>
            
            <div className={styles.appStats}>
              <div className={styles.appStat}>
                <span className={styles.appLabel}>RPS</span>
                <span className={styles.appValue}>{data.app.rps}</span>
              </div>
              <div className={styles.appStat}>
                <span className={styles.appLabel}>P95</span>
                <span className={styles.appValue}>{data.app.latencyMs.p95}ms</span>
              </div>
              <div className={styles.appStat}>
                <span className={styles.appLabel}>Errors</span>
                <span 
                  className={styles.appValue}
                  style={{ color: getStatusColor(errorRateStatus) }}
                >
                  {data.app.errorRatePct.toFixed(2)}%
                </span>
              </div>
              {userRole !== 'Client' && (
                <div className={styles.appStat}>
                  <span className={styles.appLabel}>Queue</span>
                  <span className={styles.appValue}>{data.app.queues.requests}</span>
                </div>
              )}
            </div>
          </div>

          {/* –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö */}
          {userRole !== 'Client' && (
            <div className={styles.metricsSection}>
              <h4 className={styles.sectionTitle}>
                <span className={styles.sectionIcon}>üóÑÔ∏è</span>
                –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
              </h4>
              
              <div className={styles.dbStats}>
                <div className={styles.dbStat}>
                  <span className={styles.dbLabel}>Connections</span>
                  <span className={styles.dbValue}>{data.db.connections}</span>
                </div>
                <div className={styles.dbStat}>
                  <span className={styles.dbLabel}>Cache Hit</span>
                  <span className={styles.dbValue}>{data.db.cacheHitPct.toFixed(1)}%</span>
                </div>
                <div className={styles.dbStat}>
                  <span className={styles.dbLabel}>Slow Queries</span>
                  <span className={styles.dbValue}>{data.db.slowQueries}</span>
                </div>
                <div className={styles.dbStat}>
                  <span className={styles.dbLabel}>Replication</span>
                  <span className={styles.dbValue}>{data.db.replicationLagSec}s</span>
                </div>
              </div>
            </div>
          )}

          {/* –î–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è Admin/Manager) */}
          {userRole !== 'Client' && data.host.disk.length > 0 && (
            <div className={styles.metricsSection}>
              <h4 className={styles.sectionTitle}>
                <span className={styles.sectionIcon}>üíæ</span>
                –•—Ä–∞–Ω–∏–ª–∏—â–µ
              </h4>
              
              <div className={styles.diskStats}>
                {data.host.disk.map((disk, index) => {
                  const diskStatus = getStatus(disk.usedPct, { warning: 80, critical: 90 });
                  return (
                    <div key={index} className={styles.diskItem}>
                      <div className={styles.diskHeader}>
                        <span className={styles.diskMount}>{disk.mount}</span>
                        <span 
                          className={styles.diskUsage}
                          style={{ color: getStatusColor(diskStatus) }}
                        >
                          {disk.usedPct.toFixed(1)}%
                        </span>
                      </div>
                      {userRole === 'Admin' && (
                        <div className={styles.diskDetails}>
                          <span>IOPS: {disk.iops}</span>
                          <span>Latency: {disk.latencyMs.toFixed(1)}ms</span>
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
            </div>
          )}
        </div>

        {/* –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
        <div className={styles.updateStatus}>
          <span className={styles.updateIcon}>
            {filters.liveMode ? 'üì°' : '‚è∏Ô∏è'}
          </span>
          <span className={styles.updateText}>
            {filters.liveMode 
              ? `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${lastUpdate.toLocaleTimeString()}`
              : '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ'
            }
          </span>
        </div>
      </div>
    </div>
  );
}