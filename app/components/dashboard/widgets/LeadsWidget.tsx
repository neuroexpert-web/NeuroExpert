'use client';

import React, { useState, useEffect } from 'react';
import type { DashboardFilters as DashboardFiltersType, UserRole } from '@/types/dashboard';
import styles from './LeadsWidget.module.css';

interface LeadsWidgetProps {
  filters: DashboardFiltersType;
  userRole: UserRole;
  refreshInterval: number;
}

interface Lead {
  id: string;
  name: string;
  email: string;
  phone: string;
  source: string;
  status: 'new' | 'contacted' | 'qualified' | 'proposal' | 'closed-won' | 'closed-lost';
  value: number;
  probability: number;
  createdAt: string;
  lastActivity: string;
}

interface ConversionFunnel {
  stage: string;
  count: number;
  percentage: number;
  conversion: number;
}

interface LeadsData {
  totalLeads: number;
  leadsGrowth: number;
  qualifiedLeads: number;
  conversionRate: number;
  avgDealValue: number;
  totalPipeline: number;
  recentLeads: Lead[];
  conversionFunnel: ConversionFunnel[];
  leadSources: Array<{
    source: string;
    count: number;
    conversion: number;
    quality: 'high' | 'medium' | 'low';
  }>;
  topDeals: Lead[];
  urgentFollowUps: Lead[];
}

export default function LeadsWidget({ 
  filters, 
  userRole, 
  refreshInterval 
}: LeadsWidgetProps) {
  const [data, setData] = useState<LeadsData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadLeadsData = () => {
      setLoading(true);
      
      setTimeout(() => {
        try {
          const leads: Lead[] = [
            {
              id: '1',
              name: '–û–û–û "–ê–ª—å—Ñ–∞ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"',
              email: 'director@alfa-tech.ru',
              phone: '+7 (495) 123-45-67',
              source: '–Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç',
              status: 'qualified',
              value: 450000,
              probability: 75,
              createdAt: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥',
              lastActivity: '30 –º–∏–Ω –Ω–∞–∑–∞–¥'
            },
            {
              id: '2',
              name: '–ò–ü –ü–µ—Ç—Ä–æ–≤ –ê.–°.',
              email: 'petrov@example.com',
              phone: '+7 (903) 234-56-78',
              source: '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫',
              status: 'proposal',
              value: 180000,
              probability: 60,
              createdAt: '5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥',
              lastActivity: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥'
            },
            {
              id: '3',
              name: '–¢–û–û "–ë–∏–∑–Ω–µ—Å–†–µ—à–µ–Ω–∏—è"',
              email: 'info@bizresheniya.kz',
              phone: '+7 (727) 345-67-89',
              source: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏',
              status: 'contacted',
              value: 320000,
              probability: 40,
              createdAt: '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥',
              lastActivity: '4 —á–∞—Å–∞ –Ω–∞–∑–∞–¥'
            },
            {
              id: '4',
              name: '–û–û–û "–ù–æ–≤—ã–µ –ì–æ—Ä–∏–∑–æ–Ω—Ç—ã"',
              email: 'sales@novgor.ru',
              phone: '+7 (812) 456-78-90',
              source: '–•–æ–ª–æ–¥–Ω—ã–µ –∑–≤–æ–Ω–∫–∏',
              status: 'new',
              value: 750000,
              probability: 20,
              createdAt: '2 –¥–Ω—è –Ω–∞–∑–∞–¥',
              lastActivity: '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥'
            }
          ];

          const mockData: LeadsData = {
            totalLeads: 127,
            leadsGrowth: 18.5,
            qualifiedLeads: 34,
            conversionRate: 26.8,
            avgDealValue: 385000,
            totalPipeline: 2850000,
            recentLeads: leads,
            conversionFunnel: [
              { stage: '–õ–∏–¥—ã', count: 127, percentage: 100, conversion: 100 },
              { stage: '–ö–æ–Ω—Ç–∞–∫—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', count: 89, percentage: 70, conversion: 70 },
              { stage: '–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã', count: 56, percentage: 44, conversion: 63 },
              { stage: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', count: 23, percentage: 18, conversion: 41 },
              { stage: '–°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞', count: 12, percentage: 9, conversion: 52 }
            ],
            leadSources: [
              { source: '–Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç', count: 42, conversion: 31.5, quality: 'high' },
              { source: '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫', count: 38, conversion: 28.2, quality: 'high' },
              { source: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', count: 24, conversion: 22.1, quality: 'medium' },
              { source: 'Email-—Ä–∞—Å—Å—ã–ª–∫–∏', count: 15, conversion: 18.7, quality: 'medium' },
              { source: '–•–æ–ª–æ–¥–Ω—ã–µ –∑–≤–æ–Ω–∫–∏', count: 8, conversion: 12.5, quality: 'low' }
            ],
            topDeals: leads.filter(lead => lead.value > 300000).sort((a, b) => b.value - a.value),
            urgentFollowUps: leads.filter(lead => 
              lead.status === 'contacted' || 
              lead.status === 'qualified' || 
              lead.status === 'proposal'
            )
          };

          setData(mockData);
          setError(null);
        } catch (err) {
          setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ª–∏–¥–∞–º');
        } finally {
          setLoading(false);
        }
      }, 600);
    };

    loadLeadsData();

    if (filters.liveMode) {
      const interval = setInterval(loadLeadsData, refreshInterval);
      return () => clearInterval(interval);
    }
  }, [filters.liveMode, refreshInterval]);

  const formatNumber = (num: number) => {
    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;
    if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;
    return num.toLocaleString('ru-RU');
  };

  const formatCurrency = (num: number) => {
    return `‚ÇΩ ${formatNumber(num)}`;
  };

  const formatPercent = (num: number) => {
    return `${num.toFixed(1)}%`;
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'new': return '#6b7280';
      case 'contacted': return '#3b82f6';
      case 'qualified': return '#f59e0b';
      case 'proposal': return '#8b5cf6';
      case 'closed-won': return '#22c55e';
      case 'closed-lost': return '#ef4444';
      default: return '#6b7280';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'new': return '–ù–æ–≤—ã–π';
      case 'contacted': return '–ö–æ–Ω—Ç–∞–∫—Ç';
      case 'qualified': return '–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω';
      case 'proposal': return '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ';
      case 'closed-won': return '–ó–∞–∫—Ä—ã—Ç';
      case 'closed-lost': return '–ü–æ—Ç–µ—Ä—è–Ω';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const getQualityColor = (quality: string) => {
    switch (quality) {
      case 'high': return '#22c55e';
      case 'medium': return '#f59e0b';
      case 'low': return '#ef4444';
      default: return '#6b7280';
    }
  };

  const getQualityText = (quality: string) => {
    switch (quality) {
      case 'high': return '–í—ã—Å–æ–∫–æ–µ';
      case 'medium': return '–°—Ä–µ–¥–Ω–µ–µ';
      case 'low': return '–ù–∏–∑–∫–æ–µ';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  if (loading) {
    return (
      <div className={styles.widget}>
        <div className={styles.loading}>
          <div className={styles.spinner}></div>
          <span>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ª–∏–¥–∞–º...</span>
        </div>
      </div>
    );
  }

  if (error || !data) {
    return (
      <div className={styles.widget}>
        <div className={styles.error}>
          <span>‚ùå {error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'}</span>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.widget}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
      <div className={styles.header}>
        <h3>üéØ –õ–∏–¥—ã –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏</h3>
        <div className={styles.mainMetrics}>
          <div className={styles.mainMetric}>
            <span className={styles.metricValue}>{data.totalLeads}</span>
            <span className={styles.metricLabel}>–í—Å–µ–≥–æ –ª–∏–¥–æ–≤</span>
            <span className={styles.metricGrowth}>
              +{formatPercent(data.leadsGrowth)}
            </span>
          </div>
          <div className={styles.mainMetric}>
            <span className={styles.metricValue}>{formatCurrency(data.totalPipeline)}</span>
            <span className={styles.metricLabel}>–í –≤–æ—Ä–æ–Ω–∫–µ</span>
            <span className={styles.metricGrowth}>
              {data.qualifiedLeads} –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            </span>
          </div>
        </div>
      </div>

      {/* –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ */}
      <div className={styles.keyMetrics}>
        <div className={styles.keyMetric}>
          <span className={styles.keyIcon}>üìä</span>
          <div className={styles.keyContent}>
            <span className={styles.keyValue}>{formatPercent(data.conversionRate)}</span>
            <span className={styles.keyLabel}>–ö–æ–Ω–≤–µ—Ä—Å–∏—è</span>
          </div>
        </div>
        <div className={styles.keyMetric}>
          <span className={styles.keyIcon}>üí∞</span>
          <div className={styles.keyContent}>
            <span className={styles.keyValue}>{formatCurrency(data.avgDealValue)}</span>
            <span className={styles.keyLabel}>–°—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞</span>
          </div>
        </div>
      </div>

      {/* –í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–π */}
      <div className={styles.conversionFunnel}>
        <h4>–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂</h4>
        <div className={styles.funnelStages}>
          {data.conversionFunnel.map((stage, index) => (
            <div key={index} className={styles.funnelStage}>
              <div className={styles.stageInfo}>
                <span className={styles.stageName}>{stage.stage}</span>
                <span className={styles.stageCount}>{stage.count}</span>
              </div>
              <div className={styles.stageBar}>
                <div 
                  className={styles.stageProgress}
                  style={{ width: `${stage.percentage}%` }}
                ></div>
              </div>
              <div className={styles.stageStats}>
                <span className={styles.stagePercentage}>{formatPercent(stage.percentage)}</span>
                {index > 0 && (
                  <span className={styles.stageConversion}>
                    ‚Üó {formatPercent(stage.conversion)}
                  </span>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ª–∏–¥–æ–≤ */}
      <div className={styles.leadSources}>
        <h4>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ª–∏–¥–æ–≤</h4>
        <div className={styles.sourcesList}>
          {data.leadSources.slice(0, 3).map((source, index) => (
            <div key={index} className={styles.sourceItem}>
              <div className={styles.sourceInfo}>
                <span className={styles.sourceName}>{source.source}</span>
                <span 
                  className={styles.sourceQuality}
                  style={{ color: getQualityColor(source.quality) }}
                >
                  {getQualityText(source.quality)} –∫–∞—á–µ—Å—Ç–≤–æ
                </span>
              </div>
              <div className={styles.sourceMetrics}>
                <span className={styles.sourceCount}>{source.count} –ª–∏–¥–æ–≤</span>
                <span className={styles.sourceConversion}>{formatPercent(source.conversion)}</span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –¢–æ–ø —Å–¥–µ–ª–∫–∏ */}
      <div className={styles.topDeals}>
        <h4>üèÜ –ö—Ä—É–ø–Ω—ã–µ —Å–¥–µ–ª–∫–∏</h4>
        <div className={styles.dealsList}>
          {data.topDeals.slice(0, 2).map((deal) => (
            <div key={deal.id} className={styles.dealItem}>
              <div className={styles.dealHeader}>
                <div className={styles.dealInfo}>
                  <span className={styles.dealName}>{deal.name}</span>
                  <span 
                    className={styles.dealStatus}
                    style={{ color: getStatusColor(deal.status) }}
                  >
                    {getStatusText(deal.status)}
                  </span>
                </div>
                <div className={styles.dealValue}>
                  <span className={styles.dealAmount}>{formatCurrency(deal.value)}</span>
                  <span className={styles.dealProbability}>{deal.probability}%</span>
                </div>
              </div>
              <div className={styles.dealDetails}>
                <span className={styles.dealSource}>{deal.source}</span>
                <span className={styles.dealActivity}>{deal.lastActivity}</span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –°—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ */}
      <div className={styles.urgentTasks}>
        <h4>‚ö° –°—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏</h4>
        <div className={styles.tasksList}>
          {data.urgentFollowUps.slice(0, 3).map((task) => (
            <div key={task.id} className={styles.taskItem}>
              <div className={styles.taskInfo}>
                <span className={styles.taskName}>{task.name}</span>
                <span className={styles.taskAction}>
                  {task.status === 'contacted' ? '–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–≤–æ–Ω–æ–∫' :
                   task.status === 'qualified' ? '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' :
                   task.status === 'proposal' ? '–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —É—Å–ª–æ–≤–∏—è' : '–°–≤—è–∑–∞—Ç—å—Å—è'}
                </span>
              </div>
              <div className={styles.taskMeta}>
                <span className={styles.taskValue}>{formatCurrency(task.value)}</span>
                <span className={styles.taskTime}>{task.lastActivity}</span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      <div className={styles.recommendations}>
        <h4>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>
        <div className={styles.recommendationsList}>
          <div className={styles.recommendation}>
            <span className={styles.recIcon}>üéØ</span>
            <span>–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç –∏ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–º –ø–æ–∏—Å–∫–µ - –ª—É—á—à–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è</span>
          </div>
          <div className={styles.recommendation}>
            <span className={styles.recIcon}>üìû</span>
            <span>–£ –≤–∞—Å 3 –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–∞ —Ç—Ä–µ–±—É—é—Ç —Å—Ä–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞</span>
          </div>
        </div>
      </div>
    </div>
  );
}