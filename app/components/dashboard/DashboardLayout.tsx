'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import type { DashboardFilters as DashboardFiltersType, UserRole, WidgetConfig } from '@/types/dashboard';
import styles from './DashboardLayout.module.css';

// –ò–º–ø–æ—Ä—Ç –≤–∏–¥–∂–µ—Ç–æ–≤
import SLOWidget from './widgets/SLOWidget';
import TrafficWidget from './widgets/TrafficWidget';
import ErrorsWidget from './widgets/ErrorsWidget';
import SystemWidget from './widgets/SystemWidget';
import BusinessMetricsWidget from './widgets/BusinessMetricsWidget';
import YandexMetrikaWidget from './widgets/YandexMetrikaWidget';
import GoogleAnalyticsWidget from './widgets/GoogleAnalyticsWidget';
import SiteHealthWidget from './widgets/SiteHealthWidget';
import SocialMediaWidget from './widgets/SocialMediaWidget';
import EmailMarketingWidget from './widgets/EmailMarketingWidget';
import LeadsWidget from './widgets/LeadsWidget';
import SEOWidget from './widgets/SEOWidget';
import DashboardFilters from './DashboardFilters';

interface DashboardLayoutProps {
  userRole: UserRole;
  initialFilters?: Partial<DashboardFiltersType>;
}

export default function DashboardLayout({ 
  userRole, 
  initialFilters 
}: DashboardLayoutProps) {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [filters, setFilters] = useState<DashboardFiltersType>({
    timeRange: {
      from: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
      to: new Date().toISOString()
    },
    env: 'prod',
    refreshInterval: 15000,
    liveMode: true,
    ...initialFilters
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤
  const [widgets, setWidgets] = useState<WidgetConfig[]>([
    {
      id: 'business-overview',
      type: 'business',
      title: '–û–±–∑–æ—Ä –±–∏–∑–Ω–µ—Å–∞',
      description: '–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
      size: 'large',
      position: { x: 0, y: 0 },
      refreshInterval: 15000,
      visible: true,
      pinned: true
    },
    {
      id: 'site-health',
      type: 'site-health',
      title: '–ó–¥–æ—Ä–æ–≤—å–µ —Å–∞–π—Ç–∞',
      description: '–ê–ø—Ç–∞–π–º, —Å–∫–æ—Ä–æ—Å—Ç—å, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      size: 'large',
      position: { x: 0, y: 1 },
      refreshInterval: 15000,
      visible: true
    },
    {
      id: 'yandex-metrika',
      type: 'yandex',
      title: '–Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞',
      description: '–ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
      size: 'medium',
      position: { x: 0, y: 2 },
      refreshInterval: 30000,
      visible: true
    },
    {
      id: 'google-analytics',
      type: 'google',
      title: 'Google Analytics',
      description: '–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö —Ç—Ä–∞—Ñ–∏–∫–∞',
      size: 'medium',
      position: { x: 1, y: 2 },
      refreshInterval: 30000,
      visible: true
    },
    {
      id: 'leads-conversion',
      type: 'leads',
      title: '–õ–∏–¥—ã –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏',
      description: '–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂ –∏ —Ä–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
      size: 'large',
      position: { x: 0, y: 3 },
      refreshInterval: 60000,
      visible: true
    },
    {
      id: 'seo-monitoring',
      type: 'seo',
      title: 'SEO –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
      description: '–ü–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ–∏—Å–∫–µ –∏ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫',
      size: 'medium',
      position: { x: 0, y: 4 },
      refreshInterval: 120000,
      visible: true
    },
    {
      id: 'social-media',
      type: 'social',
      title: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏',
      description: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö',
      size: 'medium',
      position: { x: 1, y: 4 },
      refreshInterval: 60000,
      visible: true
    },
    {
      id: 'email-marketing',
      type: 'email',
      title: 'Email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥',
      description: '–ö–∞–º–ø–∞–Ω–∏–∏, –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫',
      size: 'large',
      position: { x: 0, y: 5 },
      refreshInterval: 60000,
      visible: true
    }
  ]);

  // –ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
  const [activeTab, setActiveTab] = useState<string>('overview');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const [connectionStatus, setConnectionStatus] = useState<'connected' | 'connecting' | 'disconnected'>('connecting');

  // Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  useEffect(() => {
    if (!filters.liveMode) return;

    const interval = setInterval(() => {
      // –¢—Ä–∏–≥–≥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤
      setWidgets(prev => prev.map(w => ({ ...w })));
    }, filters.refreshInterval);

    setConnectionStatus('connected');

    return () => {
      clearInterval(interval);
      setConnectionStatus('disconnected');
    };
  }, [filters.liveMode, filters.refreshInterval]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleFiltersChange = useCallback((newFilters: Partial<DashboardFiltersType>) => {
    setFilters(prev => ({ ...prev, ...newFilters }));
  }, []);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
  const toggleWidget = useCallback((widgetId: string) => {
    setWidgets(prev => prev.map(w => 
      w.id === widgetId ? { ...w, visible: !w.visible } : w
    ));
  }, []);

  // –†–µ–Ω–¥–µ—Ä –≤–∏–¥–∂–µ—Ç–∞
  const renderWidget = (widget: WidgetConfig) => {
    if (!widget.visible) return null;

    const commonProps = {
      key: widget.id,
      filters,
      userRole,
      refreshInterval: widget.refreshInterval
    };

    switch (widget.type) {
      case 'business':
        return <BusinessMetricsWidget {...commonProps} />;
      case 'site-health':
        return <SiteHealthWidget {...commonProps} />;
      case 'yandex':
        return <YandexMetrikaWidget {...commonProps} />;
      case 'google':
        return <GoogleAnalyticsWidget {...commonProps} />;
      case 'leads':
        return <LeadsWidget {...commonProps} />;
      case 'seo':
        return <SEOWidget {...commonProps} />;
      case 'social':
        return <SocialMediaWidget {...commonProps} />;
      case 'email':
        return <EmailMarketingWidget {...commonProps} />;
      case 'slo':
        return <SLOWidget {...commonProps} />;
      case 'traffic':
        return <TrafficWidget {...commonProps} />;
      case 'errors':
        return <ErrorsWidget {...commonProps} />;
      case 'system':
        return <SystemWidget {...commonProps} />;
      default:
        return null;
    }
  };

  const tabs = [
    { id: 'overview', label: '–û–±–∑–æ—Ä', icon: 'üìä' }
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    // { id: 'analytics', label: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', icon: 'üìà', comingSoon: true },
    // { id: 'customers', label: '–ö–ª–∏–µ–Ω—Ç—ã', icon: 'üë•', comingSoon: true },
    // { id: 'sales', label: '–ü—Ä–æ–¥–∞–∂–∏', icon: 'üí∞', comingSoon: true }
  ];

  return (
    <div className={styles.dashboardLayout}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <header className={styles.header}>
        <div className={styles.titleSection}>
          <h1 className={styles.title}>
            <span className={styles.icon}>üìä</span>
            –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          </h1>
          <div className={styles.statusBar}>
            <div className={`${styles.connectionStatus} ${styles[connectionStatus]}`}>
              <span className={styles.statusDot}></span>
              {connectionStatus === 'connected' && '–í —Å–µ—Ç–∏'}
              {connectionStatus === 'connecting' && '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...'}
              {connectionStatus === 'disconnected' && '–û—Ñ–ª–∞–π–Ω'}
            </div>
            <div className={styles.userRole}>
              –†–æ–ª—å: <span className={styles.roleTag}>{userRole}</span>
            </div>
          </div>
        </div>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º */}
        <nav className={styles.tabsNavigation}>
          {tabs.map(tab => (
            <button
              key={tab.id}
              className={`${styles.tab} ${activeTab === tab.id ? styles.activeTab : ''}`}
              onClick={() => setActiveTab(tab.id)}
            >
              <span className={styles.tabIcon}>{tab.icon}</span>
              <span className={styles.tabLabel}>{tab.label}</span>
            </button>
          ))}
        </nav>
      </header>

      {/* –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
      <div className={styles.filtersPanel}>
        <DashboardFilters
          filters={filters}
          onFiltersChange={handleFiltersChange}
          userRole={userRole}
        />
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –¥–∞—à–±–æ—Ä–¥–∞ */}
      <main className={styles.dashboardContent}>
        <AnimatePresence mode="wait">
          {activeTab === 'overview' && (
            <motion.div
              key="overview"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
              className={styles.widgetsGrid}
            >
              {widgets.map(widget => (
                <div
                  key={widget.id}
                  className={`${styles.widgetContainer} ${styles[widget.size]}`}
                  style={{
                    gridColumn: widget.position.x + 1,
                    gridRow: widget.position.y + 1
                  }}
                >
                  <div className={styles.widgetHeader}>
                    <div className={styles.widgetTitleSection}>
                      <h3 className={styles.widgetTitle}>{widget.title}</h3>
                      {widget.description && (
                        <p className={styles.widgetDescription}>{widget.description}</p>
                      )}
                    </div>
                    <div className={styles.widgetControls}>
                      {widget.pinned && (
                        <span className={styles.pinnedIcon} title="–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ">üìå</span>
                      )}
                      <button
                        className={styles.toggleButton}
                        onClick={() => toggleWidget(widget.id)}
                        title={widget.visible ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'}
                      >
                        {widget.visible ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                      </button>
                    </div>
                  </div>
                  {renderWidget(widget)}
                </div>
              ))}
            </motion.div>
          )}

          {activeTab !== 'overview' && (
            <motion.div
              key={activeTab}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
              className={styles.tabContent}
            >
              <div className={styles.comingSoon}>
                <h2>üöß {tabs.find(t => t.id === activeTab)?.label}</h2>
                <p>–í–∫–ª–∞–¥–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!</p>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </main>

      {/* –§—É—Ç–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
      <footer className={styles.footer}>
        <div className={styles.footerStats}>
          <span>–í–∏–¥–∂–µ—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ: {widgets.filter(w => w.visible).length}</span>
          <span>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {(filters.refreshInterval || 15000) / 1000}—Å</span>
          <span>–û–∫—Ä—É–∂–µ–Ω–∏–µ: {filters.env}</span>
        </div>
      </footer>
    </div>
  );
}