'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import NeonButton from './NeonButton';
import FuturisticCard from './FuturisticCard';
import AILoader from './AILoader';
import { analytics } from '../utils/analytics';
import styles from './AdvancedROICalculator.module.css';

interface CalculatorInputs {
  companySize: 'small' | 'medium' | 'large' | 'enterprise';
  industry: string;
  currentRevenue: number;
  currentCosts: number;
  employeeCount: number;
  digitalMaturity: number; // 1-10
  timeframe: number; // –º–µ—Å—è—Ü—ã
  investmentAmount: number;
}

interface ROIProjection {
  month: number;
  revenue: number;
  costs: number;
  roi: number;
  probability: number;
}

interface SimulationResult {
  bestCase: {
    roi: number;
    payback: number;
    savings: number;
  };
  worstCase: {
    roi: number;
    payback: number;
    savings: number;
  };
  mostLikely: {
    roi: number;
    payback: number;
    savings: number;
    confidence: number;
  };
  projections: ROIProjection[];
  breakEvenMonth: number;
  riskFactors: string[];
}

export default function AdvancedROICalculator() {
  const [inputs, setInputs] = useState<CalculatorInputs>({
    companySize: 'medium',
    industry: 'retail',
    currentRevenue: 10000000,
    currentCosts: 7000000,
    employeeCount: 50,
    digitalMaturity: 5,
    timeframe: 12,
    investmentAmount: 0
  });

  const [isCalculating, setIsCalculating] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const [results, setResults] = useState<SimulationResult | null>(null);
  const [activeTab, setActiveTab] = useState<'inputs' | 'results' | 'report'>('inputs');

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
  useEffect(() => {
    const baseInvestment = {
      small: 500000,
      medium: 1500000,
      large: 3000000,
      enterprise: 5000000
    };

    const industryMultiplier = {
      retail: 1.2,
      finance: 1.5,
      manufacturing: 1.3,
      services: 1.1,
      tech: 1.4,
      healthcare: 1.6
    };

    const maturityDiscount = (10 - inputs.digitalMaturity) * 0.05;
    const base = baseInvestment[inputs.companySize];
    const multiplier = industryMultiplier[inputs.industry as keyof typeof industryMultiplier] || 1;
    
    const suggestedInvestment = Math.round(base * multiplier * (1 - maturityDiscount));
    
    setInputs(prev => ({ ...prev, investmentAmount: suggestedInvestment }));
  }, [inputs.companySize, inputs.industry, inputs.digitalMaturity]);

  // Monte Carlo —Å–∏–º—É–ª—è—Ü–∏—è
  const runMonteCarloSimulation = async (): Promise<SimulationResult> => {
    const simulations = 10000;
    const results: ROIProjection[][] = [];

    for (let i = 0; i < simulations; i++) {
      const projections: ROIProjection[] = [];
      let currentRevenue = inputs.currentRevenue;
      let currentCosts = inputs.currentCosts;

      for (let month = 1; month <= inputs.timeframe; month++) {
        // –§–∞–∫—Ç–æ—Ä—ã —Ä–æ—Å—Ç–∞ —Å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π
        const revenueGrowth = 0.02 + Math.random() * 0.06; // 2-8% –≤ –º–µ—Å—è—Ü
        const costReduction = 0.01 + Math.random() * 0.04; // 1-5% –≤ –º–µ—Å—è—Ü
        const efficiency = 1 + (inputs.digitalMaturity / 10) * 0.5;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        currentRevenue *= (1 + revenueGrowth * efficiency);
        currentCosts *= (1 - costReduction * efficiency);

        const monthlyROI = ((currentRevenue - currentCosts - inputs.investmentAmount / inputs.timeframe) / 
                           (inputs.investmentAmount / inputs.timeframe)) * 100;

        projections.push({
          month,
          revenue: currentRevenue,
          costs: currentCosts,
          roi: monthlyROI,
          probability: 0.5 + (Math.random() - 0.5) * 0.3
        });
      }

      results.push(projections);
    }

    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const finalROIs = results.map(r => r[r.length - 1].roi);
    finalROIs.sort((a, b) => a - b);

    const bestCase = finalROIs[Math.floor(finalROIs.length * 0.95)];
    const worstCase = finalROIs[Math.floor(finalROIs.length * 0.05)];
    const mostLikely = finalROIs[Math.floor(finalROIs.length * 0.5)];

    // –†–∞—Å—á–µ—Ç —Ç–æ—á–∫–∏ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏
    const breakEvenMonths = results.map(projections => {
      const breakEvenIndex = projections.findIndex(p => p.roi > 0);
      return breakEvenIndex === -1 ? inputs.timeframe : breakEvenIndex + 1;
    });
    const avgBreakEven = Math.round(breakEvenMonths.reduce((a, b) => a + b) / breakEvenMonths.length);

    // –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
    const riskFactors = [];
    if (inputs.digitalMaturity < 3) riskFactors.push('–ù–∏–∑–∫–∞—è —Ü–∏—Ñ—Ä–æ–≤–∞—è –∑—Ä–µ–ª–æ—Å—Ç—å');
    if (inputs.employeeCount < 20) riskFactors.push('–ú–∞–ª—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã');
    if (inputs.currentRevenue < 5000000) riskFactors.push('–ù–∏–∑–∫–∏–π —Ç–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥');
    if (avgBreakEven > 6) riskFactors.push('–î–æ–ª–≥–∏–π –ø–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏');

    return {
      bestCase: {
        roi: Math.round(bestCase),
        payback: Math.round(avgBreakEven * 0.8),
        savings: Math.round(inputs.currentCosts * 0.35)
      },
      worstCase: {
        roi: Math.round(worstCase),
        payback: Math.round(avgBreakEven * 1.5),
        savings: Math.round(inputs.currentCosts * 0.15)
      },
      mostLikely: {
        roi: Math.round(mostLikely),
        payback: avgBreakEven,
        savings: Math.round(inputs.currentCosts * 0.25),
        confidence: 85
      },
      projections: results[Math.floor(simulations / 2)], // –ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      breakEvenMonth: avgBreakEven,
      riskFactors
    };
  };

  const handleCalculate = async () => {
    setIsCalculating(true);
    const startTime = Date.now();

    try {
      // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const simulationResults = await runMonteCarloSimulation();
      setResults(simulationResults);
      setShowResults(true);
      setActiveTab('results');

      // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
      analytics.trackROICalculation(inputs as any, {
        percentage: simulationResults.mostLikely.roi,
        savingsAmount: simulationResults.mostLikely.savings,
        paybackMonths: simulationResults.mostLikely.payback,
        confidence: simulationResults.mostLikely.confidence
      });

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (simulationResults.mostLikely.roi > 200) {
        await fetch('/api/telegram', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            message: `üéØ –í—ã—Å–æ–∫–∏–π ROI —Ä–∞—Å—Å—á–∏—Ç–∞–Ω!\n\n–ö–æ–º–ø–∞–Ω–∏—è: ${inputs.companySize}\n–û—Ç—Ä–∞—Å–ª—å: ${inputs.industry}\n–ü—Ä–æ–≥–Ω–æ–∑ ROI: ${simulationResults.mostLikely.roi}%\n–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: ${simulationResults.mostLikely.payback} –º–µ—Å.`
          })
        });
      }

    } catch (error) {
      console.error('Calculation error:', error);
      analytics.trackError(error as Error, 'roi_calculation');
    } finally {
      setIsCalculating(false);
    }
  };

  const generatePDFReport = async () => {
    if (!results) return;

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞
    const reportData = {
      company: inputs,
      results: results,
      generatedAt: new Date().toISOString(),
      recommendations: [
        '–ù–∞—á–∞—Ç—å —Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
        '–í–Ω–µ–¥—Ä–∏—Ç—å AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
        '–û–±—É—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–æ–≤—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º',
        '–°–æ–∑–¥–∞—Ç—å —Ü–µ–Ω—Ç—Ä —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π'
      ]
    };

    console.log('Generating PDF report:', reportData);
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PDF –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π
  };

  const formatCurrency = (value: number): string => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      maximumFractionDigits: 0
    }).format(value);
  };

  return (
    <div className={styles.calculator}>
      <motion.div
        className={styles.header}
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        <h2 className={styles.title}>
          <span className={styles.titleIcon}>üíé</span>
          ROI Calculator Pro
        </h2>
        <p className={styles.subtitle}>
          Monte Carlo —Å–∏–º—É–ª—è—Ü–∏—è —Å 10,000 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
        </p>
      </motion.div>

      {/* –¢–∞–±—ã */}
      <div className={styles.tabs}>
        {(['inputs', 'results', 'report'] as const).map((tab) => (
          <button
            key={tab}
            className={`${styles.tab} ${activeTab === tab ? styles.active : ''}`}
            onClick={() => setActiveTab(tab)}
            disabled={tab === 'results' && !results}
          >
            {tab === 'inputs' && 'üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã'}
            {tab === 'results' && 'üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã'}
            {tab === 'report' && 'üìÑ –û—Ç—á–µ—Ç'}
          </button>
        ))}
      </div>

      <AnimatePresence mode="wait">
        {/* –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ */}
        {activeTab === 'inputs' && (
          <motion.div
            key="inputs"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: 20 }}
            className={styles.content}
          >
            <div className={styles.inputGrid}>
              <FuturisticCard variant="glass">
                <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</h3>
                
                <div className={styles.field}>
                  <label>–†–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏</label>
                  <select
                    value={inputs.companySize}
                    onChange={(e) => setInputs(prev => ({ 
                      ...prev, 
                      companySize: e.target.value as CalculatorInputs['companySize']
                    }))}
                    className={styles.select}
                  >
                    <option value="small">–ú–∞–ª—ã–π (–¥–æ 50 —Å–æ—Ç—Ä.)</option>
                    <option value="medium">–°—Ä–µ–¥–Ω–∏–π (50-250 —Å–æ—Ç—Ä.)</option>
                    <option value="large">–ö—Ä—É–ø–Ω—ã–π (250-1000 —Å–æ—Ç—Ä.)</option>
                    <option value="enterprise">–ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è (1000+ —Å–æ—Ç—Ä.)</option>
                  </select>
                </div>

                <div className={styles.field}>
                  <label>–û—Ç—Ä–∞—Å–ª—å</label>
                  <select
                    value={inputs.industry}
                    onChange={(e) => setInputs(prev => ({ ...prev, industry: e.target.value }))}
                    className={styles.select}
                  >
                    <option value="retail">–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è</option>
                    <option value="finance">–§–∏–Ω–∞–Ω—Å—ã –∏ –±–∞–Ω–∫–∏–Ω–≥</option>
                    <option value="manufacturing">–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ</option>
                    <option value="services">–£—Å–ª—É–≥–∏</option>
                    <option value="tech">IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</option>
                    <option value="healthcare">–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ</option>
                  </select>
                </div>

                <div className={styles.field}>
                  <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</label>
                  <input
                    type="number"
                    value={inputs.employeeCount}
                    onChange={(e) => setInputs(prev => ({ 
                      ...prev, 
                      employeeCount: parseInt(e.target.value) || 0 
                    }))}
                    className={styles.input}
                  />
                </div>
              </FuturisticCard>

              <FuturisticCard variant="glass">
                <h3>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</h3>
                
                <div className={styles.field}>
                  <label>–¢–µ–∫—É—â–∞—è –≤—ã—Ä—É—á–∫–∞ (–≥–æ–¥)</label>
                  <input
                    type="number"
                    value={inputs.currentRevenue}
                    onChange={(e) => setInputs(prev => ({ 
                      ...prev, 
                      currentRevenue: parseInt(e.target.value) || 0 
                    }))}
                    className={styles.input}
                  />
                  <span className={styles.hint}>{formatCurrency(inputs.currentRevenue)}</span>
                </div>

                <div className={styles.field}>
                  <label>–¢–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã (–≥–æ–¥)</label>
                  <input
                    type="number"
                    value={inputs.currentCosts}
                    onChange={(e) => setInputs(prev => ({ 
                      ...prev, 
                      currentCosts: parseInt(e.target.value) || 0 
                    }))}
                    className={styles.input}
                  />
                  <span className={styles.hint}>{formatCurrency(inputs.currentCosts)}</span>
                </div>

                <div className={styles.field}>
                  <label>–¶–∏—Ñ—Ä–æ–≤–∞—è –∑—Ä–µ–ª–æ—Å—Ç—å (1-10)</label>
                  <input
                    type="range"
                    min="1"
                    max="10"
                    value={inputs.digitalMaturity}
                    onChange={(e) => setInputs(prev => ({ 
                      ...prev, 
                      digitalMaturity: parseInt(e.target.value) 
                    }))}
                    className={styles.slider}
                  />
                  <span className={styles.sliderValue}>{inputs.digitalMaturity}</span>
                </div>
              </FuturisticCard>

              <FuturisticCard variant="glass">
                <h3>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</h3>
                
                <div className={styles.field}>
                  <label>–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–º–µ—Å—è—Ü—ã)</label>
                  <input
                    type="number"
                    min="6"
                    max="36"
                    value={inputs.timeframe}
                    onChange={(e) => setInputs(prev => ({ 
                      ...prev, 
                      timeframe: parseInt(e.target.value) || 12 
                    }))}
                    className={styles.input}
                  />
                </div>

                <div className={styles.field}>
                  <label>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</label>
                  <div className={styles.investmentAmount}>
                    {formatCurrency(inputs.investmentAmount)}
                  </div>
                  <span className={styles.hint}>
                    –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                  </span>
                </div>

                <div className={styles.investmentBreakdown}>
                  <h4>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:</h4>
                  <div className={styles.breakdownItem}>
                    <span>AI –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</span>
                    <span>{formatCurrency(inputs.investmentAmount * 0.4)}</span>
                  </div>
                  <div className={styles.breakdownItem}>
                    <span>–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞</span>
                    <span>{formatCurrency(inputs.investmentAmount * 0.3)}</span>
                  </div>
                  <div className={styles.breakdownItem}>
                    <span>–û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞</span>
                    <span>{formatCurrency(inputs.investmentAmount * 0.2)}</span>
                  </div>
                  <div className={styles.breakdownItem}>
                    <span>–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥</span>
                    <span>{formatCurrency(inputs.investmentAmount * 0.1)}</span>
                  </div>
                </div>
              </FuturisticCard>
            </div>

            <motion.div className={styles.calculateButton}>
              <NeonButton
                variant="primary"
                size="large"
                onClick={handleCalculate}
                disabled={isCalculating}
                pulse
              >
                {isCalculating ? (
                  <>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–º—É–ª—è—Ü–∏—è...</>
                ) : (
                  <>üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å ROI</>
                )}
              </NeonButton>
            </motion.div>
          </motion.div>
        )}

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
        {activeTab === 'results' && results && (
          <motion.div
            key="results"
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
            className={styles.results}
          >
            <div className={styles.scenariosGrid}>
              <FuturisticCard variant="holographic" glowColor="green">
                <h3>üìà –õ—É—á—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π</h3>
                <div className={styles.scenario}>
                  <div className={styles.metricLarge}>
                    <span className={styles.metricValue}>{results.bestCase.roi}%</span>
                    <span className={styles.metricLabel}>ROI</span>
                  </div>
                  <div className={styles.metricSmall}>
                    <span>–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: {results.bestCase.payback} –º–µ—Å.</span>
                    <span>–≠–∫–æ–Ω–æ–º–∏—è: {formatCurrency(results.bestCase.savings)}</span>
                  </div>
                </div>
              </FuturisticCard>

              <FuturisticCard variant="neon" glowColor="blue">
                <h3>üéØ –í–µ—Ä–æ—è—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π</h3>
                <div className={styles.scenario}>
                  <div className={styles.metricLarge}>
                    <span className={styles.metricValue}>{results.mostLikely.roi}%</span>
                    <span className={styles.metricLabel}>ROI</span>
                  </div>
                  <div className={styles.metricSmall}>
                    <span>–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: {results.mostLikely.payback} –º–µ—Å.</span>
                    <span>–≠–∫–æ–Ω–æ–º–∏—è: {formatCurrency(results.mostLikely.savings)}</span>
                  </div>
                  <div className={styles.confidence}>
                    –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {results.mostLikely.confidence}%
                  </div>
                </div>
              </FuturisticCard>

              <FuturisticCard variant="glass" glowColor="pink">
                <h3>üìâ –•—É–¥—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π</h3>
                <div className={styles.scenario}>
                  <div className={styles.metricLarge}>
                    <span className={styles.metricValue}>{results.worstCase.roi}%</span>
                    <span className={styles.metricLabel}>ROI</span>
                  </div>
                  <div className={styles.metricSmall}>
                    <span>–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: {results.worstCase.payback} –º–µ—Å.</span>
                    <span>–≠–∫–æ–Ω–æ–º–∏—è: {formatCurrency(results.worstCase.savings)}</span>
                  </div>
                </div>
              </FuturisticCard>
            </div>

            {/* –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–µ–∫—Ü–∏–π */}
            <FuturisticCard variant="glass">
              <h3>–î–∏–Ω–∞–º–∏–∫–∞ ROI –ø–æ –º–µ—Å—è—Ü–∞–º</h3>
              <div className={styles.chart}>
                <div className={styles.chartBars}>
                  {results.projections.map((projection, index) => (
                    <div
                      key={index}
                      className={styles.chartBar}
                      style={{
                        height: `${Math.max(10, Math.min(90, (projection.roi + 100) / 4))}%`,
                        background: projection.roi > 0 
                          ? 'var(--gradient-accent)' 
                          : 'var(--gradient-danger)'
                      }}
                      title={`–ú–µ—Å—è—Ü ${projection.month}: ${projection.roi.toFixed(1)}% ROI`}
                    >
                      <span className={styles.chartLabel}>{projection.month}</span>
                    </div>
                  ))}
                </div>
                <div className={styles.chartAxis}>
                  <span>–¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏: {results.breakEvenMonth} –º–µ—Å—è—Ü</span>
                </div>
              </div>
            </FuturisticCard>

            {/* –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞ */}
            {results.riskFactors.length > 0 && (
              <FuturisticCard variant="glass">
                <h3>‚ö†Ô∏è –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞</h3>
                <div className={styles.riskFactors}>
                  {results.riskFactors.map((risk, index) => (
                    <div key={index} className={styles.riskItem}>
                      <span className={styles.riskIcon}>‚ö°</span>
                      <span>{risk}</span>
                    </div>
                  ))}
                </div>
              </FuturisticCard>
            )}

            <div className={styles.actions}>
              <NeonButton
                variant="secondary"
                size="large"
                onClick={() => setActiveTab('report')}
              >
                üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
              </NeonButton>
              <NeonButton
                variant="accent"
                size="large"
                onClick={generatePDFReport}
              >
                üì• –°–∫–∞—á–∞—Ç—å PDF
              </NeonButton>
            </div>
          </motion.div>
        )}

        {/* –û—Ç—á–µ—Ç */}
        {activeTab === 'report' && results && (
          <motion.div
            key="report"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className={styles.report}
          >
            <FuturisticCard variant="glass">
              <h3>üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ ROI</h3>
              
              <div className={styles.reportSection}>
                <h4>–†–µ–∑—é–º–µ</h4>
                <p>
                  –ù–∞ –æ—Å–Ω–æ–≤–µ Monte Carlo —Å–∏–º—É–ª—è—Ü–∏–∏ —Å 10,000 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π ROI 
                  –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç <strong>{results.mostLikely.roi}%</strong> —Å 
                  –ø–µ—Ä–∏–æ–¥–æ–º –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ <strong>{results.mostLikely.payback} –º–µ—Å—è—Ü–µ–≤</strong>.
                </p>
              </div>

              <div className={styles.reportSection}>
                <h4>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>
                <ul className={styles.recommendations}>
                  <li>
                    <span className={styles.recIcon}>üéØ</span>
                    <div>
                      <strong>–ù–∞—á–Ω–∏—Ç–µ —Å –ø–∏–ª–æ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞</strong>
                      <p>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI-—Ä–µ—à–µ–Ω–∏–π</p>
                    </div>
                  </li>
                  <li>
                    <span className={styles.recIcon}>üìà</span>
                    <div>
                      <strong>–§–æ–∫—É—Å –Ω–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–±–µ–¥–∞—Ö</strong>
                      <p>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ —Ä—É—Ç–∏–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ ROI</p>
                    </div>
                  </li>
                  <li>
                    <span className={styles.recIcon}>üéì</span>
                    <div>
                      <strong>–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –æ–±—É—á–µ–Ω–∏–µ</strong>
                      <p>–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –∫ —Ä–∞–±–æ—Ç–µ —Å –Ω–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏</p>
                    </div>
                  </li>
                  <li>
                    <span className={styles.recIcon}>üìä</span>
                    <div>
                      <strong>–ò–∑–º–µ—Ä—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</strong>
                      <p>–í–Ω–µ–¥—Ä–∏—Ç–µ KPI –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</p>
                    </div>
                  </li>
                </ul>
              </div>

              <div className={styles.reportSection}>
                <h4>–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π</h4>
                <div className={styles.timeline}>
                  <div className={styles.timelineItem}>
                    <span className={styles.timelineMonth}>1-3 –º–µ—Å</span>
                    <div className={styles.timelineContent}>
                      <strong>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞</strong>
                      <p>–ê—É–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –≤—ã–±–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</p>
                    </div>
                  </div>
                  <div className={styles.timelineItem}>
                    <span className={styles.timelineMonth}>4-6 –º–µ—Å</span>
                    <div className={styles.timelineContent}>
                      <strong>–í–Ω–µ–¥—Ä–µ–Ω–∏–µ</strong>
                      <p>–ó–∞–ø—É—Å–∫ –ø–∏–ª–æ—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</p>
                    </div>
                  </div>
                  <div className={styles.timelineItem}>
                    <span className={styles.timelineMonth}>7-9 –º–µ—Å</span>
                    <div className={styles.timelineContent}>
                      <strong>–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ</strong>
                      <p>–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–∏–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã</p>
                    </div>
                  </div>
                  <div className={styles.timelineItem}>
                    <span className={styles.timelineMonth}>10-12 –º–µ—Å</span>
                    <div className={styles.timelineContent}>
                      <strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</strong>
                      <p>–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π ROI</p>
                    </div>
                  </div>
                </div>
              </div>

              <div className={styles.ctaSection}>
                <h4>–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é?</h4>
                <p>–ù–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã –ø–æ–º–æ–≥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–ª–∞–Ω –∏ –¥–æ—Å—Ç–∏—á—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</p>
                <NeonButton variant="primary" size="large" pulse>
                  –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
                </NeonButton>
              </div>
            </FuturisticCard>
          </motion.div>
        )}
      </AnimatePresence>

      {/* –ó–∞–≥—Ä—É–∑–∫–∞ */}
      <AnimatePresence>
        {isCalculating && (
          <motion.div
            className={styles.loadingOverlay}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            <AILoader
              variant="quantum"
              size="large"
              text="–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è Monte Carlo —Å–∏–º—É–ª—è—Ü–∏—è..."
            />
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}