'use client';

import React, { useState, useEffect } from 'react';

const PerformanceWidget = () => {
  const [performanceData, setPerformanceData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchPerformanceData();
    
    // Update every 30 seconds
    const interval = setInterval(fetchPerformanceData, 30000);
    return () => clearInterval(interval);
  }, []);

  const fetchPerformanceData = async () => {
    try {
      const response = await fetch('/api/analytics/performance?timeframe=1h&limit=50');
      if (!response.ok) throw new Error('Failed to fetch performance data');
      
      const data = await response.json();
      setPerformanceData(data);
      setError(null);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const getRatingColor = (rating) => {
    switch (rating) {
      case 'good': return '#22c55e';
      case 'needs-improvement': return '#f59e0b';
      case 'poor': return '#ef4444';
      default: return '#94a3b8';
    }
  };

  const getRatingEmoji = (rating) => {
    switch (rating) {
      case 'good': return 'üü¢';
      case 'needs-improvement': return 'üü°';
      case 'poor': return 'üî¥';
      default: return '‚ö™';
    }
  };

  const formatValue = (metric, value) => {
    if (['LCP', 'FCP', 'FID', 'INP', 'TTFB'].includes(metric)) {
      return `${Math.round(value)}ms`;
    }
    if (metric === 'CLS') {
      return value.toFixed(3);
    }
    return value;
  };

  if (loading) {
    return (
      <div className="performance-widget glass-card loading">
        <div className="widget-header">
          <h4>‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞</h4>
        </div>
        <div className="loading-content">
          <div className="spinner"></div>
          <span>–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="performance-widget glass-card error">
        <div className="widget-header">
          <h4>‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞</h4>
        </div>
        <div className="error-content">
          <span className="error-icon">‚ö†Ô∏è</span>
          <span>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {error}</span>
        </div>
      </div>
    );
  }

  const webVitals = performanceData?.summary?.webVitals || {};
  const hasData = Object.keys(webVitals).length > 0;

  if (!hasData) {
    return (
      <div className="performance-widget glass-card no-data">
        <div className="widget-header">
          <h4>‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞</h4>
          <span className="data-count">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span>
        </div>
        <div className="no-data-content">
          <span className="no-data-icon">üìä</span>
          <div className="no-data-text">
            <p>–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–Ω—ã</p>
            <small>–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç</small>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="performance-widget glass-card">
      <div className="widget-header">
        <div className="header-content">
          <h4>‚ö° –ö–∞–∫ –±—ã—Å—Ç—Ä–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∞–π—Ç</h4>
          <p className="widget-description">–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
        </div>
        <div className="widget-stats">
          <span className="data-count">{performanceData.count} –∏–∑–º–µ—Ä–µ–Ω–∏–π</span>
          <button 
            className="refresh-btn"
            onClick={fetchPerformanceData}
            title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
          >
            üîÑ
          </button>
        </div>
      </div>

      <div className="performance-metrics">
        {Object.entries(webVitals).map(([metric, data]) => (
          <div key={metric} className="metric-card">
            <div className="metric-header">
              <span className="metric-icon">
                {getRatingEmoji(data.rating || 'unknown')}
              </span>
              <div className="metric-info">
                <span className="metric-name">{getMetricName(metric)}</span>
                <span className="metric-description">{getMetricDescription(metric)}</span>
              </div>
            </div>
            
            <div className="metric-value">
              <span className="value">{formatValue(metric, data.average || data.value || 0)}</span>
              <span 
                className="rating"
                style={{ color: getRatingColor(data.rating || 'unknown') }}
              >
                {getRatingText(data.rating)}
              </span>
            </div>

            {data.count && (
              <div className="metric-stats">
                <span className="stat-item">
                  <span className="stat-label">–ú–∏–Ω:</span>
                  <span className="stat-value">{formatValue(metric, data.min)}</span>
                </span>
                <span className="stat-item">
                  <span className="stat-label">–ú–∞–∫—Å:</span>
                  <span className="stat-value">{formatValue(metric, data.max)}</span>
                </span>
              </div>
            )}
          </div>
        ))}
      </div>

      {performanceData.summary?.slowResources?.length > 0 && (
        <div className="slow-resources">
          <h5>üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã</h5>
          <div className="resources-list">
            {performanceData.summary.slowResources.slice(0, 3).map((resource, index) => (
              <div key={index} className="resource-item">
                <span className="resource-name">
                  {resource.resource.split('/').pop() || 'Unknown'}
                </span>
                <span className="resource-duration">{resource.duration}ms</span>
              </div>
            ))}
          </div>
        </div>
      )}

      <div className="performance-tips">
        <h5>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h5>
        <div className="tips-list">
          {getPerformanceTips(webVitals).map((tip, index) => (
            <div key={index} className="tip-item">
              <span className="tip-icon">{tip.icon}</span>
              <span className="tip-text">{tip.text}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// Helper functions
const getMetricName = (metric) => {
  const names = {
    LCP: '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
    FID: '–û—Ç–∫–ª–∏–∫ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è',
    CLS: '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –º–∞–∫–µ—Ç–∞',
    FCP: '–ü–µ—Ä–≤–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞',
    INP: '–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏',
    TTFB: '–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞'
  };
  return names[metric] || metric;
};

const getMetricDescription = (metric) => {
  const descriptions = {
    LCP: '–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç',
    FID: '–ö–∞–∫ –±—ã—Å—Ç—Ä–æ —Å–∞–π—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–ª–∏–∫–∏',
    CLS: '–ù–∞—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–±–∏–ª–µ–Ω –º–∞–∫–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
    FCP: '–ö–æ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
    INP: '–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π',
    TTFB: '–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä'
  };
  return descriptions[metric] || '–ú–µ—Ç—Ä–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏';
};

const getRatingText = (rating) => {
  const texts = {
    good: '–û—Ç–ª–∏—á–Ω–æ',
    'needs-improvement': '–ú–æ–∂–Ω–æ –ª—É—á—à–µ',
    poor: '–ü–ª–æ—Ö–æ',
    unknown: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
  };
  return texts[rating] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
};

const getPerformanceTips = (webVitals) => {
  const tips = [];
  
  Object.entries(webVitals).forEach(([metric, data]) => {
    if (data.rating === 'poor') {
      switch (metric) {
        case 'LCP':
          tips.push({
            icon: 'üñºÔ∏è',
            text: '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ CDN'
          });
          break;
        case 'FID':
          tips.push({
            icon: '‚ö°',
            text: '–£–º–µ–Ω—å—à–∏—Ç–µ JavaScript –∏ —É–ª—É—á—à–∏—Ç–µ –∫–æ–¥'
          });
          break;
        case 'CLS':
          tips.push({
            icon: 'üìê',
            text: '–ó–∞–¥–∞–π—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
          });
          break;
      }
    }
  });

  if (tips.length === 0) {
    tips.push({
      icon: 'üéâ',
      text: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ –Ω–∞ —Ö–æ—Ä–æ—à–µ–º —É—Ä–æ–≤–Ω–µ!'
    });
  }

  return tips.slice(0, 3); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Å–æ–≤–µ—Ç–∞
};

export default PerformanceWidget;