'use client';
import { useState, useEffect, useRef } from 'react';

export default function SmartFloatingAI() {
  const [isOpen, setIsOpen] = useState(false);
  // –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ localStorage -> –¥–∏–∞–ª–æ–≥ –Ω–µ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
  const [messages, setMessages] = useState(() => {
    if (typeof window === 'undefined') return [];
    try {
      return JSON.parse(localStorage.getItem('ai_messages') || '[]');
    } catch {
      return [];
    }
  });
  const [context, setContext] = useState({
    industry: null,
    companySize: null,
    urgency: null,
    previousInteractions: 0,
    userProfile: {},
  });
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [selectedModel, setSelectedModel] = useState('claude'); // 'gemini' –∏–ª–∏ 'claude' - Claude –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [mode, setMode] = useState('chat'); // 'chat', 'calculator', 'demo', 'consultation'
  const [showOnboarding, setShowOnboarding] = useState(() => {
    return !localStorage.getItem('ai_onboarding_completed');
  });
  const messagesEndRef = useRef(null);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    if (messages.length > 0) {
      localStorage.setItem('ai_messages', JSON.stringify(messages));
    }
  }, [messages]);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
  useEffect(() => {
    if (isOpen && messages.length === 0) {
      const welcomeMessage = {
        id: Date.now(),
        text: `–ü—Ä–∏–≤–µ—Ç! üëã –Ø AI-–ø–æ–º–æ—â–Ω–∏–∫ NeuroExpert.
        
–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:
‚Ä¢ üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å ROI –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –Ω–∞—à–∏—Ö —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ üéØ –ü–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞
‚Ä¢ üí° –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
‚Ä¢ üìÖ –ó–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –Ω–∞ –¥–µ–º–æ

–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∂–∏–º–æ–≤ –≤ –º–µ–Ω—é –≤—ã—à–µ!`,
        sender: 'assistant',
        timestamp: new Date(),
        model: 'system',
        interactive: true,
        options: [
          { label: 'üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å ROI', action: 'roi' },
          { label: 'üéØ –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–ª–∞–Ω', action: 'plan' },
          { label: 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–µ–º–æ', action: 'demo' },
        ],
      };
      setMessages([welcomeMessage]);
    }
  }, [isOpen, messages.length]);

  const handleSendMessage = async (e) => {
    e?.preventDefault();
    if (input.trim() === '' || isLoading) return;

    const userMessage = {
      id: Date.now(),
      text: input,
      sender: 'user',
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);
    setIsTyping(true);

    // –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    setTimeout(() => {
      const response = {
        id: Date.now() + 1,
        text: '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.',
        sender: 'assistant',
        timestamp: new Date(),
        model: selectedModel,
      };
      setMessages((prev) => [...prev, response]);
      setIsLoading(false);
      setIsTyping(false);
    }, 2000);
  };

  const handleClearChat = () => {
    setMessages([]);
    localStorage.removeItem('ai_messages');
    setContext({
      industry: null,
      companySize: null,
      urgency: null,
      previousInteractions: 0,
      userProfile: {},
    });
  };

  const handleModeChange = (newMode) => {
    setMode(newMode);
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
    const modeMessages = {
      chat: '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è. –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!',
      calculator: '–û—Ç–∫—Ä—ã—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ROI. –î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –≤–∞—à—É –≤—ã–≥–æ–¥—É!',
      demo: '–†–µ–∂–∏–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é?',
      consultation: '–†–µ–∂–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ, –∏ —è –ø–æ–¥–±–µ—Ä—É —Ä–µ—à–µ–Ω–∏–µ.',
    };

    const systemMessage = {
      id: Date.now(),
      text: modeMessages[newMode],
      sender: 'assistant',
      timestamp: new Date(),
      model: 'system',
    };
    setMessages((prev) => [...prev, systemMessage]);
  };

  const handleOptionClick = (action) => {
    switch (action) {
      case 'roi':
        handleModeChange('calculator');
        break;
      case 'plan':
        handleModeChange('consultation');
        break;
      case 'demo':
        handleModeChange('demo');
        break;
    }
  };

  return (
    <>
      {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞ */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className={`ai-float-button fixed bottom-8 right-8 z-50 p-4 rounded-full shadow-2xl transition-all duration-300 transform hover:scale-110 ${
          isOpen
            ? 'bg-red-600 hover:bg-red-700'
            : 'bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700'
        }`}
        style={{
          boxShadow: '0 10px 40px rgba(0,0,0,0.3), 0 0 40px rgba(102,126,234,0.4)',
        }}
      >
        {isOpen ? (
          <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
        ) : (
          <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"
            />
          </svg>
        )}
      </button>

      {/* –û–∫–Ω–æ —á–∞—Ç–∞ */}
      {isOpen && (
        <div
          className="fixed bottom-24 right-8 w-96 h-[600px] bg-white rounded-2xl shadow-2xl z-50 flex flex-col overflow-hidden"
          style={{
            boxShadow: '0 20px 60px rgba(0,0,0,0.2), 0 0 40px rgba(102,126,234,0.2)',
          }}
        >
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="bg-gradient-to-r from-purple-600 to-blue-600 p-4 text-white">
            <div className="flex justify-between items-center mb-2">
              <h3 className="text-lg font-bold">AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç NeuroExpert</h3>
              <button
                onClick={handleClearChat}
                className="p-1 hover:bg-white/20 rounded transition-colors"
                title="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                  />
                </svg>
              </button>
            </div>

            {/* –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ */}
            <div className="flex gap-2 text-xs">
              <button
                onClick={() => handleModeChange('chat')}
                className={`px-3 py-1 rounded-full transition-colors ${
                  mode === 'chat' ? 'bg-white text-purple-600' : 'bg-white/20 hover:bg-white/30'
                }`}
              >
                üí¨ –ß–∞—Ç
              </button>
              <button
                onClick={() => handleModeChange('calculator')}
                className={`px-3 py-1 rounded-full transition-colors ${
                  mode === 'calculator'
                    ? 'bg-white text-purple-600'
                    : 'bg-white/20 hover:bg-white/30'
                }`}
              >
                üìä ROI
              </button>
              <button
                onClick={() => handleModeChange('demo')}
                className={`px-3 py-1 rounded-full transition-colors ${
                  mode === 'demo' ? 'bg-white text-purple-600' : 'bg-white/20 hover:bg-white/30'
                }`}
              >
                üé¨ –î–µ–º–æ
              </button>
              <button
                onClick={() => handleModeChange('consultation')}
                className={`px-3 py-1 rounded-full transition-colors ${
                  mode === 'consultation'
                    ? 'bg-white text-purple-600'
                    : 'bg-white/20 hover:bg-white/30'
                }`}
              >
                üí° –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
              </button>
            </div>
          </div>

          {/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-[80%] p-3 rounded-lg ${
                    message.sender === 'user'
                      ? 'bg-gradient-to-r from-purple-600 to-blue-600 text-white'
                      : 'bg-white shadow-md text-gray-800'
                  }`}
                >
                  <p className="whitespace-pre-wrap">{message.text}</p>

                  {/* –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ü–∏–∏ */}
                  {message.options && (
                    <div className="mt-3 space-y-2">
                      {message.options.map((option, idx) => (
                        <button
                          key={idx}
                          onClick={() => handleOptionClick(option.action)}
                          className="w-full text-left px-3 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors text-sm"
                        >
                          {option.label}
                        </button>
                      ))}
                    </div>
                  )}

                  <div className="text-xs opacity-60 mt-1">
                    {new Date(message.timestamp).toLocaleTimeString()}
                    {message.model && ` ‚Ä¢ ${message.model}`}
                  </div>
                </div>
              </div>
            ))}

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è */}
            {isTyping && (
              <div className="flex justify-start">
                <div className="bg-white shadow-md p-3 rounded-lg">
                  <div className="flex space-x-2">
                    <div
                      className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                      style={{ animationDelay: '0ms' }}
                    ></div>
                    <div
                      className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                      style={{ animationDelay: '150ms' }}
                    ></div>
                    <div
                      className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                      style={{ animationDelay: '300ms' }}
                    ></div>
                  </div>
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>

          {/* –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ */}
          <form onSubmit={handleSendMessage} className="p-4 border-t bg-white">
            <div className="flex gap-2">
              <input
                type="text"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder={
                  mode === 'calculator'
                    ? '–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤?'
                    : mode === 'demo'
                      ? '–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ–º–æ?'
                      : mode === 'consultation'
                        ? '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ...'
                        : '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...'
                }
                className="flex-1 px-4 py-2 border rounded-full focus:outline-none focus:ring-2 focus:ring-purple-600"
                disabled={isLoading}
              />
              <button
                type="submit"
                disabled={isLoading || !input.trim()}
                className="px-6 py-2 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-full hover:from-purple-700 hover:to-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"
              >
                {isLoading ? (
                  <svg
                    className="animate-spin h-5 w-5"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                  >
                    <circle
                      className="opacity-25"
                      cx="12"
                      cy="12"
                      r="10"
                      stroke="currentColor"
                      strokeWidth="4"
                    ></circle>
                    <path
                      className="opacity-75"
                      fill="currentColor"
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                    ></path>
                  </svg>
                ) : (
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"
                    />
                  </svg>
                )}
              </button>
            </div>

            {/* –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ */}
            <div className="flex justify-center gap-4 mt-2 text-xs text-gray-500">
              <label className="flex items-center cursor-pointer">
                <input
                  type="radio"
                  name="model"
                  value="claude"
                  checked={selectedModel === 'claude'}
                  onChange={(e) => setSelectedModel(e.target.value)}
                  className="mr-1"
                />
                Claude 3
              </label>
              <label className="flex items-center cursor-pointer">
                <input
                  type="radio"
                  name="model"
                  value="gemini"
                  checked={selectedModel === 'gemini'}
                  onChange={(e) => setSelectedModel(e.target.value)}
                  className="mr-1"
                />
                Gemini Pro
              </label>
            </div>
          </form>
        </div>
      )}

      {/* –û–Ω–±–æ—Ä–¥–∏–Ω–≥ */}
      {showOnboarding && isOpen && (
        <div className="fixed inset-0 bg-black/50 z-40 flex items-center justify-center p-4">
          <div className="bg-white rounded-2xl p-6 max-w-md shadow-2xl">
            <h3 className="text-2xl font-bold mb-4">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç! üéâ</h3>
            <div className="space-y-3 text-gray-600">
              <p>–ù–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –º–æ–∂–µ—Ç:</p>
              <ul className="list-disc list-inside space-y-1">
                <li>–†–∞—Å—Å—á–∏—Ç–∞—Ç—å ROI –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞</li>
                <li>–ü–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ</li>
                <li>–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã</li>
                <li>–ó–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é</li>
              </ul>
              <p className="font-medium">
                üí° –°–æ–≤–µ—Ç: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏ —á–∞—Ç–∞!
              </p>
            </div>
            <button
              onClick={() => {
                setShowOnboarding(false);
                localStorage.setItem('ai_onboarding_completed', 'true');
              }}
              className="mt-6 w-full py-3 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg font-medium hover:from-purple-700 hover:to-blue-700 transition-colors"
            >
              –ü–æ–Ω—è—Ç–Ω–æ, –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ
            </button>
          </div>
        </div>
      )}
    </>
  );
}
