'use client';

import { useState, useEffect, useCallback, useRef } from 'react';
import dynamic from 'next/dynamic';
import MobileWorkspace from './MobileWorkspace';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const SmartCustomerChat = dynamic(() => import('../SmartCustomerChat'), {
  ssr: false,
  loading: () => <div className="chat-loading">–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–∞...</div>
});

// ========== –ö–û–ú–ü–û–ù–ï–ù–¢–´ –í–ï–†–•–ù–ï–ô –ü–ê–ù–ï–õ–ò ==========

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–∏—Å–∫–∞
const SearchBar = ({ onSearch }) => {
  const [query, setQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [showResults, setShowResults] = useState(false);

  const handleSearch = (value) => {
    setQuery(value);
    if (value.length > 2) {
      // –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
      const results = [
        { id: 1, title: '–û—Ç—á–µ—Ç –∑–∞ –¥–µ–∫–∞–±—Ä—å', type: 'document' },
        { id: 2, title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π', type: 'settings' },
        { id: 3, title: '–ö–ª–∏–µ–Ω—Ç: –û–û–û –†–æ–º–∞—à–∫–∞', type: 'client' }
      ].filter(item => 
        item.title.toLowerCase().includes(value.toLowerCase())
      );
      setSearchResults(results);
      setShowResults(true);
    } else {
      setShowResults(false);
    }
  };

  return (
    <div className="search-bar" role="search">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
        <circle cx="11" cy="11" r="8"/>
        <path d="m21 21-4.35-4.35"/>
      </svg>
      <input
        type="search"
        placeholder="–ü–æ–∏—Å–∫ –ø–æ —Å–∏—Å—Ç–µ–º–µ..."
        value={query}
        onChange={(e) => handleSearch(e.target.value)}
        onKeyDown={(e) => e.key === 'Enter' && onSearch(query)}
        aria-label="–ü–æ–∏—Å–∫"
      />
      {showResults && searchResults.length > 0 && (
        <div className="search-results">
          {searchResults.map(result => (
            <div key={result.id} className="search-result-item">
              <span className="result-type">{result.type}</span>
              <span className="result-title">{result.title}</span>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
const QuickActions = ({ openWindow }) => {
  const actions = [
    { id: 'report', icon: 'üìä', label: '–û—Ç—á–µ—Ç' },
    { id: 'request', icon: 'üìù', label: '–ó–∞—è–≤–∫–∞' },
    { id: 'chat', icon: 'üí¨', label: '–ß–∞—Ç' }
  ];

  return (
    <div className="quick-actions" role="toolbar">
      {actions.map(action => (
        <button
          key={action.id}
          onClick={() => openWindow(action.id)}
          className="quick-action-btn"
          aria-label={action.label}
          title={action.label}
        >
          <span>{action.icon}</span>
        </button>
      ))}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const NotificationCenter = () => {
  const [notifications, setNotifications] = useState([
    { id: 1, type: 'info', message: '–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤', time: '5 –º–∏–Ω –Ω–∞–∑–∞–¥', read: false },
    { id: 2, type: 'success', message: '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', time: '15 –º–∏–Ω –Ω–∞–∑–∞–¥', read: false },
    { id: 3, type: 'warning', message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ', time: '1 —á–∞—Å –Ω–∞–∑–∞–¥', read: true }
  ]);
  const [isOpen, setIsOpen] = useState(false);

  const markAsRead = (id) => {
    setNotifications(notifications.map(n => 
      n.id === id ? { ...n, read: true } : n
    ));
  };

  const clearAll = () => {
    setNotifications([]);
    setIsOpen(false);
  };

  const unreadCount = notifications.filter(n => !n.read).length;

  return (
    <div className="notification-center">
      <button 
        className="notification-btn"
        onClick={() => setIsOpen(!isOpen)}
        aria-label="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        aria-expanded={isOpen}
      >
        {unreadCount > 0 && <span className="notification-badge">{unreadCount}</span>}
        üîî
      </button>
      {isOpen && (
        <div className="notification-dropdown" role="region" aria-label="–°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π">
          <div className="notification-header">
            <h4>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
            <button onClick={clearAll} className="clear-btn">–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ</button>
          </div>
          {notifications.length === 0 ? (
            <p className="no-notifications">–ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
          ) : (
            notifications.map(notif => (
              <div 
                key={notif.id} 
                className={`notification-item ${notif.type} ${notif.read ? 'read' : 'unread'}`}
                onClick={() => markAsRead(notif.id)}
              >
                <p>{notif.message}</p>
                <span className="notification-time">{notif.time}</span>
              </div>
            ))
          )}
        </div>
      )}
    </div>
  );
};

// ========== –ö–û–ú–ü–û–ù–ï–ù–¢–´ –û–ö–û–ù ==========

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∏–¥–∂–µ—Ç–∞ KPI —Å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
const KPIWidget = ({ title, value, change, icon, updateInterval = 5000 }) => {
  const [currentValue, setCurrentValue] = useState(value);
  const [currentChange, setCurrentChange] = useState(change);

  useEffect(() => {
    const interval = setInterval(() => {
      // –°–∏–º—É–ª—è—Ü–∏—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      const fluctuation = (Math.random() - 0.5) * 10;
      const newValue = parseFloat(currentValue.toString().replace(/[^0-9.-]+/g, ''));
      const updatedValue = (newValue + fluctuation).toFixed(1);
      const changeValue = ((fluctuation / newValue) * 100).toFixed(1);
      
      setCurrentValue(currentValue.toString().includes('‚ÇΩ') ? `‚ÇΩ${updatedValue}M` : updatedValue);
      setCurrentChange(`${fluctuation > 0 ? '+' : ''}${changeValue}%`);
    }, updateInterval);

    return () => clearInterval(interval);
  }, [currentValue, updateInterval]);

  return (
    <div className="kpi-widget" role="article" aria-label={`KPI: ${title}`}>
      <div className="kpi-header">
        <span className="kpi-icon">{icon}</span>
        <h4>{title}</h4>
      </div>
      <div className="kpi-value">{currentValue}</div>
      <div className={`kpi-change ${parseFloat(currentChange) > 0 ? 'positive' : 'negative'}`}>
        {currentChange}
      </div>
      <div className="kpi-sparkline">
        <svg viewBox="0 0 100 40" className="sparkline">
          <path 
            d="M 0 30 Q 25 20 50 25 T 100 15" 
            fill="none" 
            stroke="currentColor" 
            strokeWidth="2"
          />
        </svg>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–∞—à–±–æ—Ä–¥–∞
const DashboardWindow = ({ userPreferences }) => {
  const [widgets, setWidgets] = useState([
    { id: 'revenue', title: '–í—ã—Ä—É—á–∫–∞ –∑–∞ –º–µ—Å—è—Ü', value: '‚ÇΩ12.4M', change: '+24%', icon: 'üí∞', visible: true },
    { id: 'customers', title: '–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã', value: '3847', change: '+12%', icon: 'üë•', visible: true },
    { id: 'conversion', title: '–ö–æ–Ω–≤–µ—Ä—Å–∏—è', value: '4.2%', change: '-5%', icon: 'üìà', visible: true },
    { id: 'average', title: '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', value: '‚ÇΩ3220', change: '+8%', icon: 'üõí', visible: true },
    { id: 'tasks', title: '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏', value: '24', change: '+3%', icon: 'üìã', visible: true },
    { id: 'rating', title: '–†–µ–π—Ç–∏–Ω–≥', value: '4.8', change: '+0.2%', icon: '‚≠ê', visible: true }
  ]);

  const [showCustomize, setShowCustomize] = useState(false);
  const [isDragging, setIsDragging] = useState(null);

  const handleDragStart = (e, widgetId) => {
    setIsDragging(widgetId);
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  };

  const handleDrop = (e, targetId) => {
    e.preventDefault();
    if (isDragging && isDragging !== targetId) {
      const newWidgets = [...widgets];
      const dragIndex = newWidgets.findIndex(w => w.id === isDragging);
      const dropIndex = newWidgets.findIndex(w => w.id === targetId);
      const [removed] = newWidgets.splice(dragIndex, 1);
      newWidgets.splice(dropIndex, 0, removed);
      setWidgets(newWidgets);
    }
    setIsDragging(null);
  };

  const toggleWidget = (id) => {
    setWidgets(widgets.map(w => 
      w.id === id ? { ...w, visible: !w.visible } : w
    ));
  };

  return (
    <div className="dashboard-content">
      <div className="dashboard-header">
        <h3>–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</h3>
        <button 
          className="customize-btn" 
          onClick={() => setShowCustomize(!showCustomize)}
          aria-label="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏–¥–∂–µ—Ç—ã"
        >
          ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å
        </button>
      </div>
      
      {showCustomize && (
        <div className="customize-panel">
          <h4>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:</h4>
          <div className="widget-toggles">
            {widgets.map(widget => (
              <label key={widget.id} className="widget-toggle">
                <input
                  type="checkbox"
                  checked={widget.visible}
                  onChange={() => toggleWidget(widget.id)}
                />
                <span>{widget.icon} {widget.title}</span>
              </label>
            ))}
          </div>
        </div>
      )}
      
      <div className="widgets-grid">
        {widgets.filter(w => w.visible).map(widget => (
          <div
            key={widget.id}
            draggable
            onDragStart={(e) => handleDragStart(e, widget.id)}
            onDragOver={handleDragOver}
            onDrop={(e) => handleDrop(e, widget.id)}
            className={`widget-container ${isDragging === widget.id ? 'dragging' : ''}`}
          >
            <KPIWidget {...widget} />
          </div>
        ))}
      </div>

      <div className="dashboard-charts">
        <div className="chart-container">
          <h4>–ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏ (Real-time)</h4>
          <div className="chart-placeholder">
            <svg viewBox="0 0 400 200" className="revenue-chart">
              <path d="M 0 150 Q 100 80 200 100 T 400 60" 
                    fill="none" 
                    stroke="url(#revenue-gradient)" 
                    strokeWidth="3"/>
              <defs>
                <linearGradient id="revenue-gradient">
                  <stop offset="0%" stopColor="#8b5cf6"/>
                  <stop offset="100%" stopColor="#3b82f6"/>
                </linearGradient>
              </defs>
            </svg>
          </div>
        </div>
        <div className="chart-container">
          <h4>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞</h4>
          <div className="traffic-sources">
            <div className="source-item">
              <span className="source-name">–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π</span>
              <div className="source-bar" style={{width: '65%', background: '#8b5cf6'}}></div>
              <span className="source-value">65%</span>
            </div>
            <div className="source-item">
              <span className="source-name">–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ</span>
              <div className="source-bar" style={{width: '25%', background: '#3b82f6'}}></div>
              <span className="source-value">25%</span>
            </div>
            <div className="source-item">
              <span className="source-name">–ü—Ä—è–º—ã–µ</span>
              <div className="source-bar" style={{width: '10%', background: '#10b981'}}></div>
              <span className="source-value">10%</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
const AnalyticsWindow = () => {
  const [selectedPeriod, setSelectedPeriod] = useState('month');
  const [selectedMetric, setSelectedMetric] = useState('revenue');
  
  const metrics = {
    revenue: { name: '–í—ã—Ä—É—á–∫–∞', value: '‚ÇΩ45.2M', change: '+18%' },
    users: { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', value: '12,847', change: '+24%' },
    conversion: { name: '–ö–æ–Ω–≤–µ—Ä—Å–∏—è', value: '3.8%', change: '+0.5%' },
    retention: { name: '–£–¥–µ—Ä–∂–∞–Ω–∏–µ', value: '78%', change: '+2%' }
  };

  return (
    <div className="analytics-content">
      <div className="analytics-header">
        <h3>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–∏–∑–Ω–µ—Å–∞</h3>
        <div className="analytics-controls">
          <div className="period-selector">
            {['day', 'week', 'month', 'year'].map(period => (
              <button 
                key={period}
                className={`period-btn ${selectedPeriod === period ? 'active' : ''}`}
                onClick={() => setSelectedPeriod(period)}
              >
                {period === 'day' ? '–î–µ–Ω—å' : 
                 period === 'week' ? '–ù–µ–¥–µ–ª—è' :
                 period === 'month' ? '–ú–µ—Å—è—Ü' : '–ì–æ–¥'}
              </button>
            ))}
          </div>
          <button className="export-btn">
            üì• –≠–∫—Å–ø–æ—Ä—Ç
          </button>
        </div>
      </div>

      <div className="metrics-selector">
        {Object.entries(metrics).map(([key, metric]) => (
          <div 
            key={key}
            className={`metric-card ${selectedMetric === key ? 'active' : ''}`}
            onClick={() => setSelectedMetric(key)}
          >
            <h4>{metric.name}</h4>
            <p className="metric-value">{metric.value}</p>
            <span className={`metric-change ${metric.change.startsWith('+') ? 'positive' : 'negative'}`}>
              {metric.change}
            </span>
          </div>
        ))}
      </div>

      <div className="analytics-chart">
        <svg viewBox="0 0 800 400" className="analytics-graph">
          <path d="M 0 300 L 100 250 L 200 280 L 300 200 L 400 180 L 500 150 L 600 120 L 700 100 L 800 80" 
                fill="none" 
                stroke="url(#analytics-gradient)" 
                strokeWidth="3"/>
          <defs>
            <linearGradient id="analytics-gradient">
              <stop offset="0%" stopColor="#8b5cf6"/>
              <stop offset="100%" stopColor="#3b82f6"/>
            </linearGradient>
          </defs>
        </svg>
      </div>

      <div className="analytics-details">
        <h4>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
        <table className="analytics-table">
          <thead>
            <tr>
              <th>–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å</th>
              <th>–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥</th>
              <th>–ü—Ä–µ–¥—ã–¥—É—â–∏–π</th>
              <th>–ò–∑–º–µ–Ω–µ–Ω–∏–µ</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã</td>
              <td>324</td>
              <td>278</td>
              <td className="positive">+16.5%</td>
            </tr>
            <tr>
              <td>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫</td>
              <td>‚ÇΩ3,450</td>
              <td>‚ÇΩ3,200</td>
              <td className="positive">+7.8%</td>
            </tr>
            <tr>
              <td>–û—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤</td>
              <td>2.3%</td>
              <td>3.1%</td>
              <td className="positive">-25.8%</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–¥–∞—á
const TasksWindow = () => {
  const [tasks, setTasks] = useState([
    { id: 1, title: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—á–µ—Ç—ã –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª', completed: false, priority: 'high', dueDate: '2025-01-20' },
    { id: 2, title: '–°–æ–∑–≤–æ–Ω —Å –∫–ª–∏–µ–Ω—Ç–æ–º', completed: false, priority: 'medium', dueDate: '2025-01-18' },
    { id: 3, title: '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é', completed: true, priority: 'low', dueDate: '2025-01-17' },
    { id: 4, title: '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã', completed: false, priority: 'high', dueDate: '2025-01-19' }
  ]);

  const [filter, setFilter] = useState('all');
  const [showAddTask, setShowAddTask] = useState(false);
  const [newTask, setNewTask] = useState({ title: '', priority: 'medium', dueDate: '' });

  const toggleTask = (id) => {
    setTasks(tasks.map(task => 
      task.id === id ? {...task, completed: !task.completed} : task
    ));
  };

  const addTask = (e) => {
    e.preventDefault();
    if (newTask.title) {
      setTasks([...tasks, {
        id: Date.now(),
        ...newTask,
        completed: false
      }]);
      setNewTask({ title: '', priority: 'medium', dueDate: '' });
      setShowAddTask(false);
    }
  };

  const deleteTask = (id) => {
    setTasks(tasks.filter(task => task.id !== id));
  };

  const filteredTasks = tasks.filter(task => {
    if (filter === 'completed') return task.completed;
    if (filter === 'active') return !task.completed;
    return true;
  });

  return (
    <div className="tasks-content">
      <div className="tasks-header">
        <h3>–ú–æ–∏ –∑–∞–¥–∞—á–∏</h3>
        <button 
          className="add-task-btn"
          onClick={() => setShowAddTask(!showAddTask)}
        >
          + –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
        </button>
      </div>

      <div className="tasks-filters">
        <button 
          className={`filter-btn ${filter === 'all' ? 'active' : ''}`}
          onClick={() => setFilter('all')}
        >
          –í—Å–µ ({tasks.length})
        </button>
        <button 
          className={`filter-btn ${filter === 'active' ? 'active' : ''}`}
          onClick={() => setFilter('active')}
        >
          –ê–∫—Ç–∏–≤–Ω—ã–µ ({tasks.filter(t => !t.completed).length})
        </button>
        <button 
          className={`filter-btn ${filter === 'completed' ? 'active' : ''}`}
          onClick={() => setFilter('completed')}
        >
          –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ ({tasks.filter(t => t.completed).length})
        </button>
      </div>

      {showAddTask && (
        <form className="add-task-form" onSubmit={addTask}>
          <input
            type="text"
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
            value={newTask.title}
            onChange={(e) => setNewTask({...newTask, title: e.target.value})}
            autoFocus
          />
          <select 
            value={newTask.priority}
            onChange={(e) => setNewTask({...newTask, priority: e.target.value})}
          >
            <option value="low">–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</option>
            <option value="medium">–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</option>
            <option value="high">–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</option>
          </select>
          <input
            type="date"
            value={newTask.dueDate}
            onChange={(e) => setNewTask({...newTask, dueDate: e.target.value})}
          />
          <div className="form-actions">
            <button type="submit">–î–æ–±–∞–≤–∏—Ç—å</button>
            <button type="button" onClick={() => setShowAddTask(false)}>–û—Ç–º–µ–Ω–∞</button>
          </div>
        </form>
      )}

      <div className="tasks-list">
        {filteredTasks.map(task => (
          <div key={task.id} className={`task-item ${task.completed ? 'completed' : ''}`}>
            <input 
              type="checkbox" 
              checked={task.completed}
              onChange={() => toggleTask(task.id)}
            />
            <div className="task-info">
              <span className="task-title">{task.title}</span>
              <div className="task-meta">
                <span className={`priority ${task.priority}`}>
                  {task.priority === 'high' ? 'üî¥ –í—ã—Å–æ–∫–∏–π' :
                   task.priority === 'medium' ? 'üü° –°—Ä–µ–¥–Ω–∏–π' : 'üü¢ –ù–∏–∑–∫–∏–π'}
                </span>
                {task.dueDate && (
                  <span className="due-date">üìÖ {task.dueDate}</span>
                )}
              </div>
            </div>
            <button 
              className="delete-task"
              onClick={() => deleteTask(task.id)}
              aria-label="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"
            >
              üóëÔ∏è
            </button>
          </div>
        ))}
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
const DocumentsWindow = () => {
  const [documents, setDocuments] = useState([
    { id: 1, name: '–û—Ç—á–µ—Ç Q4 2024.pdf', size: '2.4 MB', date: '2025-01-15', type: 'pdf' },
    { id: 2, name: '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞.pptx', size: '15.7 MB', date: '2025-01-14', type: 'pptx' },
    { id: 3, name: '–î–æ–≥–æ–≤–æ—Ä ‚Ññ2345.docx', size: '245 KB', date: '2025-01-12', type: 'docx' },
    { id: 4, name: '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å.xlsx', size: '1.8 MB', date: '2025-01-10', type: 'xlsx' }
  ]);

  const [searchQuery, setSearchQuery] = useState('');
  const [sortBy, setSortBy] = useState('date');

  const handleUpload = () => {
    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    const newDoc = {
      id: Date.now(),
      name: '–ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.pdf',
      size: '1.2 MB',
      date: new Date().toISOString().split('T')[0],
      type: 'pdf'
    };
    setDocuments([newDoc, ...documents]);
  };

  const handleDownload = (doc) => {
    console.log('–°–∫–∞—á–∏–≤–∞–Ω–∏–µ:', doc.name);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  };

  const handleDelete = (id) => {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç?')) {
      setDocuments(documents.filter(doc => doc.id !== id));
    }
  };

  const filteredDocs = documents
    .filter(doc => doc.name.toLowerCase().includes(searchQuery.toLowerCase()))
    .sort((a, b) => {
      if (sortBy === 'date') return new Date(b.date) - new Date(a.date);
      if (sortBy === 'name') return a.name.localeCompare(b.name);
      return 0;
    });

  const getFileIcon = (type) => {
    switch(type) {
      case 'pdf': return 'üìÑ';
      case 'docx': return 'üìù';
      case 'xlsx': return 'üìä';
      case 'pptx': return 'üìë';
      default: return 'üìé';
    }
  };

  return (
    <div className="documents-content">
      <div className="documents-header">
        <h3>–î–æ–∫—É–º–µ–Ω—Ç—ã</h3>
        <button className="upload-btn" onClick={handleUpload}>
          ‚¨Ü –ó–∞–≥—Ä—É–∑–∏—Ç—å
        </button>
      </div>

      <div className="documents-controls">
        <input
          type="search"
          placeholder="–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="doc-search"
        />
        <select 
          value={sortBy} 
          onChange={(e) => setSortBy(e.target.value)}
          className="sort-select"
        >
          <option value="date">–ü–æ –¥–∞—Ç–µ</option>
          <option value="name">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
        </select>
      </div>

      <div className="documents-list">
        {filteredDocs.map(doc => (
          <div key={doc.id} className="document-item">
            <div className="doc-icon">{getFileIcon(doc.type)}</div>
            <div className="doc-info">
              <div className="doc-name">{doc.name}</div>
              <div className="doc-meta">{doc.size} ‚Ä¢ {doc.date}</div>
            </div>
            <div className="doc-actions">
              <button 
                className="doc-action"
                onClick={() => handleDownload(doc)}
                title="–°–∫–∞—á–∞—Ç—å"
              >
                ‚¨á
              </button>
              <button 
                className="doc-action"
                onClick={() => handleDelete(doc.id)}
                title="–£–¥–∞–ª–∏—Ç—å"
              >
                üóëÔ∏è
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
const IntegrationsWindow = () => {
  const [integrations, setIntegrations] = useState([
    { id: 'google', name: 'Google Analytics', status: 'connected', icon: 'üìä', lastSync: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥' },
    { id: 'yandex', name: '–Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞', status: 'connected', icon: 'üìà', lastSync: '1 —á–∞—Å –Ω–∞–∑–∞–¥' },
    { id: 'telegram', name: 'Telegram Bot', status: 'disconnected', icon: 'üí¨', lastSync: '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ' },
    { id: 'crm', name: 'amoCRM', status: 'connected', icon: 'ü§ù', lastSync: '30 –º–∏–Ω –Ω–∞–∑–∞–¥' },
    { id: 'payment', name: 'Stripe', status: 'disconnected', icon: 'üí≥', lastSync: '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ' }
  ]);

  const toggleIntegration = (id) => {
    setIntegrations(integrations.map(integration => 
      integration.id === id 
        ? { 
            ...integration, 
            status: integration.status === 'connected' ? 'disconnected' : 'connected',
            lastSync: integration.status === 'disconnected' ? '–¢–æ–ª—å–∫–æ —á—Ç–æ' : '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ'
          }
        : integration
    ));
  };

  const syncIntegration = (id) => {
    setIntegrations(integrations.map(integration => 
      integration.id === id 
        ? { ...integration, lastSync: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...' }
        : integration
    ));

    // –°–∏–º—É–ª—è—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    setTimeout(() => {
      setIntegrations(integrations.map(integration => 
        integration.id === id 
          ? { ...integration, lastSync: '–¢–æ–ª—å–∫–æ —á—Ç–æ' }
          : integration
      ));
    }, 2000);
  };

  return (
    <div className="integrations-content">
      <h3>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h3>
      <p className="integrations-desc">
        –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      </p>
      
      <div className="integrations-grid">
        {integrations.map(integration => (
          <div key={integration.id} className="integration-card">
            <div className="integration-header">
              <span className="integration-icon">{integration.icon}</span>
              <h4>{integration.name}</h4>
            </div>
            <div className={`integration-status ${integration.status}`}>
              {integration.status === 'connected' ? 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ'}
            </div>
            <div className="integration-sync">
              –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {integration.lastSync}
            </div>
            <div className="integration-actions">
              <button 
                className="integration-action primary"
                onClick={() => toggleIntegration(integration.id)}
              >
                {integration.status === 'connected' ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å'}
              </button>
              {integration.status === 'connected' && (
                <button 
                  className="integration-action secondary"
                  onClick={() => syncIntegration(integration.id)}
                >
                  üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                </button>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç—á–µ—Ç–æ–≤
const ReportWindow = () => {
  const [reportType, setReportType] = useState('financial');
  const [dateRange, setDateRange] = useState({ from: '', to: '' });
  const [isGenerating, setIsGenerating] = useState(false);

  const handleSubmit = (e) => {
    e.preventDefault();
    setIsGenerating(true);
    
    // –°–∏–º—É–ª—è—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
    setTimeout(() => {
      setIsGenerating(false);
      alert('–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω! –§–∞–π–ª –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.');
    }, 3000);
  };

  return (
    <div className="report-content">
      <h3>–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞</h3>
      <form className="report-form" onSubmit={handleSubmit}>
        <div className="form-group">
          <label>–¢–∏–ø –æ—Ç—á–µ—Ç–∞</label>
          <select 
            value={reportType} 
            onChange={(e) => setReportType(e.target.value)}
          >
            <option value="financial">–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç</option>
            <option value="clients">–û—Ç—á–µ—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º</option>
            <option value="analytics">–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç</option>
            <option value="sales">–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º</option>
          </select>
        </div>
        
        <div className="form-group">
          <label>–ü–µ—Ä–∏–æ–¥</label>
          <div className="date-range">
            <input 
              type="date" 
              value={dateRange.from}
              onChange={(e) => setDateRange({...dateRange, from: e.target.value})}
              required
            />
            <span>‚Äî</span>
            <input 
              type="date" 
              value={dateRange.to}
              onChange={(e) => setDateRange({...dateRange, to: e.target.value})}
              required
            />
          </div>
        </div>

        <div className="form-group">
          <label>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</label>
          <div className="report-options">
            <label className="checkbox-label">
              <input type="checkbox" defaultChecked />
              –í–∫–ª—é—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏
            </label>
            <label className="checkbox-label">
              <input type="checkbox" defaultChecked />
              –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
            </label>
            <label className="checkbox-label">
              <input type="checkbox" />
              –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞
            </label>
          </div>
        </div>

        <button 
          type="submit" 
          className="submit-btn"
          disabled={isGenerating}
        >
          {isGenerating ? '‚è≥ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ...' : 'üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç'}
        </button>
      </form>

      <div className="recent-reports">
        <h4>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã</h4>
        <div className="reports-list">
          <div className="report-item">
            <span>üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–∫–∞–±—Ä—å</span>
            <button className="download-btn">‚¨á</button>
          </div>
          <div className="report-item">
            <span>üë• –û—Ç—á–µ—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º Q4</span>
            <button className="download-btn">‚¨á</button>
          </div>
        </div>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞—è–≤–æ–∫
const RequestWindow = () => {
  const [formData, setFormData] = useState({
    subject: '',
    description: '',
    priority: 'medium',
    category: 'support'
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏:', formData);
    alert('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    setFormData({
      subject: '',
      description: '',
      priority: 'medium',
      category: 'support'
    });
  };

  return (
    <div className="request-content">
      <h3>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</h3>
      <form className="request-form" onSubmit={handleSubmit}>
        <div className="form-group">
          <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
          <select 
            value={formData.category}
            onChange={(e) => setFormData({...formData, category: e.target.value})}
          >
            <option value="support">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</option>
            <option value="feature">–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è</option>
            <option value="bug">–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ</option>
            <option value="other">–î—Ä—É–≥–æ–µ</option>
          </select>
        </div>

        <div className="form-group">
          <label>–¢–µ–º–∞ –∑–∞—è–≤–∫–∏</label>
          <input 
            type="text" 
            placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
            value={formData.subject}
            onChange={(e) => setFormData({...formData, subject: e.target.value})}
            required
          />
        </div>

        <div className="form-group">
          <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
          <textarea 
            rows="5" 
            placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ..."
            value={formData.description}
            onChange={(e) => setFormData({...formData, description: e.target.value})}
            required
          />
        </div>

        <div className="form-group">
          <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
          <select 
            value={formData.priority}
            onChange={(e) => setFormData({...formData, priority: e.target.value})}
          >
            <option value="low">üü¢ –ù–∏–∑–∫–∏–π</option>
            <option value="medium">üü° –°—Ä–µ–¥–Ω–∏–π</option>
            <option value="high">üî¥ –í—ã—Å–æ–∫–∏–π</option>
            <option value="critical">üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
          </select>
        </div>

        <button type="submit" className="submit-btn">
          üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
        </button>
      </form>

      <div className="request-info">
        <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
        <p>üïê –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 2-4 —á–∞—Å–∞</p>
        <p>üìû –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è: +7 (495) 123-45-67</p>
        <p>üìß Email: support@neuroexpert.ai</p>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —á–∞—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º
const ChatWindow = () => {
  return <SmartCustomerChat />;
};

// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ ==========

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π
const ActivityHistory = () => {
  const [activities] = useState([
    { id: 1, action: '–°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç', user: '–í—ã', time: '10:15', type: 'report' },
    { id: 2, action: '–ò–∑–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', user: '–ê–¥–º–∏–Ω', time: '09:45', type: 'settings' },
    { id: 3, action: '–î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç', user: '–ú–µ–Ω–µ–¥–∂–µ—Ä', time: '09:30', type: 'client' },
    { id: 4, action: '–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞', user: '–í—ã', time: '08:20', type: 'task' }
  ]);

  return (
    <div className="activity-history">
      <h4>–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π</h4>
      <div className="activity-list">
        {activities.map(activity => (
          <div key={activity.id} className="activity-item">
            <div className="activity-icon">{
              activity.type === 'report' ? 'üìä' :
              activity.type === 'settings' ? '‚öôÔ∏è' :
              activity.type === 'client' ? 'üë§' : '‚úì'
            }</div>
            <div className="activity-details">
              <p>{activity.action}</p>
              <span>{activity.user} ‚Ä¢ {activity.time}</span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ—Ñ–∏–ª—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const ProfileProgress = ({ userRole }) => {
  const [level] = useState(12);
  const [experience] = useState(3450);
  const [nextLevelExp] = useState(5000);

  return (
    <div className="profile-progress">
      <div className="user-level">
        <span className="level-badge">–£—Ä–æ–≤–µ–Ω—å {level}</span>
        <div className="experience-bar">
          <div 
            className="experience-fill" 
            style={{ width: `${(experience / nextLevelExp) * 100}%` }}
          />
          <span className="experience-text">{experience} / {nextLevelExp} XP</span>
        </div>
      </div>
      <div className="achievements">
        <h5>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h5>
        <div className="achievement-badges">
          <span className="achievement" title="–ü–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç">üìä</span>
          <span className="achievement" title="100 –∫–ª–∏–µ–Ω—Ç–æ–≤">üë•</span>
          <span className="achievement" title="–ú–∞—Å—Ç–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏">üìà</span>
          <span className="achievement locked" title="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ">üîí</span>
        </div>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–∫–Ω–∞ —Å –∏–∑–º–µ–Ω—è–µ–º—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
const ResizableWindow = ({ window, onClose, isActive, onActivate, onDrag, onResize, children }) => {
  const [isDragging, setIsDragging] = useState(false);
  const [isResizing, setIsResizing] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
  const [size, setSize] = useState(window.size);
  const windowRef = useRef(null);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleMouseDown = (e) => {
    if (e.target.className.includes('window-header')) {
      setIsDragging(true);
      setDragStart({
        x: e.clientX - window.position.x,
        y: e.clientY - window.position.y
      });
      onActivate();
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
  const handleResizeStart = (e) => {
    e.stopPropagation();
    setIsResizing(true);
    setDragStart({ x: e.clientX, y: e.clientY });
  };

  useEffect(() => {
    const handleMouseMove = (e) => {
      if (isDragging) {
        onDrag(window.id, {
          x: e.clientX - dragStart.x,
          y: e.clientY - dragStart.y
        });
      } else if (isResizing) {
        const newWidth = size.width + (e.clientX - dragStart.x);
        const newHeight = size.height + (e.clientY - dragStart.y);
        setSize({
          width: Math.max(300, newWidth),
          height: Math.max(200, newHeight)
        });
        setDragStart({ x: e.clientX, y: e.clientY });
        onResize(window.id, { width: newWidth, height: newHeight });
      }
    };

    const handleMouseUp = () => {
      setIsDragging(false);
      setIsResizing(false);
    };

    if (isDragging || isResizing) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
    }

    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, [isDragging, isResizing, dragStart, window.id, onDrag, onResize, size]);

  // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
  const handleKeyDown = (e) => {
    if (e.key === 'Escape') {
      onClose(window.id);
    } else if (e.ctrlKey || e.metaKey) {
      switch(e.key) {
        case 'w':
          e.preventDefault();
          onClose(window.id);
          break;
      }
    }
  };

  return (
    <div 
      ref={windowRef}
      className={`workspace-window ${isActive ? 'active' : ''}`}
      style={{
        left: window.position.x,
        top: window.position.y,
        width: size.width,
        height: size.height,
        zIndex: isActive ? 1000 : window.zIndex
      }}
      onMouseDown={handleMouseDown}
      onKeyDown={handleKeyDown}
      tabIndex={0}
      role="dialog"
      aria-label={window.title}
    >
      <div className="window-header" role="banner">
        <h3 className="window-title">{window.title}</h3>
        <div className="window-controls" role="toolbar">
          <button 
            className="window-control close" 
            onClick={(e) => {
              e.stopPropagation();
              onClose(window.id);
            }}
            aria-label="–ó–∞–∫—Ä—ã—Ç—å"
            title="–ó–∞–∫—Ä—ã—Ç—å (Ctrl+W)"
          >
            √ó
          </button>
        </div>
      </div>
      <div className="window-body" role="main">
        {children}
      </div>
      <div 
        className="window-resize-handle"
        onMouseDown={handleResizeStart}
        aria-label="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞"
      />
    </div>
  );
};

// ========== –ì–õ–ê–í–ù–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢ ==========

export default function WorkspaceLayoutFixed() {
  const [windows, setWindows] = useState([]);
  const [activeWindow, setActiveWindow] = useState(null);
  const [userEmail, setUserEmail] = useState('');
  const [userRole] = useState('admin');
  const [userPreferences, setUserPreferences] = useState({
    theme: 'dark',
    layout: 'default',
    widgets: ['revenue', 'customers', 'conversion', 'tasks']
  });
  const [isMobile, setIsMobile] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth <= 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
  useEffect(() => {
    const savedSession = localStorage.getItem('workspace-session');
    if (savedSession) {
      try {
        const session = JSON.parse(savedSession);
        setWindows(session.windows || []);
        setUserPreferences(session.preferences || userPreferences);
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏:', e);
      }
    }

    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if ('Notification' in window && Notification.permission === 'default') {
      Notification.requestPermission();
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  useEffect(() => {
    const session = {
      windows,
      preferences: userPreferences,
      timestamp: new Date().toISOString()
    };
    localStorage.setItem('workspace-session', JSON.stringify(session));
  }, [windows, userPreferences]);

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞
  const openWindow = useCallback((type) => {
    const windowConfigs = {
      dashboard: { title: 'üìä –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', size: { width: 800, height: 600 } },
      analytics: { title: 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', size: { width: 900, height: 650 } },
      tasks: { title: '‚úì –ó–∞–¥–∞—á–∏', size: { width: 600, height: 700 } },
      documents: { title: 'üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã', size: { width: 650, height: 500 } },
      integrations: { title: 'üîå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', size: { width: 700, height: 550 } },
      chat: { title: 'üí¨ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç', size: { width: 450, height: 650 } },
      report: { title: 'üìä –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç', size: { width: 700, height: 600 } },
      request: { title: 'üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', size: { width: 600, height: 500 } }
    };

    const config = windowConfigs[type] || { 
      title: type, 
      size: { width: 600, height: 500 } 
    };

    const newWindow = {
      id: Date.now(),
      type,
      title: config.title,
      position: { 
        x: 100 + (windows.length * 30) % 400, 
        y: 50 + (windows.length * 30) % 300 
      },
      size: config.size,
      zIndex: windows.length + 1
    };

    setWindows([...windows, newWindow]);
    setActiveWindow(newWindow.id);
  }, [windows]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞
  const closeWindow = (id) => {
    setWindows(windows.filter(w => w.id !== id));
    if (activeWindow === id) {
      setActiveWindow(null);
    }
  };

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–∫–Ω–∞
  const handleDrag = (id, position) => {
    setWindows(windows.map(w => 
      w.id === id ? { ...w, position } : w
    ));
  };

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  const handleResize = (id, size) => {
    setWindows(windows.map(w => 
      w.id === id ? { ...w, size } : w
    ));
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
  const handleSearch = (query) => {
    console.log('–ü–æ–∏—Å–∫:', query);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
  const handleLogin = (e) => {
    e.preventDefault();
    if (userEmail) {
      console.log('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è:', userEmail);
    }
  };

  // –†–µ–Ω–¥–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–∫–Ω–∞
  const renderWindowContent = (window) => {
    switch (window.type) {
      case 'dashboard':
        return <DashboardWindow userPreferences={userPreferences} />;
      case 'analytics':
        return <AnalyticsWindow />;
      case 'tasks':
        return <TasksWindow />;
      case 'documents':
        return <DocumentsWindow />;
      case 'integrations':
        return <IntegrationsWindow />;
      case 'chat':
        return <ChatWindow />;
      case 'report':
        return <ReportWindow />;
      case 'request':
        return <RequestWindow />;
      default:
        return <div>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–∫–Ω–∞</div>;
    }
  };

  // –≠–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞ (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
  if (!userEmail) {
    return (
      <div className="workspace-login">
        <div className="login-container">
          <div className="login-header">
            <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="url(#gradient)">
              <defs>
                <linearGradient id="gradient">
                  <stop offset="0%" stopColor="#8b5cf6"/>
                  <stop offset="100%" stopColor="#3b82f6"/>
                </linearGradient>
              </defs>
              <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5" strokeWidth="2"/>
            </svg>
            <h1>NeuroExpert Workspace</h1>
            <p>–ú—É–ª—å—Ç–∏–æ–∫–æ–Ω–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–æ–º</p>
          </div>
          
          <form onSubmit={handleLogin} className="login-form">
            <div className="form-group">
              <label htmlFor="email">Email –¥–ª—è –≤—Ö–æ–¥–∞</label>
              <input
                id="email"
                type="email"
                placeholder="your@email.com"
                value={userEmail}
                onChange={(e) => setUserEmail(e.target.value)}
                required
                autoFocus
                aria-label="Email –∞–¥—Ä–µ—Å"
              />
            </div>
            <button type="submit" className="login-btn">
              –í–æ–π—Ç–∏ –≤ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
            </button>
            <p className="demo-hint">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <circle cx="12" cy="12" r="10"/>
                <path d="M12 16v-4M12 8h.01"/>
              </svg>
              –î–ª—è –¥–µ–º–æ –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—é–±–æ–π email
            </p>
          </form>
        </div>
      </div>
    );
  }

  // –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
  if (isMobile && userEmail) {
    return <MobileWorkspace userEmail={userEmail} onLogout={() => setUserEmail('')} />;
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–¥–µ—Å–∫—Ç–æ–ø)
  return (
    <div className="workspace-enhanced" role="application" aria-label="NeuroExpert Workspace">
      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å */}
      <header className="workspace-header" role="banner">
        <div className="header-left">
          <div className="workspace-logo">
            <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5" strokeWidth="2"/>
            </svg>
            <span>NeuroExpert</span>
          </div>
          <SearchBar onSearch={handleSearch} />
        </div>
        
        <div className="header-center">
          <QuickActions openWindow={openWindow} />
        </div>

        <div className="header-right">
          <NotificationCenter />
          <div className="user-menu">
            <button className="user-menu-btn" aria-label="–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
              <div className="user-avatar">{userEmail.charAt(0).toUpperCase()}</div>
              <span className="user-name">{userEmail}</span>
            </button>
          </div>
        </div>
      </header>

      <div className="workspace-body">
        {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
        <aside className="workspace-sidebar" role="navigation" aria-label="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é">
          <nav className="sidebar-nav">
            <button 
              onClick={() => openWindow('dashboard')} 
              className="nav-btn"
              aria-label="–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å"
            >
              <span>üìä</span>
              <span className="nav-label">–î–∞—à–±–æ—Ä–¥</span>
            </button>
            <button 
              onClick={() => openWindow('analytics')} 
              className="nav-btn"
              aria-label="–û—Ç–∫—Ä—ã—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É"
            >
              <span>üìà</span>
              <span className="nav-label">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</span>
            </button>
            <button 
              onClick={() => openWindow('tasks')} 
              className="nav-btn"
              aria-label="–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á–∏"
            >
              <span>‚úì</span>
              <span className="nav-label">–ó–∞–¥–∞—á–∏</span>
            </button>
            <button 
              onClick={() => openWindow('documents')} 
              className="nav-btn"
              aria-label="–û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã"
            >
              <span>üìÅ</span>
              <span className="nav-label">–î–æ–∫—É–º–µ–Ω—Ç—ã</span>
            </button>
            <button 
              onClick={() => openWindow('integrations')} 
              className="nav-btn"
              aria-label="–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
            >
              <span>üîå</span>
              <span className="nav-label">–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</span>
            </button>
            <button 
              onClick={() => openWindow('chat')} 
              className="nav-btn"
              aria-label="–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
            >
              <span>üí¨</span>
              <span className="nav-label">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</span>
            </button>
          </nav>

          <div className="sidebar-footer">
            <ProfileProgress userRole={userRole} />
            <ActivityHistory />
          </div>
        </aside>

        {/* –†–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å */}
        <main className="workspace-main" role="main">
          <div className="workspace-desktop">
            {windows.length === 0 && (
              <div className="empty-desktop">
                <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ!</h2>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –∏–∑ –º–µ–Ω—é —Å–ª–µ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</p>
                <div className="desktop-hints">
                  <div className="hint">
                    <kbd>Ctrl</kbd> + <kbd>W</kbd> - –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
                  </div>
                  <div className="hint">
                    <kbd>Esc</kbd> - –ó–∞–∫—Ä—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
                  </div>
                </div>
              </div>
            )}
            
            {windows.map(window => (
              <ResizableWindow
                key={window.id}
                window={window}
                isActive={activeWindow === window.id}
                onClose={closeWindow}
                onActivate={() => setActiveWindow(window.id)}
                onDrag={handleDrag}
                onResize={handleResize}
              >
                {renderWindowContent(window)}
              </ResizableWindow>
            ))}
          </div>
        </main>
      </div>

      {/* –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ */}
      <footer className="workspace-status" role="contentinfo">
        <div className="status-left">
          <span className="status-item">
            <span className="status-dot online"></span>
            –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
          </span>
          <span className="status-item">
            –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new Date().toLocaleTimeString()}
          </span>
        </div>
        <div className="status-right">
          <span className="status-item">
            –†–æ–ª—å: {userRole === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : 
                   userRole === 'analyst' ? '–ê–Ω–∞–ª–∏—Ç–∏–∫' : '–ú–µ–Ω–µ–¥–∂–µ—Ä'}
          </span>
          <button 
            className="logout-btn"
            onClick={() => setUserEmail('')}
            aria-label="–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
          >
            –í—ã–π—Ç–∏
          </button>
        </div>
      </footer>
    </div>
  );
}