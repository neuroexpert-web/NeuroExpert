'use client';

import { useState, useRef, useEffect } from 'react';
import { useWorkspace } from './WorkspaceContext';

export default function AIAssistant() {
  const { addNotification, userProfile } = useWorkspace();
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: 'assistant',
      text: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?'
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSend = async (e) => {
    e.preventDefault();
    if (!inputValue.trim()) return;

    const userMessage = {
      id: Date.now(),
      type: 'user',
      text: inputValue
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI
    setTimeout(() => {
      const responses = [
        '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ... –í–∏–∂—É —Ä–æ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –Ω–∞ 15% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é!',
        '–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" - —Ç–∞–º –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞.',
        '–ú–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –≤–∞—Å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É. –•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è —ç—Ç–æ —Å–¥–µ–ª–∞–ª?',
        '–û–±–Ω–∞—Ä—É–∂–∏–ª –∞–Ω–æ–º–∞–ª–∏—é –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ.',
        '–í–∞—à —É—Ä–æ–≤–µ–Ω—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤–æ–≥–æ —Ä–µ–∫–æ—Ä–¥–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º!'
      ];

      const aiMessage = {
        id: Date.now() + 1,
        type: 'assistant',
        text: responses[Math.floor(Math.random() * responses.length)]
      };

      setMessages(prev => [...prev, aiMessage]);
      setIsTyping(false);

      // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      if (!isOpen) {
        addNotification({
          id: Date.now(),
          type: 'info',
          title: 'AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç',
          message: '–£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          timestamp: new Date()
        });
      }
    }, 1500);
  };

  const quickActions = [
    { id: 1, text: '–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç', action: 'report' },
    { id: 2, text: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö', action: 'analyze' },
    { id: 3, text: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', action: 'recommend' },
    { id: 4, text: '–ü–æ–º–æ—â—å', action: 'help' }
  ];

  const handleQuickAction = (action) => {
    const actionTexts = {
      report: '–°–æ–∑–¥–∞–π—Ç–µ –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü',
      analyze: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π',
      recommend: '–î–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–Ω–≤–µ—Ä—Å–∏–∏',
      help: '–ö–∞–∫ –º–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ?'
    };
    
    setInputValue(actionTexts[action]);
  };

  return (
    <div className="ai-assistant">
      <button 
        className="ai-assistant-trigger"
        onClick={() => setIsOpen(!isOpen)}
        aria-label="AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
      >
        {isOpen ? '‚úï' : 'ü§ñ'}
      </button>

      {isOpen && (
        <div className="ai-chat-window">
          <div className="chat-header">
            <div className="chat-header-info">
              <h3>AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</h3>
              <span className="chat-status">
                <span className="status-dot"></span>
                –û–Ω–ª–∞–π–Ω
              </span>
            </div>
            <button 
              className="chat-close"
              onClick={() => setIsOpen(false)}
              aria-label="–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç"
            >
              √ó
            </button>
          </div>

          <div className="chat-messages">
            {messages.map(message => (
              <div 
                key={message.id} 
                className={`chat-message ${message.type}`}
              >
                <div className="message-avatar">
                  {message.type === 'assistant' ? 'ü§ñ' : userProfile.avatar}
                </div>
                <div className="message-content">
                  <p>{message.text}</p>
                </div>
              </div>
            ))}
            {isTyping && (
              <div className="chat-message assistant">
                <div className="message-avatar">ü§ñ</div>
                <div className="message-content typing">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          <div className="chat-quick-actions">
            {quickActions.map(action => (
              <button
                key={action.id}
                className="quick-action-chip"
                onClick={() => handleQuickAction(action.action)}
              >
                {action.text}
              </button>
            ))}
          </div>

          <form className="chat-input-form" onSubmit={handleSend}>
            <input
              type="text"
              placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å..."
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              disabled={isTyping}
            />
            <button 
              type="submit" 
              disabled={!inputValue.trim() || isTyping}
              aria-label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
            >
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <path d="M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z" strokeWidth="2"/>
              </svg>
            </button>
          </form>
        </div>
      )}
    </div>
  );
}