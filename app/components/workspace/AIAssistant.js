'use client';

import { useState, useRef, useEffect } from 'react';
import { useWorkspace } from './WorkspaceContext';

export default function AIAssistant() {
  const { addNotification, userProfile } = useWorkspace();
  const [isOpen, setIsOpen] = useState(false);
  const [selectedModel, setSelectedModel] = useState('gpt-4');
  const [showModelSelector, setShowModelSelector] = useState(false);
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: 'assistant',
      text: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å!',
      model: 'gpt-4'
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [apiError, setApiError] = useState(null);
  const messagesEndRef = useRef(null);

  const aiModels = [
    { 
      id: 'gpt-4', 
      name: 'GPT-4', 
      provider: 'OpenAI',
      description: '–°–∞–º–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á',
      icon: 'üß†',
      status: 'active'
    },
    { 
      id: 'claude-3', 
      name: 'Claude 3', 
      provider: 'Anthropic',
      description: '–û—Ç–ª–∏—á–∞–µ—Ç—Å—è —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é',
      icon: 'üéØ',
      status: 'active'
    },
    { 
      id: 'gemini-pro', 
      name: 'Gemini Pro', 
      provider: 'Google',
      description: '–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö',
      icon: '‚ö°',
      status: 'active'
    }
  ];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (showModelSelector && !event.target.closest('.ai-model-selector')) {
        setShowModelSelector(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showModelSelector]);

  const handleSend = async (e) => {
    e.preventDefault();
    if (!inputValue.trim()) return;

    const userMessage = {
      id: Date.now(),
      type: 'user',
      text: inputValue
    };

    setMessages(prev => [...prev, userMessage]);
    const currentInput = inputValue;
    setInputValue('');
    setIsTyping(true);
    setApiError(null);

    try {
      // –í—ã–∑—ã–≤–∞–µ–º API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
      const response = await fetch('/api/ai/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: selectedModel,
          message: currentInput,
          context: 'business_dashboard',
          history: messages.slice(-5)
        })
      });

      if (!response.ok) {
        throw new Error(`API Error: ${response.status}`);
      }

      const data = await response.json();

      const aiMessage = {
        id: Date.now() + 1,
        type: 'assistant',
        text: data.response || '–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!',
        model: selectedModel
      };

      setMessages(prev => [...prev, aiMessage]);
      
    } catch (error) {
      console.error('AI API Error:', error);
      setApiError(error.message);
      
      // Fallback –∫ mock –æ—Ç–≤–µ—Ç–∞–º –ø—Ä–∏ –æ—à–∏–±–∫–µ API
      const modelResponses = {
        'gpt-4': '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ... –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—é - –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞!',
        'claude-3': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å: –≤–∞—à–∏ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç. –ü—Ä–µ–¥–ª–∞–≥–∞—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ—Ä–æ–Ω–∫—É –ø—Ä–æ–¥–∞–∂.',
        'gemini-pro': '‚ö° –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑: –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ SEO –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ 40%!'
      };

      const aiMessage = {
        id: Date.now() + 1,
        type: 'assistant',
        text: modelResponses[selectedModel] || '–í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...',
        model: selectedModel,
        isOffline: true
      };

      setMessages(prev => [...prev, aiMessage]);
    } finally {
      setIsTyping(false);

      // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      if (!isOpen) {
        addNotification({
          id: Date.now(),
          type: 'info',
          title: 'AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç',
          message: '–£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          timestamp: new Date()
        });
      }
    }
  };

  const quickActions = [
    { id: 1, text: '–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç', action: 'report' },
    { id: 2, text: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö', action: 'analyze' },
    { id: 3, text: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', action: 'recommend' },
    { id: 4, text: '–ü–æ–º–æ—â—å', action: 'help' }
  ];

  const handleQuickAction = (action) => {
    const actionTexts = {
      report: '–°–æ–∑–¥–∞–π—Ç–µ –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü',
      analyze: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π',
      recommend: '–î–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–Ω–≤–µ—Ä—Å–∏–∏',
      help: '–ö–∞–∫ –º–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ?'
    };
    
    setInputValue(actionTexts[action]);
  };

  return (
    <div className="ai-assistant-new">
      <button 
        className="ai-assistant-trigger-new"
        onClick={() => setIsOpen(!isOpen)}
        aria-label="AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
      >
        {isOpen ? '‚úï' : 'ü§ñ'}
      </button>

      {isOpen && (
        <div className="ai-chat-window-new">
          <div className="ai-chat-header-new">
            {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Ç–∞—Ç—É—Å */}
            <div className="ai-header-left">
              <h3>AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</h3>
              <span className="ai-status">
                <span className={`ai-status-dot ${apiError ? 'error' : 'online'}`}></span>
                {apiError ? '–ê–≤—Ç–æ–Ω–æ–º–Ω–æ' : '–û–Ω–ª–∞–π–Ω'}
              </span>
            </div>
            
            {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å - —Å–µ–ª–µ–∫—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π */}
            <div className="ai-header-center">
              <div className="ai-model-selector">
                <button 
                  className="ai-current-model"
                  onClick={() => setShowModelSelector(!showModelSelector)}
                >
                  <span className="ai-model-icon">
                    {aiModels.find(m => m.id === selectedModel)?.icon}
                  </span>
                  <span className="ai-model-name">
                    {aiModels.find(m => m.id === selectedModel)?.name}
                  </span>
                  <span className="ai-dropdown-arrow">‚ñº</span>
                </button>
                
                {showModelSelector && (
                  <div className="ai-model-dropdown">
                    {aiModels.map(model => (
                      <button
                        key={model.id}
                        className={`ai-model-option ${selectedModel === model.id ? 'active' : ''}`}
                        onClick={() => {
                          setSelectedModel(model.id);
                          setShowModelSelector(false);
                        }}
                      >
                        <div className="ai-model-info">
                          <span className="ai-model-icon-large">{model.icon}</span>
                          <div className="ai-model-details">
                            <span className="ai-model-title">{model.name}</span>
                            <span className="ai-model-provider">{model.provider}</span>
                          </div>
                        </div>
                        <span className="ai-model-status">‚óè</span>
                      </button>
                    ))}
                  </div>
                )}
              </div>
            </div>
            
            {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
            <button 
              className="ai-chat-close-new"
              onClick={() => setIsOpen(false)}
              aria-label="–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç"
              title="–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç"
            >
              <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M18 6L6 18M6 6l12 12"/>
              </svg>
            </button>
          </div>

          {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
          <div className="ai-chat-messages-new">
            {messages.map(message => (
              <div 
                key={message.id} 
                className={`ai-chat-message ${message.type} ${message.isOffline ? 'offline' : ''}`}
              >
                <div className="ai-message-avatar">
                  {message.type === 'assistant' ? 
                    (message.model ? aiModels.find(m => m.id === message.model)?.icon || 'ü§ñ' : 'ü§ñ') : 
                    (userProfile?.avatar || 'üë§')
                  }
                </div>
                <div className="ai-message-content">
                  {message.type === 'assistant' && message.model && (
                    <div className="ai-message-model">
                      {aiModels.find(m => m.id === message.model)?.name}
                      {message.isOffline && <span className="ai-offline-badge">–ê–≤—Ç–æ–Ω–æ–º–Ω–æ</span>}
                    </div>
                  )}
                  <p>{message.text}</p>
                </div>
              </div>
            ))}
            {isTyping && (
              <div className="ai-chat-message assistant">
                <div className="ai-message-avatar">ü§ñ</div>
                <div className="ai-message-content ai-typing">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
          <div className="ai-quick-actions-new">
            {quickActions.map(action => (
              <button
                key={action.id}
                className="ai-quick-action-chip"
                onClick={() => handleQuickAction(action.action)}
              >
                {action.text}
              </button>
            ))}
          </div>

          {/* –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ */}
          <form className="ai-chat-input-form-new" onSubmit={handleSend}>
            <input
              type="text"
              placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å..."
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              disabled={isTyping}
            />
            <button 
              type="submit" 
              disabled={!inputValue.trim() || isTyping}
              aria-label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
            >
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <path d="M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z" strokeWidth="2"/>
              </svg>
            </button>
          </form>
        </div>
      )}
    </div>
  );
}