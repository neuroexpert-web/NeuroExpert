'use client';

import { useState, useEffect, useCallback, useRef } from 'react';
import dynamic from 'next/dynamic';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const SmartCustomerChat = dynamic(() => import('../SmartCustomerChat'), {
  ssr: false,
  loading: () => <div>–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–∞...</div>
});

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–∏—Å–∫–∞
const SearchBar = ({ onSearch }) => {
  const [query, setQuery] = useState('');

  return (
    <div className="search-bar" role="search">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
        <circle cx="11" cy="11" r="8"/>
        <path d="m21 21-4.35-4.35"/>
      </svg>
      <input
        type="search"
        placeholder="–ü–æ–∏—Å–∫ –ø–æ —Å–∏—Å—Ç–µ–º–µ..."
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        onKeyDown={(e) => e.key === 'Enter' && onSearch(query)}
        aria-label="–ü–æ–∏—Å–∫"
      />
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
const QuickActions = ({ openWindow }) => {
  const actions = [
    { id: 'report', icon: 'üìä', label: '–û—Ç—á–µ—Ç' },
    { id: 'request', icon: 'üìù', label: '–ó–∞—è–≤–∫–∞' },
    { id: 'chat', icon: 'üí¨', label: '–ß–∞—Ç' }
  ];

  return (
    <div className="quick-actions" role="toolbar">
      {actions.map(action => (
        <button
          key={action.id}
          onClick={() => openWindow(action.id)}
          className="quick-action-btn"
          aria-label={action.label}
          title={action.label}
        >
          <span>{action.icon}</span>
        </button>
      ))}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const NotificationCenter = () => {
  const [notifications, setNotifications] = useState([
    { id: 1, type: 'info', message: '–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤', time: '5 –º–∏–Ω –Ω–∞–∑–∞–¥' },
    { id: 2, type: 'success', message: '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', time: '15 –º–∏–Ω –Ω–∞–∑–∞–¥' },
    { id: 3, type: 'warning', message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ', time: '1 —á–∞—Å –Ω–∞–∑–∞–¥' }
  ]);
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="notification-center">
      <button 
        className="notification-btn"
        onClick={() => setIsOpen(!isOpen)}
        aria-label="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        aria-expanded={isOpen}
      >
        <span className="notification-badge">{notifications.length}</span>
        üîî
      </button>
      {isOpen && (
        <div className="notification-dropdown" role="region" aria-label="–°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π">
          <h4>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
          {notifications.map(notif => (
            <div key={notif.id} className={`notification-item ${notif.type}`}>
              <p>{notif.message}</p>
              <span className="notification-time">{notif.time}</span>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∏–¥–∂–µ—Ç–∞ KPI —Å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
const KPIWidget = ({ title, value, change, icon, updateInterval = 5000 }) => {
  const [currentValue, setCurrentValue] = useState(value);
  const [currentChange, setCurrentChange] = useState(change);

  useEffect(() => {
    const interval = setInterval(() => {
      // –°–∏–º—É–ª—è—Ü–∏—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      const fluctuation = (Math.random() - 0.5) * 10;
      const newValue = parseFloat(currentValue.replace(/[^0-9.-]+/g, ''));
      const updatedValue = (newValue + fluctuation).toFixed(1);
      const changeValue = ((fluctuation / newValue) * 100).toFixed(1);
      
      setCurrentValue(currentValue.includes('‚ÇΩ') ? `‚ÇΩ${updatedValue}M` : updatedValue);
      setCurrentChange(`${fluctuation > 0 ? '+' : ''}${changeValue}%`);
    }, updateInterval);

    return () => clearInterval(interval);
  }, [currentValue, updateInterval]);

  return (
    <div className="kpi-widget" role="article" aria-label={`KPI: ${title}`}>
      <div className="kpi-header">
        <span className="kpi-icon">{icon}</span>
        <h4>{title}</h4>
      </div>
      <div className="kpi-value">{currentValue}</div>
      <div className={`kpi-change ${parseFloat(currentChange) > 0 ? 'positive' : 'negative'}`}>
        {currentChange}
      </div>
      <div className="kpi-sparkline">
        <svg viewBox="0 0 100 40" className="sparkline">
          <path 
            d="M 0 30 Q 25 20 50 25 T 100 15" 
            fill="none" 
            stroke="currentColor" 
            strokeWidth="2"
          />
        </svg>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–∞—à–±–æ—Ä–¥–∞ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –≤–∏–¥–∂–µ—Ç–∞–º–∏
const DashboardWindow = ({ userPreferences }) => {
  const [widgets, setWidgets] = useState([
    { id: 'revenue', title: '–í—ã—Ä—É—á–∫–∞ –∑–∞ –º–µ—Å—è—Ü', value: '‚ÇΩ12.4M', change: '+24%', icon: 'üí∞', visible: true },
    { id: 'customers', title: '–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã', value: '3847', change: '+12%', icon: 'üë•', visible: true },
    { id: 'conversion', title: '–ö–æ–Ω–≤–µ—Ä—Å–∏—è', value: '4.2%', change: '-5%', icon: 'üìà', visible: true },
    { id: 'average', title: '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', value: '‚ÇΩ3220', change: '+8%', icon: 'üõí', visible: true },
    { id: 'tasks', title: '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏', value: '24', change: '+3%', icon: 'üìã', visible: true },
    { id: 'rating', title: '–†–µ–π—Ç–∏–Ω–≥', value: '4.8', change: '+0.2%', icon: '‚≠ê', visible: true }
  ]);

  const [isDragging, setIsDragging] = useState(null);

  const handleDragStart = (e, widgetId) => {
    setIsDragging(widgetId);
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  };

  const handleDrop = (e, targetId) => {
    e.preventDefault();
    if (isDragging && isDragging !== targetId) {
      const newWidgets = [...widgets];
      const dragIndex = newWidgets.findIndex(w => w.id === isDragging);
      const dropIndex = newWidgets.findIndex(w => w.id === targetId);
      const [removed] = newWidgets.splice(dragIndex, 1);
      newWidgets.splice(dropIndex, 0, removed);
      setWidgets(newWidgets);
    }
    setIsDragging(null);
  };

  return (
    <div className="dashboard-content">
      <div className="dashboard-header">
        <h3>–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</h3>
        <button className="customize-btn" aria-label="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏–¥–∂–µ—Ç—ã">
          ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å
        </button>
      </div>
      
      <div className="widgets-grid">
        {widgets.filter(w => w.visible).map(widget => (
          <div
            key={widget.id}
            draggable
            onDragStart={(e) => handleDragStart(e, widget.id)}
            onDragOver={handleDragOver}
            onDrop={(e) => handleDrop(e, widget.id)}
            className={`widget-container ${isDragging === widget.id ? 'dragging' : ''}`}
          >
            <KPIWidget {...widget} />
          </div>
        ))}
      </div>

      <div className="dashboard-charts">
        <div className="chart-container">
          <h4>–ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏ (Real-time)</h4>
          <canvas id="revenue-chart" className="chart-canvas"></canvas>
        </div>
        <div className="chart-container">
          <h4>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞</h4>
          <canvas id="traffic-chart" className="chart-canvas"></canvas>
        </div>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
const IntegrationsWindow = () => {
  const integrations = [
    { id: 'google', name: 'Google Analytics', status: 'connected', icon: 'üìä' },
    { id: 'yandex', name: '–Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞', status: 'connected', icon: 'üìà' },
    { id: 'telegram', name: 'Telegram Bot', status: 'disconnected', icon: 'üí¨' },
    { id: 'crm', name: 'amoCRM', status: 'connected', icon: 'ü§ù' },
    { id: 'payment', name: 'Stripe', status: 'disconnected', icon: 'üí≥' }
  ];

  return (
    <div className="integrations-content">
      <h3>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h3>
      <div className="integrations-grid">
        {integrations.map(integration => (
          <div key={integration.id} className="integration-card">
            <div className="integration-header">
              <span className="integration-icon">{integration.icon}</span>
              <h4>{integration.name}</h4>
            </div>
            <div className={`integration-status ${integration.status}`}>
              {integration.status === 'connected' ? 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ'}
            </div>
            <button className="integration-action">
              {integration.status === 'connected' ? '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å'}
            </button>
          </div>
        ))}
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π
const ActivityHistory = () => {
  const [activities] = useState([
    { id: 1, action: '–°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç', user: '–í—ã', time: '10:15', type: 'report' },
    { id: 2, action: '–ò–∑–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', user: '–ê–¥–º–∏–Ω', time: '09:45', type: 'settings' },
    { id: 3, action: '–î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç', user: '–ú–µ–Ω–µ–¥–∂–µ—Ä', time: '09:30', type: 'client' },
    { id: 4, action: '–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞', user: '–í—ã', time: '08:20', type: 'task' }
  ]);

  return (
    <div className="activity-history">
      <h4>–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π</h4>
      <div className="activity-list">
        {activities.map(activity => (
          <div key={activity.id} className="activity-item">
            <div className="activity-icon">{
              activity.type === 'report' ? 'üìä' :
              activity.type === 'settings' ? '‚öôÔ∏è' :
              activity.type === 'client' ? 'üë§' : '‚úì'
            }</div>
            <div className="activity-details">
              <p>{activity.action}</p>
              <span>{activity.user} ‚Ä¢ {activity.time}</span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–∫–Ω–∞ —Å –∏–∑–º–µ–Ω—è–µ–º—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
const ResizableWindow = ({ window, onClose, isActive, onActivate, onDrag, onResize, children }) => {
  const [isDragging, setIsDragging] = useState(false);
  const [isResizing, setIsResizing] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
  const [size, setSize] = useState(window.size);
  const windowRef = useRef(null);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleMouseDown = (e) => {
    if (e.target.className.includes('window-header')) {
      setIsDragging(true);
      setDragStart({
        x: e.clientX - window.position.x,
        y: e.clientY - window.position.y
      });
      onActivate();
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
  const handleResizeStart = (e) => {
    e.stopPropagation();
    setIsResizing(true);
    setDragStart({ x: e.clientX, y: e.clientY });
  };

  useEffect(() => {
    const handleMouseMove = (e) => {
      if (isDragging) {
        onDrag(window.id, {
          x: e.clientX - dragStart.x,
          y: e.clientY - dragStart.y
        });
      } else if (isResizing) {
        const newWidth = size.width + (e.clientX - dragStart.x);
        const newHeight = size.height + (e.clientY - dragStart.y);
        setSize({
          width: Math.max(300, newWidth),
          height: Math.max(200, newHeight)
        });
        setDragStart({ x: e.clientX, y: e.clientY });
        onResize(window.id, { width: newWidth, height: newHeight });
      }
    };

    const handleMouseUp = () => {
      setIsDragging(false);
      setIsResizing(false);
    };

    if (isDragging || isResizing) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
    }

    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, [isDragging, isResizing, dragStart, window.id, onDrag, onResize, size]);

  // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
  const handleKeyDown = (e) => {
    if (e.key === 'Escape') {
      onClose(window.id);
    } else if (e.ctrlKey || e.metaKey) {
      switch(e.key) {
        case 'w':
          e.preventDefault();
          onClose(window.id);
          break;
        case 'm':
          e.preventDefault();
          // –ú–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ
          break;
      }
    }
  };

  return (
    <div 
      ref={windowRef}
      className={`workspace-window ${isActive ? 'active' : ''}`}
      style={{
        left: window.position.x,
        top: window.position.y,
        width: size.width,
        height: size.height,
        zIndex: isActive ? 1000 : window.zIndex
      }}
      onMouseDown={handleMouseDown}
      onKeyDown={handleKeyDown}
      tabIndex={0}
      role="dialog"
      aria-label={window.title}
    >
      <div className="window-header" role="banner">
        <h3 className="window-title">{window.title}</h3>
        <div className="window-controls" role="toolbar">
          <button 
            className="window-control minimize" 
            onClick={() => {}} 
            aria-label="–°–≤–µ—Ä–Ω—É—Ç—å"
            title="–°–≤–µ—Ä–Ω—É—Ç—å (Alt+M)"
          >
            _
          </button>
          <button 
            className="window-control maximize" 
            onClick={() => {}}
            aria-label="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"
            title="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å (Alt+X)"
          >
            ‚ñ°
          </button>
          <button 
            className="window-control close" 
            onClick={(e) => {
              e.stopPropagation();
              onClose(window.id);
            }}
            aria-label="–ó–∞–∫—Ä—ã—Ç—å"
            title="–ó–∞–∫—Ä—ã—Ç—å (Ctrl+W)"
          >
            √ó
          </button>
        </div>
      </div>
      <div className="window-body" role="main">
        {children}
      </div>
      <div 
        className="window-resize-handle"
        onMouseDown={handleResizeStart}
        aria-label="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞"
      />
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ—Ñ–∏–ª—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è)
const ProfileProgress = ({ userRole, achievements }) => {
  const [level, setLevel] = useState(12);
  const [experience, setExperience] = useState(3450);
  const [nextLevelExp] = useState(5000);

  return (
    <div className="profile-progress">
      <div className="user-level">
        <span className="level-badge">–£—Ä–æ–≤–µ–Ω—å {level}</span>
        <div className="experience-bar">
          <div 
            className="experience-fill" 
            style={{ width: `${(experience / nextLevelExp) * 100}%` }}
          />
          <span className="experience-text">{experience} / {nextLevelExp} XP</span>
        </div>
      </div>
      <div className="achievements">
        <h5>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h5>
        <div className="achievement-badges">
          <span className="achievement" title="–ü–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç">üìä</span>
          <span className="achievement" title="100 –∫–ª–∏–µ–Ω—Ç–æ–≤">üë•</span>
          <span className="achievement" title="–ú–∞—Å—Ç–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏">üìà</span>
          <span className="achievement locked" title="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ">üîí</span>
        </div>
      </div>
    </div>
  );
};

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
export default function WorkspaceLayoutEnhanced() {
  const [windows, setWindows] = useState([]);
  const [activeWindow, setActiveWindow] = useState(null);
  const [userEmail, setUserEmail] = useState('');
  const [userRole] = useState('admin'); // admin, analyst, manager
  const [userPreferences, setUserPreferences] = useState({
    theme: 'dark',
    layout: 'default',
    widgets: ['revenue', 'customers', 'conversion', 'tasks']
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
  useEffect(() => {
    const savedSession = localStorage.getItem('workspace-session');
    if (savedSession) {
      const session = JSON.parse(savedSession);
      setWindows(session.windows || []);
      setUserPreferences(session.preferences || userPreferences);
    }

    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if ('Notification' in window && Notification.permission === 'default') {
      Notification.requestPermission();
    }

    // –°–∏–º—É–ª—è—Ü–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationInterval = setInterval(() => {
      if (Notification.permission === 'granted') {
        new Notification('NeuroExpert', {
          body: '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ',
          icon: '/favicon.ico'
        });
      }
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    return () => clearInterval(notificationInterval);
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  useEffect(() => {
    const session = {
      windows,
      preferences: userPreferences,
      timestamp: new Date().toISOString()
    };
    localStorage.setItem('workspace-session', JSON.stringify(session));
  }, [windows, userPreferences]);

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞
  const openWindow = useCallback((type) => {
    const windowConfigs = {
      dashboard: { title: 'üìä –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', size: { width: 800, height: 600 } },
      analytics: { title: 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', size: { width: 900, height: 650 } },
      tasks: { title: '‚úì –ó–∞–¥–∞—á–∏', size: { width: 600, height: 700 } },
      documents: { title: 'üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã', size: { width: 650, height: 500 } },
      integrations: { title: 'üîå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', size: { width: 700, height: 550 } },
      chat: { title: 'üí¨ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç', size: { width: 450, height: 650 } },
      report: { title: 'üìä –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç', size: { width: 700, height: 600 } },
      request: { title: 'üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', size: { width: 600, height: 500 } }
    };

    const config = windowConfigs[type] || { 
      title: type, 
      size: { width: 600, height: 500 } 
    };

    const newWindow = {
      id: Date.now(),
      type,
      title: config.title,
      position: { 
        x: 100 + (windows.length * 30) % 400, 
        y: 50 + (windows.length * 30) % 300 
      },
      size: config.size,
      zIndex: windows.length + 1
    };

    setWindows([...windows, newWindow]);
    setActiveWindow(newWindow.id);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞
    const event = new CustomEvent('userAction', { 
      detail: { action: 'openWindow', exp: 10 } 
    });
    window.dispatchEvent(event);
  }, [windows]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞
  const closeWindow = (id) => {
    setWindows(windows.filter(w => w.id !== id));
    if (activeWindow === id) {
      setActiveWindow(null);
    }
  };

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–∫–Ω–∞
  const handleDrag = (id, position) => {
    setWindows(windows.map(w => 
      w.id === id ? { ...w, position } : w
    ));
  };

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  const handleResize = (id, size) => {
    setWindows(windows.map(w => 
      w.id === id ? { ...w, size } : w
    ));
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
  const handleSearch = (query) => {
    console.log('–ü–æ–∏—Å–∫:', query);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
  const handleLogin = (e) => {
    e.preventDefault();
    if (userEmail) {
      // –í—Ö–æ–¥ –±–µ–∑ –ø–∞—Ä–æ–ª—è
      console.log('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è:', userEmail);
    }
  };

  // –†–µ–Ω–¥–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–∫–Ω–∞
  const renderWindowContent = (window) => {
    switch (window.type) {
      case 'dashboard':
        return <DashboardWindow userPreferences={userPreferences} />;
      case 'analytics':
        return <AnalyticsWindow />;
      case 'tasks':
        return <TasksWindow />;
      case 'documents':
        return <DocumentsWindow />;
      case 'integrations':
        return <IntegrationsWindow />;
      case 'chat':
        return <ChatWindow />;
      case 'report':
        return <ReportWindow />;
      case 'request':
        return <RequestWindow />;
      default:
        return <div>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–∫–Ω–∞</div>;
    }
  };

  // –≠–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞ (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
  if (!userEmail) {
    return (
      <div className="workspace-login">
        <div className="login-container">
          <div className="login-header">
            <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="url(#gradient)">
              <defs>
                <linearGradient id="gradient">
                  <stop offset="0%" stopColor="#8b5cf6"/>
                  <stop offset="100%" stopColor="#3b82f6"/>
                </linearGradient>
              </defs>
              <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5" strokeWidth="2"/>
            </svg>
            <h1>NeuroExpert Workspace</h1>
            <p>–ú—É–ª—å—Ç–∏–æ–∫–æ–Ω–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–æ–º</p>
          </div>
          
          <form onSubmit={handleLogin} className="login-form">
            <div className="form-group">
              <label htmlFor="email">Email –¥–ª—è –≤—Ö–æ–¥–∞</label>
              <input
                id="email"
                type="email"
                placeholder="your@email.com"
                value={userEmail}
                onChange={(e) => setUserEmail(e.target.value)}
                required
                autoFocus
                aria-label="Email –∞–¥—Ä–µ—Å"
              />
            </div>
            <button type="submit" className="login-btn">
              –í–æ–π—Ç–∏ –≤ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
            </button>
            <p className="demo-hint">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <circle cx="12" cy="12" r="10"/>
                <path d="M12 16v-4M12 8h.01"/>
              </svg>
              –î–ª—è –¥–µ–º–æ –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—é–±–æ–π email
            </p>
          </form>
        </div>
      </div>
    );
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  return (
    <div className="workspace-enhanced" role="application" aria-label="NeuroExpert Workspace">
      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å */}
      <header className="workspace-header" role="banner">
        <div className="header-left">
          <div className="workspace-logo">
            <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5" strokeWidth="2"/>
            </svg>
            <span>NeuroExpert</span>
          </div>
          <SearchBar onSearch={handleSearch} />
        </div>
        
        <div className="header-center">
          <QuickActions openWindow={openWindow} />
        </div>

        <div className="header-right">
          <NotificationCenter />
          <div className="user-menu">
            <button className="user-menu-btn" aria-label="–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
              <div className="user-avatar">{userEmail.charAt(0).toUpperCase()}</div>
              <span className="user-name">{userEmail}</span>
              <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <polyline points="6 9 12 15 18 9"/>
              </svg>
            </button>
          </div>
        </div>
      </header>

      <div className="workspace-body">
        {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
        <aside className="workspace-sidebar" role="navigation" aria-label="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é">
          <nav className="sidebar-nav">
            <button 
              onClick={() => openWindow('dashboard')} 
              className="nav-btn"
              aria-label="–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å"
            >
              <span>üìä</span>
              <span className="nav-label">–î–∞—à–±–æ—Ä–¥</span>
            </button>
            <button 
              onClick={() => openWindow('analytics')} 
              className="nav-btn"
              aria-label="–û—Ç–∫—Ä—ã—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É"
            >
              <span>üìà</span>
              <span className="nav-label">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</span>
            </button>
            <button 
              onClick={() => openWindow('tasks')} 
              className="nav-btn"
              aria-label="–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á–∏"
            >
              <span>‚úì</span>
              <span className="nav-label">–ó–∞–¥–∞—á–∏</span>
            </button>
            <button 
              onClick={() => openWindow('documents')} 
              className="nav-btn"
              aria-label="–û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã"
            >
              <span>üìÅ</span>
              <span className="nav-label">–î–æ–∫—É–º–µ–Ω—Ç—ã</span>
            </button>
            <button 
              onClick={() => openWindow('integrations')} 
              className="nav-btn"
              aria-label="–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
            >
              <span>üîå</span>
              <span className="nav-label">–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</span>
            </button>
            <button 
              onClick={() => openWindow('chat')} 
              className="nav-btn"
              aria-label="–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
            >
              <span>üí¨</span>
              <span className="nav-label">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</span>
            </button>
          </nav>

          <div className="sidebar-footer">
            <ProfileProgress userRole={userRole} />
            <ActivityHistory />
          </div>
        </aside>

        {/* –†–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å */}
        <main className="workspace-main" role="main">
          <div className="workspace-desktop">
            {windows.length === 0 && (
              <div className="empty-desktop">
                <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ!</h2>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –∏–∑ –º–µ–Ω—é —Å–ª–µ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</p>
                <div className="desktop-hints">
                  <div className="hint">
                    <kbd>Ctrl</kbd> + <kbd>N</kbd> - –ù–æ–≤–æ–µ –æ–∫–Ω–æ
                  </div>
                  <div className="hint">
                    <kbd>Ctrl</kbd> + <kbd>W</kbd> - –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
                  </div>
                  <div className="hint">
                    <kbd>Alt</kbd> + <kbd>Tab</kbd> - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–∫–æ–Ω
                  </div>
                </div>
              </div>
            )}
            
            {windows.map(window => (
              <ResizableWindow
                key={window.id}
                window={window}
                isActive={activeWindow === window.id}
                onClose={closeWindow}
                onActivate={() => setActiveWindow(window.id)}
                onDrag={handleDrag}
                onResize={handleResize}
              >
                {renderWindowContent(window)}
              </ResizableWindow>
            ))}
          </div>
        </main>
      </div>

      {/* –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ */}
      <footer className="workspace-status" role="contentinfo">
        <div className="status-left">
          <span className="status-item">
            <span className="status-dot online"></span>
            –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
          </span>
          <span className="status-item">
            –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new Date().toLocaleTimeString()}
          </span>
        </div>
        <div className="status-right">
          <span className="status-item">
            –†–æ–ª—å: {userRole === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : 
                   userRole === 'analyst' ? '–ê–Ω–∞–ª–∏—Ç–∏–∫' : '–ú–µ–Ω–µ–¥–∂–µ—Ä'}
          </span>
          <button 
            className="logout-btn"
            onClick={() => setUserEmail('')}
            aria-label="–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
          >
            –í—ã–π—Ç–∏
          </button>
        </div>
      </footer>
    </div>
  );
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
const AnalyticsWindow = () => {
  return <div>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)</div>;
};

const TasksWindow = () => {
  return <div>–ó–∞–¥–∞—á–∏ (–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)</div>;
};

const DocumentsWindow = () => {
  return <div>–î–æ–∫—É–º–µ–Ω—Ç—ã (–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)</div>;
};

const ChatWindow = () => {
  return <SmartCustomerChat />;
};

const ReportWindow = () => {
  return (
    <div className="report-content">
      <h3>–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞</h3>
      <form className="report-form">
        <div className="form-group">
          <label>–¢–∏–ø –æ—Ç—á–µ—Ç–∞</label>
          <select>
            <option>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç</option>
            <option>–û—Ç—á–µ—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º</option>
            <option>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç</option>
          </select>
        </div>
        <div className="form-group">
          <label>–ü–µ—Ä–∏–æ–¥</label>
          <input type="date" /> - <input type="date" />
        </div>
        <button type="submit">–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç</button>
      </form>
    </div>
  );
};

const RequestWindow = () => {
  return (
    <div className="request-content">
      <h3>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</h3>
      <form className="request-form">
        <div className="form-group">
          <label>–¢–µ–º–∞ –∑–∞—è–≤–∫–∏</label>
          <input type="text" placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ" />
        </div>
        <div className="form-group">
          <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
          <textarea rows="5" placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ..."></textarea>
        </div>
        <div className="form-group">
          <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
          <select>
            <option>–ù–∏–∑–∫–∏–π</option>
            <option>–°—Ä–µ–¥–Ω–∏–π</option>
            <option>–í—ã—Å–æ–∫–∏–π</option>
          </select>
        </div>
        <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</button>
      </form>
    </div>
  );
};