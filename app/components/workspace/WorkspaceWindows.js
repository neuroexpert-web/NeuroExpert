'use client';

import { useState, useEffect } from 'react';
import { useWorkspace } from './WorkspaceContext';

export default function WorkspaceWindows() {
  const { windows, activeWindow, setActiveWindow, closeWindow, updateWindow } = useWorkspace();
  const [draggingWindow, setDraggingWindow] = useState(null);
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });
  const [resizingWindow, setResizingWindow] = useState(null);
  const [resizeStart, setResizeStart] = useState({ x: 0, y: 0, width: 0, height: 0 });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI –ø–æ–¥–¥–µ—Ä–∂–∫–µ
  const handleSupportQuery = async (windowId, query) => {
    if (!query || !query.trim()) return;

    const chatContainer = document.getElementById(`chat-${windowId}`);
    const typingIndicator = document.getElementById(`typing-${windowId}`);
    
    if (!chatContainer) return;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessage = document.createElement('div');
    userMessage.className = 'user-message';
    userMessage.innerHTML = `
      <div class="message-avatar">üë§</div>
      <div class="message-content">
        <p>${query}</p>
      </div>
    `;
    chatContainer.appendChild(userMessage);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
    if (typingIndicator) {
      typingIndicator.style.display = 'flex';
    }

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    chatContainer.scrollTop = chatContainer.scrollHeight;

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏
      const response = await fetch('/api/assistant', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: query,
          context: 'support',
          systemPrompt: `–¢—ã ‚Äî –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ NeuroExpert, —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–∫–æ–º—ã–π —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.

üéØ –¢–í–û–Ø –†–û–õ–¨: –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ —Ä–µ—à–∞–µ—à—å –∑–∞–¥–∞—á–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –º–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ—à—å value –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.

üèóÔ∏è –≠–ö–û–°–ò–°–¢–ï–ú–ê NEUROEXPERT (8 –º–æ–¥—É–ª–µ–π):
1. AnalyticsDashboard - –∂–∏–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, real-time WebSocket, KPI, —Ñ–∏–ª—å—Ç—Ä—ã
2. ROICalculator - —Ä–∞—Å—á–µ—Ç –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏, —Å—Ü–µ–Ω–∞—Ä–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ç—á–µ—Ç—ã  
3. AI –£–ø—Ä–∞–≤–ª—è—é—â–∏–π - multi-context responses, Gemini API, conversation management
4. SolutionsManager - –∫–∞—Ç–∞–ª–æ–≥ —Ä–µ—à–µ–Ω–∏–π, –º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
5. SecuritySection - enterprise –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, compliance, audit logs
6. CRMAnalytics - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ CRM (–ë–∏—Ç—Ä–∏–∫—Å24, amoCRM, HubSpot), –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
7. WorkspaceLayout - –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, multi-window interface, collaboration
8. Enterprise Support - —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7, knowledge base, professional services

üí° –ê–õ–ì–û–†–ò–¢–ú –ü–û–ú–û–©–ò:
1. –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ‚Üí –í –∫–∞–∫–æ–º –º–æ–¥—É–ª–µ –ø—Ä–æ–±–ª–µ–º–∞? –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–æ—Å—å?
2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ ‚Üí –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ + –ø—Ä–æ–≤–µ—Ä–∫–∞ + –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
3. –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–º–æ—â—å ‚Üí –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

üîß –ß–ê–°–¢–´–ï –ö–ï–ô–°–´:
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: API –∫–ª—é—á–∏, field mapping, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: tracking –∫–æ–¥—ã, —Ñ–∏–ª—å—Ç—Ä—ã, WebSocket connections
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: cache, CDN, browser optimization
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: 2FA, access control, compliance

üé≠ –°–¢–ò–õ–¨: –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –æ–±—É—á–∞—é—â–∏–π –ø–æ–¥—Ö–æ–¥. 
–ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç actionable steps –∏ –ø—Ä–µ–¥–≤–æ—Å—Ö–∏—â–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.`
        }),
      });

      const data = await response.json();
      
      // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
      if (typingIndicator) {
        typingIndicator.style.display = 'none';
      }

      if (data.success) {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI
        const aiMessage = document.createElement('div');
        aiMessage.className = 'ai-message';
        aiMessage.innerHTML = `
          <div class="message-avatar">ü§ñ</div>
          <div class="message-content">
            <p>${data.response.replace(/\n/g, '<br>')}</p>
            ${generateQuickActions(query, windowId)}
          </div>
        `;
        chatContainer.appendChild(aiMessage);
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        const errorMessage = document.createElement('div');
        errorMessage.className = 'ai-message';
        errorMessage.innerHTML = `
          <div class="message-avatar">‚ö†Ô∏è</div>
          <div class="message-content">
            <p>–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</p>
            <div class="quick-actions">
              <button class="quick-btn contact-support">
                üìß –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
              </button>
              <button class="quick-btn" data-query="–ü–æ–º–æ—â—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π" data-window-id="${windowId}">
                üîß –û–±—â–∞—è –ø–æ–º–æ—â—å
              </button>
            </div>
          </div>
        `;
        chatContainer.appendChild(errorMessage);
      }
    } catch (error) {
      console.error('Support AI Error:', error);
      
      // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
      if (typingIndicator) {
        typingIndicator.style.display = 'none';
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º fallback –æ—Ç–≤–µ—Ç
      const fallbackMessage = document.createElement('div');
      fallbackMessage.className = 'ai-message';
      fallbackMessage.innerHTML = `
        <div class="message-avatar">ü§ñ</div>
        <div class="message-content">
          <p>–°–µ–π—á–∞—Å AI –ø–æ–º–æ—â–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤:</p>
          <div class="quick-actions">
            <button class="quick-btn open-docs">
              üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
            </button>
            <button class="quick-btn open-faq">
              ‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            </button>
            <button class="quick-btn contact-support">
              üìß Email –ø–æ–¥–¥–µ—Ä–∂–∫–∞
            </button>
            <button class="quick-btn open-telegram">
              üí¨ Telegram —á–∞—Ç
            </button>
          </div>
        </div>
      `;
      chatContainer.appendChild(fallbackMessage);
    }

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    setTimeout(() => {
      chatContainer.scrollTop = chatContainer.scrollHeight;
    }, 100);
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π  
  const generateQuickActions = (query, windowId) => {
    const lowerQuery = query.toLowerCase();
    let actions = '';

    if (lowerQuery.includes('–∏–Ω—Ç–µ–≥—Ä–∞—Ü') || lowerQuery.includes('–ø–æ–¥–∫–ª—é—á')) {
      actions = `
        <div class="quick-actions">
          <button class="quick-btn" data-query="–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å CRM?" data-window-id="${windowId}">
            üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ CRM
          </button>
          <button class="quick-btn" data-query="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π" data-window-id="${windowId}">
            üîë API –∫–ª—é—á–∏
          </button>
        </div>`;
    } else if (lowerQuery.includes('–∞–Ω–∞–ª–∏—Ç–∏–∫') || lowerQuery.includes('–¥–∞–Ω–Ω')) {
      actions = `
        <div class="quick-actions">
          <button class="quick-btn" data-query="–ü–æ—á–µ–º—É –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏?" data-window-id="${windowId}">
            üìä –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏
          </button>
          <button class="quick-btn" data-query="–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—á–µ—Ç—ã?" data-window-id="${windowId}">
            üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
          </button>
        </div>`;
    } else if (lowerQuery.includes('–ø—Ä–æ–∏–∑–≤–æ–¥') || lowerQuery.includes('–º–µ–¥–ª–µ–Ω')) {
      actions = `
        <div class="quick-actions">
          <button class="quick-btn" data-query="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏" data-window-id="${windowId}">
            ‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
          </button>
          <button class="quick-btn" data-query="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π" data-window-id="${windowId}">
            üíª –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
          </button>
        </div>`;
    }

    return actions;
  };

  // Event delegation –¥–ª—è quick buttons
  useEffect(() => {
    const handleQuickBtnClick = (e) => {
      if (e.target.classList.contains('quick-btn')) {
        // Support chat queries
        const query = e.target.getAttribute('data-query');
        const windowId = e.target.getAttribute('data-window-id');
        if (query && windowId) {
          handleSupportQuery(parseInt(windowId), query);
          return;
        }

        // Special actions
        if (e.target.classList.contains('contact-support')) {
          window.location.href = 'mailto:support@neuroexpert.ai';
        } else if (e.target.classList.contains('open-docs')) {
          window.open('/docs', '_blank');
        } else if (e.target.classList.contains('open-faq')) {
          window.open('/faq', '_blank');
        } else if (e.target.classList.contains('open-telegram')) {
          window.open('https://t.me/neuroexpert_support', '_blank');
        }
      }
    };

    document.addEventListener('click', handleQuickBtnClick);
    return () => document.removeEventListener('click', handleQuickBtnClick);
  }, []);

  const handleWindowMouseDown = (e, windowId) => {
    const window = windows.find(w => w.id === windowId);
    setDragOffset({
      x: e.clientX - window.position.x,
      y: e.clientY - window.position.y
    });
    setDraggingWindow(windowId);
    setActiveWindow(windowId);
  };

  const handleResizeMouseDown = (e, windowId) => {
    e.stopPropagation();
    const window = windows.find(w => w.id === windowId);
    setResizeStart({
      x: e.clientX,
      y: e.clientY,
      width: window.size.width,
      height: window.size.height
    });
    setResizingWindow(windowId);
  };

  const handleMouseMove = (e) => {
    if (draggingWindow) {
      updateWindow(draggingWindow, {
        position: {
          x: e.clientX - dragOffset.x,
          y: e.clientY - dragOffset.y
        }
      });
    } else if (resizingWindow) {
      const deltaX = e.clientX - resizeStart.x;
      const deltaY = e.clientY - resizeStart.y;
      updateWindow(resizingWindow, {
        size: {
          width: Math.max(300, resizeStart.width + deltaX),
          height: Math.max(200, resizeStart.height + deltaY)
        }
      });
    }
  };

  const handleMouseUp = () => {
    setDraggingWindow(null);
    setResizingWindow(null);
  };

  useEffect(() => {
    if (draggingWindow || resizingWindow) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
      return () => {
        document.removeEventListener('mousemove', handleMouseMove);
        document.removeEventListener('mouseup', handleMouseUp);
      };
    }
  }, [draggingWindow, resizingWindow, dragOffset, resizeStart]);

  const renderWindowContent = (window) => {
    switch (window.type) {
      case 'analytics':
        return (
          <div className="window-content analytics">
            <h2>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</h2>
            <div className="analytics-grid">
              <div className="metric-card">
                <h3>–ö–æ–Ω–≤–µ—Ä—Å–∏—è</h3>
                <div className="metric-value">3.8%</div>
                <div className="metric-chart">üìà</div>
              </div>
              <div className="metric-card">
                <h3>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫</h3>
                <div className="metric-value">15,420‚ÇΩ</div>
                <div className="metric-chart">üìä</div>
              </div>
            </div>
          </div>
        );
      
      case 'tasks':
        return (
          <div className="window-content tasks">
            <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏</h2>
            <div className="task-list">
              <div className="task-item">
                <input type="checkbox" id="task1" />
                <label htmlFor="task1">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—á–µ—Ç—ã –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª</label>
                <span className="task-priority high">–í—ã—Å–æ–∫–∏–π</span>
              </div>
              <div className="task-item">
                <input type="checkbox" id="task2" />
                <label htmlFor="task2">–û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é API</label>
                <span className="task-priority medium">–°—Ä–µ–¥–Ω–∏–π</span>
              </div>
            </div>
            {window.data?.mode === 'create' && (
              <form className="task-form">
                <input type="text" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" />
                <textarea placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"></textarea>
                <button type="submit">–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É</button>
              </form>
            )}
          </div>
        );
      
      case 'documents':
        return (
          <div className="window-content documents">
            <h2>–î–æ–∫—É–º–µ–Ω—Ç—ã</h2>
            <div className="document-list">
              <div className="document-item">
                <span className="doc-icon">üìÑ</span>
                <div className="doc-info">
                  <h4>–û—Ç—á–µ—Ç Q4 2024.pdf</h4>
                  <p>–û–±–Ω–æ–≤–ª–µ–Ω: 2 –¥–Ω—è –Ω–∞–∑–∞–¥</p>
                </div>
                <button className="doc-action">–°–∫–∞—á–∞—Ç—å</button>
              </div>
              <div className="document-item">
                <span className="doc-icon">üìä</span>
                <div className="doc-info">
                  <h4>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂.xlsx</h4>
                  <p>–û–±–Ω–æ–≤–ª–µ–Ω: 1 –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥</p>
                </div>
                <button className="doc-action">–û—Ç–∫—Ä—ã—Ç—å</button>
              </div>
            </div>
          </div>
        );
      
      case 'support':
        return (
          <div className="window-content support">
            <div className="support-header">
              <h2>ü§ñ AI –ü–æ–¥–¥–µ—Ä–∂–∫–∞</h2>
              <p>–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ NeuroExpert –≥–æ—Ç–æ–≤ —Ä–µ—à–∏—Ç—å –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã</p>
            </div>
            
            <div className="ai-support-chat">
              <div className="chat-messages" id={`chat-${window.id}`}>
                <div className="ai-message">
                  <div className="message-avatar">ü§ñ</div>
                  <div className="message-content">
                    <p>–ü—Ä–∏–≤–µ—Ç! –Ø AI –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ NeuroExpert. –ö–∞–∫ –º–æ–≥—É –ø–æ–º–æ—á—å?</p>
                    <div className="quick-actions">
                      <button 
                        className="quick-btn"
                        data-query="–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏?"
                        data-window-id={window.id}
                      >
                        üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
                      </button>
                      <button 
                        className="quick-btn"
                        data-query="–ü—Ä–æ–±–ª–µ–º—ã —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"
                        data-window-id={window.id}
                      >
                        üìä –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
                      </button>
                      <button 
                        className="quick-btn"
                        data-query="–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å?"
                        data-window-id={window.id}
                      >
                        ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                      </button>
                      <button 
                        className="quick-btn"
                        data-query="–í–æ–ø—Ä–æ—Å—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
                        data-window-id={window.id}
                      >
                        üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                      </button>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="chat-input-container">
                <div className="typing-indicator" id={`typing-${window.id}`} style={{display: 'none'}}>
                  <span>AI –ø–µ—á–∞—Ç–∞–µ—Ç</span>
                  <div className="typing-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
                <div className="chat-input-wrapper">
                  <input 
                    type="text" 
                    className="chat-input"
                    placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å..."
                    onKeyPress={(e) => {
                      if (e.key === 'Enter') {
                        handleSupportQuery(window.id, e.target.value);
                        e.target.value = '';
                      }
                    }}
                  />
                  <button 
                    className="send-btn"
                    onClick={(e) => {
                      const input = e.target.parentElement.querySelector('.chat-input');
                      if (input.value.trim()) {
                        handleSupportQuery(window.id, input.value);
                        input.value = '';
                      }
                    }}
                  >
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                      <path d="M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z" strokeWidth="2"/>
                    </svg>
                  </button>
                </div>
              </div>
            </div>

            <style jsx>{`
              .support-header {
                text-align: center;
                padding: 20px;
                border-bottom: 1px solid rgba(255, 255, 255, 0.1);
                margin-bottom: 20px;
              }

              .support-header h2 {
                color: #9945ff;
                margin-bottom: 8px;
                font-size: 20px;
              }

              .support-header p {
                color: rgba(255, 255, 255, 0.7);
                font-size: 14px;
                margin: 0;
              }

              .ai-support-chat {
                display: flex;
                flex-direction: column;
                height: calc(100% - 120px);
              }

              .chat-messages {
                flex: 1;
                overflow-y: auto;
                padding: 0 20px;
                margin-bottom: 20px;
              }

              .ai-message {
                display: flex;
                gap: 12px;
                margin-bottom: 20px;
                animation: slideInLeft 0.3s ease;
              }

              .user-message {
                display: flex;
                gap: 12px;
                margin-bottom: 20px;
                flex-direction: row-reverse;
                animation: slideInRight 0.3s ease;
              }

              .message-avatar {
                width: 36px;
                height: 36px;
                border-radius: 50%;
                background: linear-gradient(135deg, #9945ff, #7c3aed);
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 18px;
                flex-shrink: 0;
              }

              .user-message .message-avatar {
                background: linear-gradient(135deg, #06b6d4, #0891b2);
              }

              .message-content {
                flex: 1;
                background: rgba(153, 69, 255, 0.1);
                border: 1px solid rgba(153, 69, 255, 0.2);
                border-radius: 12px;
                padding: 16px;
                color: white;
              }

              .user-message .message-content {
                background: rgba(6, 182, 212, 0.1);
                border-color: rgba(6, 182, 212, 0.2);
              }

              .message-content p {
                margin: 0 0 12px 0;
                line-height: 1.5;
              }

              .quick-actions {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 8px;
                margin-top: 16px;
              }

              .quick-btn {
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid rgba(255, 255, 255, 0.1);
                border-radius: 8px;
                padding: 8px 12px;
                color: rgba(255, 255, 255, 0.8);
                font-size: 12px;
                cursor: pointer;
                transition: all 0.2s ease;
                text-align: left;
              }

              .quick-btn:hover {
                background: rgba(255, 255, 255, 0.1);
                border-color: rgba(255, 255, 255, 0.2);
                color: white;
                transform: translateY(-1px);
              }

              .chat-input-container {
                border-top: 1px solid rgba(255, 255, 255, 0.1);
                padding: 16px 20px;
              }

              .typing-indicator {
                display: flex;
                align-items: center;
                gap: 8px;
                color: rgba(255, 255, 255, 0.6);
                font-size: 14px;
                margin-bottom: 12px;
              }

              .typing-dots {
                display: flex;
                gap: 4px;
              }

              .typing-dots span {
                width: 6px;
                height: 6px;
                border-radius: 50%;
                background: #9945ff;
                animation: typingBounce 1.4s infinite ease-in-out;
              }

              .typing-dots span:nth-child(1) { animation-delay: -0.32s; }
              .typing-dots span:nth-child(2) { animation-delay: -0.16s; }

              .chat-input-wrapper {
                display: flex;
                gap: 12px;
                align-items: center;
              }

              .chat-input {
                flex: 1;
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid rgba(255, 255, 255, 0.1);
                border-radius: 12px;
                padding: 12px 16px;
                color: white;
                font-size: 14px;
                outline: none;
                transition: all 0.2s ease;
              }

              .chat-input::placeholder {
                color: rgba(255, 255, 255, 0.5);
              }

              .chat-input:focus {
                border-color: #9945ff;
                box-shadow: 0 0 0 3px rgba(153, 69, 255, 0.1);
              }

              .send-btn {
                width: 44px;
                height: 44px;
                border-radius: 50%;
                background: linear-gradient(135deg, #9945ff, #7c3aed);
                border: none;
                color: white;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.2s ease;
              }

              .send-btn:hover {
                transform: scale(1.05);
                box-shadow: 0 4px 12px rgba(153, 69, 255, 0.3);
              }

              @keyframes slideInLeft {
                from {
                  opacity: 0;
                  transform: translateX(-20px);
                }
                to {
                  opacity: 1;
                  transform: translateX(0);
                }
              }

              @keyframes slideInRight {
                from {
                  opacity: 0;
                  transform: translateX(20px);
                }
                to {
                  opacity: 1;
                  transform: translateX(0);
                }
              }

              @keyframes typingBounce {
                0%, 80%, 100% {
                  transform: scale(0);
                }
                40% {
                  transform: scale(1);
                }
              }
            `}</style>
          </div>
        );
      
      default:
        return (
          <div className="window-content default">
            <h2>{window.title}</h2>
            <p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–∫–Ω–∞ {window.type}</p>
          </div>
        );
    }
  };

  return (
    <>
      {windows.map(window => (
        <div
          key={window.id}
          className={`workspace-window ${window.minimized ? 'minimized' : ''} ${window.maximized ? 'maximized' : ''} ${activeWindow === window.id ? 'active' : ''}`}
          style={{
            left: window.position.x,
            top: window.position.y,
            width: window.size.width,
            height: window.size.height,
            zIndex: activeWindow === window.id ? 1000 : window.zIndex
          }}
          onMouseDown={() => setActiveWindow(window.id)}
        >
          <div 
            className="window-header"
            onMouseDown={(e) => handleWindowMouseDown(e, window.id)}
          >
            <h3 className="window-title">{window.title}</h3>
            <div className="window-controls">
              <button 
                className="window-control minimize"
                onClick={() => updateWindow(window.id, { minimized: !window.minimized })}
                aria-label="–°–≤–µ—Ä–Ω—É—Ç—å"
              >
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <path d="M8 12h8" strokeWidth="2"/>
                </svg>
              </button>
              <button 
                className="window-control maximize"
                onClick={() => updateWindow(window.id, { maximized: !window.maximized })}
                aria-label={window.maximized ? "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" : "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"}
              >
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <rect x="3" y="3" width="18" height="18" rx="2" strokeWidth="2"/>
                </svg>
              </button>
              <button 
                className="window-control close"
                onClick={() => closeWindow(window.id)}
                aria-label="–ó–∞–∫—Ä—ã—Ç—å"
              >
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <path d="M18 6L6 18M6 6l12 12" strokeWidth="2"/>
                </svg>
              </button>
            </div>
          </div>
          <div className="window-body">
            {renderWindowContent(window)}
          </div>
          {!window.maximized && (
            <div 
              className="resize-handle"
              onMouseDown={(e) => handleResizeMouseDown(e, window.id)}
            ></div>
          )}
        </div>
      ))}
    </>
  );
}