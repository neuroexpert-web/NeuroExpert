'use client';

import { useState } from 'react';
import dynamic from 'next/dynamic';
import { motion } from 'framer-motion';
import { IconSparkles, IconRocket, IconBrain, IconConfetti } from '@tabler/icons-react';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
// const ParticlesBackground = dynamic(() => import('../components/enhanced/ParticlesBackground'), { ssr: false }); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
const AnimatedCard3D = dynamic(() => import('../components/enhanced/AnimatedCard3D'), {
  ssr: false,
});
const LottieAnimation = dynamic(() => import('../components/enhanced/LottieAnimation'), {
  ssr: false,
});
const TypewriterText = dynamic(() => import('../components/enhanced/TypewriterText'), {
  ssr: false,
});
const CountUpAnimation = dynamic(() => import('../components/enhanced/CountUpAnimation'), {
  ssr: false,
});
const NotificationSystem = dynamic(() => import('../components/enhanced/NotificationSystem'), {
  ssr: false,
});
const ConfettiEffect = dynamic(() => import('../components/enhanced/ConfettiEffect'), {
  ssr: false,
});

import { showNotification } from '../components/enhanced/NotificationSystem';

export default function DesignShowcase() {
  const [confettiActive, setConfettiActive] = useState(false);

  const handleNotification = (type) => {
    switch (type) {
      case 'success':
        showNotification.success('–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! üéâ');
        break;
      case 'error':
        showNotification.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏');
        break;
      case 'info':
        showNotification.info('–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        break;
      case 'warning':
        showNotification.warning('–í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        break;
      case 'loading':
        const loadingToast = showNotification.loading('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
        setTimeout(() => {
          showNotification.success('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!', { id: loadingToast });
        }, 3000);
        break;
    }
  };

  return (
    <div className="design-showcase">
      {/* ParticlesBackground –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω */}
      <NotificationSystem />
      <ConfettiEffect active={confettiActive} />

      <div className="container">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="showcase-header"
        >
          <h1 className="showcase-title">
            <IconSparkles size={48} className="title-icon" />
            Showcase –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –î–∏–∑–∞–π–Ω–∞
          </h1>
          <TypewriterText
            className="showcase-subtitle"
            sequence={[
              '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã',
              2000,
              '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
              2000,
              '–ü—Ä–µ–º–∏—É–º –¥–∏–∑–∞–π–Ω —ç–ª–µ–º–µ–Ω—Ç—ã',
              2000,
            ]}
          />
        </motion.div>

        {/* 3D –ö–∞—Ä—Ç–æ—á–∫–∏ */}
        <section className="showcase-section">
          <h2>3D –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏</h2>
          <div className="cards-grid">
            <AnimatedCard3D className="showcase-card">
              <IconRocket size={48} className="card-icon" />
              <h3>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç</h3>
              <p>–ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –¥–ª—è 3D —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ–º —Å–≤–µ—Ç–∞</p>
            </AnimatedCard3D>

            <AnimatedCard3D className="showcase-card" glareMaxOpacity={0.8}>
              <IconBrain size={48} className="card-icon" />
              <h3>AI –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</h3>
              <p>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≥–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã</p>
            </AnimatedCard3D>
          </div>
        </section>

        {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞ */}
        <section className="showcase-section">
          <h2>–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏</h2>
          <div className="metrics-grid">
            <div className="metric-card">
              <CountUpAnimation end={98} suffix="%" duration={3} />
              <p>–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤</p>
            </div>

            <div className="metric-card">
              <CountUpAnimation end={2500000} prefix="‚ÇΩ" separator=" " duration={3} />
              <p>–°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–∞–º–∏</p>
            </div>

            <div className="metric-card">
              <CountUpAnimation end={150} suffix="+" duration={3} />
              <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</p>
            </div>
          </div>
        </section>

        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
        <section className="showcase-section">
          <h2>–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h2>
          <div className="notification-buttons">
            <button className="btn btn-success" onClick={() => handleNotification('success')}>
              –£—Å–ø–µ—Ö
            </button>
            <button className="btn btn-error" onClick={() => handleNotification('error')}>
              –û—à–∏–±–∫–∞
            </button>
            <button className="btn btn-info" onClick={() => handleNotification('info')}>
              –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </button>
            <button className="btn btn-warning" onClick={() => handleNotification('warning')}>
              –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            </button>
            <button className="btn btn-loading" onClick={() => handleNotification('loading')}>
              –ó–∞–≥—Ä—É–∑–∫–∞
            </button>
          </div>
        </section>

        {/* –ö–æ–Ω—Ñ–µ—Ç—Ç–∏ */}
        <section className="showcase-section">
          <h2>–≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è</h2>
          <button className="btn btn-confetti" onClick={() => setConfettiActive(true)}>
            <IconConfetti size={20} />
            –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ñ–µ—Ç—Ç–∏!
          </button>
        </section>
      </div>

      <style jsx>{`
        .design-showcase {
          min-height: 100vh;
          background: var(--noir-900);
          color: var(--white);
          position: relative;
          overflow-x: hidden;
        }

        .container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 4rem 2rem;
          position: relative;
          z-index: 1;
        }

        .showcase-header {
          text-align: center;
          margin-bottom: 4rem;
        }

        .showcase-title {
          font-size: 3rem;
          margin-bottom: 1rem;
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 1rem;
        }

        .title-icon {
          color: var(--gold-500);
        }

        .showcase-section {
          margin-bottom: 6rem;
        }

        .showcase-section h2 {
          font-size: 2rem;
          margin-bottom: 2rem;
          text-align: center;
          background: linear-gradient(135deg, var(--gold-500) 0%, var(--gold-600) 100%);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-clip: text;
        }

        .cards-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
          gap: 2rem;
        }

        :global(.showcase-card) {
          text-align: center;
          min-height: 200px;
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          gap: 1rem;
        }

        :global(.card-icon) {
          color: var(--gold-500);
        }

        .metrics-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
          gap: 2rem;
          text-align: center;
        }

        .metric-card {
          background: rgba(251, 191, 36, 0.1);
          padding: 2rem;
          border-radius: 12px;
          border: 1px solid rgba(251, 191, 36, 0.2);
        }

        .metric-card p {
          margin-top: 1rem;
          color: var(--gray-400);
        }

        .notification-buttons {
          display: flex;
          flex-wrap: wrap;
          gap: 1rem;
          justify-content: center;
        }

        .btn {
          padding: 0.75rem 2rem;
          border: none;
          border-radius: 8px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s ease;
          color: white;
        }

        .btn:hover {
          transform: translateY(-2px);
          box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
        }

        .btn-success {
          background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        }

        .btn-error {
          background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        }

        .btn-info {
          background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
        }

        .btn-warning {
          background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        }

        .btn-loading {
          background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
        }

        .btn-confetti {
          background: linear-gradient(135deg, var(--gold-500) 0%, var(--gold-600) 100%);
          display: flex;
          align-items: center;
          gap: 0.5rem;
          margin: 0 auto;
        }
      `}</style>
    </div>
  );
}
