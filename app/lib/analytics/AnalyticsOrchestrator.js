/**
 * NeuroExpert Analytics Orchestrator v3.0
 * –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 * 
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã:
 * - Google Analytics 4
 * - –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞
 * - Sentry (–æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
 * - AppMetrica (–º–æ–±–∏–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞)
 * - OpenReplay (—Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
 * - Hotjar (—Ç–µ–ø–ª–æ–≤—ã–µ –∫–∞—Ä—Ç—ã)
 * - Custom Internal Analytics
 */

'use client';

// –ü—Ä–æ—Å—Ç—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ debounce –∏ throttle –±–µ–∑ lodash
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

function throttle(func, limit) {
  let inThrottle;
  return function(...args) {
    if (!inThrottle) {
      func.apply(this, args);
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
    }
  };
}

class AnalyticsOrchestrator {
  constructor() {
    this.config = {
      enabled: process.env.NODE_ENV === 'production' || process.env.NEXT_PUBLIC_ANALYTICS_ENABLED === 'true',
      debug: process.env.NODE_ENV === 'development',
      batchSize: 10,
      flushInterval: 5000, // 5 —Å–µ–∫—É–Ω–¥
      maxRetries: 3,
      retryDelay: 1000
    };

    this.services = new Map();
    this.eventQueue = [];
    this.isInitialized = false;
    this.sessionData = {};
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å debounce –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    this.debouncedInit = debounce(this.init.bind(this), 100);
    this.throttledFlush = throttle(this.flush.bind(this), 1000);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if (typeof window !== 'undefined') {
      this.debouncedInit();
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  async init() {
    if (this.isInitialized) return;
    
    try {
      console.log('üöÄ NeuroExpert Analytics Orchestrator - Initializing...');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
      this.initSession();
      
      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
      await this.registerServices();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
      this.setupEventListeners();
      
      // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      this.startBatchProcessing();
      
      this.isInitialized = true;
      
      console.log('‚úÖ Analytics Orchestrator initialized successfully');
      this.track('analytics_initialized', { timestamp: Date.now() });
      
    } catch (error) {
      console.error('‚ùå Analytics initialization failed:', error);
      this.reportError('analytics_init_failed', error);
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  initSession() {
    const sessionId = this.generateSessionId();
    const deviceInfo = this.getDeviceInfo();
    const userAgent = this.getUserAgent();
    
    this.sessionData = {
      sessionId,
      startTime: Date.now(),
      deviceInfo,
      userAgent,
      url: window.location.href,
      referrer: document.referrer,
      language: navigator.language,
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
      screenResolution: `${screen.width}x${screen.height}`,
      viewportSize: `${window.innerWidth}x${window.innerHeight}`
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    try {
      localStorage.setItem('neuro_session', JSON.stringify(this.sessionData));
    } catch (e) {
      console.warn('Cannot save session data to localStorage:', e);
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  async registerServices() {
    const services = [
      { name: 'google-analytics', enabled: !!process.env.NEXT_PUBLIC_GA_ID },
      { name: 'yandex-metrica', enabled: !!process.env.NEXT_PUBLIC_YANDEX_METRICA_ID },
      { name: 'sentry', enabled: !!process.env.NEXT_PUBLIC_SENTRY_DSN },
      { name: 'appmetrica', enabled: !!process.env.NEXT_PUBLIC_APPMETRICA_KEY },
      { name: 'openreplay', enabled: !!process.env.NEXT_PUBLIC_OPENREPLAY_KEY },
      { name: 'hotjar', enabled: !!process.env.NEXT_PUBLIC_HOTJAR_ID },
      { name: 'internal', enabled: true } // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω
    ];

    for (const service of services) {
      if (service.enabled) {
        try {
          const ServiceClass = await this.loadService(service.name);
          const serviceInstance = new ServiceClass(this.config);
          await serviceInstance.init();
          
          this.services.set(service.name, serviceInstance);
          console.log(`‚úÖ ${service.name} service registered`);
        } catch (error) {
          console.error(`‚ùå Failed to register ${service.name}:`, error);
          this.reportError(`service_registration_failed_${service.name}`, error);
        }
      }
    }
  }

  /**
   * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  async loadService(serviceName) {
    const serviceMap = {
      'google-analytics': () => import('./services/GoogleAnalyticsService'),
      'yandex-metrica': () => import('./services/YandexMetricaService'),
      'sentry': () => import('./services/SentryService'),
      'appmetrica': () => import('./services/AppMetricaService'),
      'openreplay': () => import('./services/OpenReplayService'),
      'hotjar': () => import('./services/HotjarService'),
      'internal': () => import('./services/InternalAnalyticsService')
    };

    const serviceModule = await serviceMap[serviceName]();
    return serviceModule.default;
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  setupEventListeners() {
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
    window.addEventListener('error', (event) => {
      this.reportError('javascript_error', {
        message: event.error?.message || event.message,
        filename: event.filename,
        lineno: event.lineno,
        colno: event.colno,
        stack: event.error?.stack
      });
    });

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ unhandled promise rejections
    window.addEventListener('unhandledrejection', (event) => {
      this.reportError('unhandled_promise_rejection', {
        reason: event.reason,
        stack: event.reason?.stack
      });
    });

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if ('PerformanceObserver' in window) {
      try {
        const perfObserver = new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            this.trackPerformance(entry.name, {
              duration: entry.duration,
              type: entry.entryType,
              startTime: entry.startTime
            });
          }
        });
        
        perfObserver.observe({ entryTypes: ['navigation', 'paint', 'largest-contentful-paint'] });
      } catch (e) {
        console.warn('PerformanceObserver not fully supported:', e);
      }
    }

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('visibilitychange', () => {
      this.track('page_visibility_change', {
        visible: !document.hidden,
        timestamp: Date.now()
      });
    });

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', () => {
      this.flush(true); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
    });

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    const originalPushState = history.pushState;
    const originalReplaceState = history.replaceState;
    
    history.pushState = function(...args) {
      originalPushState.apply(history, args);
      window.dispatchEvent(new Event('pushstate'));
    };
    
    history.replaceState = function(...args) {
      originalReplaceState.apply(history, args);
      window.dispatchEvent(new Event('replacestate'));
    };
    
    ['pushstate', 'replacestate', 'popstate'].forEach(eventType => {
      window.addEventListener(eventType, () => {
        this.trackPageView(window.location.pathname);
      });
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–±—ã—Ç–∏–π
   */
  startBatchProcessing() {
    setInterval(() => {
      if (this.eventQueue.length > 0) {
        this.throttledFlush();
      }
    }, this.config.flushInterval);

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
    setInterval(() => {
      if (this.eventQueue.length >= this.config.batchSize) {
        this.flush();
      }
    }, 1000);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
   */
  track(eventName, properties = {}, options = {}) {
    if (!this.config.enabled && !this.config.debug) return;

    const event = {
      id: this.generateEventId(),
      name: eventName,
      properties: {
        ...properties,
        sessionId: this.sessionData.sessionId,
        timestamp: Date.now(),
        url: window.location.href,
        userAgent: this.sessionData.userAgent,
        deviceInfo: this.sessionData.deviceInfo
      },
      options: {
        priority: 'normal',
        immediate: false,
        retry: true,
        ...options
      },
      attempts: 0,
      createdAt: Date.now()
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
    this.eventQueue.push(event);
    
    if (this.config.debug) {
      console.log('üìä Analytics Event Queued:', eventName, properties);
    }

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
    if (options.immediate || options.priority === 'high') {
      this.flush();
    }

    return event.id;
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
   */
  trackPageView(pagePath, additionalData = {}) {
    return this.track('page_view', {
      page: pagePath || window.location.pathname,
      title: document.title,
      referrer: document.referrer,
      ...additionalData
    }, { priority: 'high', immediate: true });
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–≤–∞–π–ø–æ–≤ (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è SwipeContainer)
   */
  trackSwipe(direction, fromSection, toSection, method = 'touch') {
    return this.track('swipe_navigation', {
      direction,
      fromSection,
      toSection,
      method, // touch, keyboard, click
      timestamp: Date.now()
    }, { priority: 'normal' });
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –ø–æ —Å–µ–∫—Ü–∏—è–º
   */
  trackSectionView(sectionName, sectionIndex, duration = null) {
    return this.track('section_view', {
      sectionName,
      sectionIndex,
      duration,
      timestamp: Date.now()
    });
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  trackPerformance(metricName, data = {}) {
    return this.track('performance_metric', {
      metric: metricName,
      ...data
    }, { priority: 'low' });
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
   */
  reportError(errorType, errorData) {
    return this.track('error', {
      type: errorType,
      ...errorData,
      userAgent: navigator.userAgent,
      timestamp: Date.now()
    }, { priority: 'high', immediate: true });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤—Å–µ–º —Å–µ—Ä–≤–∏—Å–∞–º
   */
  async flush(force = false) {
    if (this.eventQueue.length === 0) return;
    
    const eventsToSend = [...this.eventQueue];
    this.eventQueue = [];

    if (this.config.debug) {
      console.log(`üì§ Flushing ${eventsToSend.length} events to analytics services`);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–∞–∂–¥–æ–º—É —Å–µ—Ä–≤–∏—Å—É
    for (const [serviceName, service] of this.services) {
      try {
        await service.sendEvents(eventsToSend);
        if (this.config.debug) {
          console.log(`‚úÖ Events sent to ${serviceName}`);
        }
      } catch (error) {
        console.error(`‚ùå Failed to send events to ${serviceName}:`, error);
        
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        if (!force) {
          const retriableEvents = eventsToSend
            .filter(event => event.attempts < this.config.maxRetries)
            .map(event => ({ ...event, attempts: event.attempts + 1 }));
          
          this.eventQueue.unshift(...retriableEvents);
        }
      }
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–µ—Å—Å–∏–∏
   */
  generateSessionId() {
    return `neuro_session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–æ–±—ã—Ç–∏—è
   */
  generateEventId() {
    return `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
   */
  getDeviceInfo() {
    const ua = navigator.userAgent;
    
    return {
      isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(ua),
      isTablet: /iPad|Android(?!.*Mobile)/i.test(ua),
      isDesktop: !/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(ua),
      platform: navigator.platform,
      cookieEnabled: navigator.cookieEnabled,
      onLine: navigator.onLine,
      language: navigator.language,
      languages: navigator.languages,
      hardwareConcurrency: navigator.hardwareConcurrency,
      memory: navigator.deviceMemory || 'unknown',
      connection: navigator.connection ? {
        effectiveType: navigator.connection.effectiveType,
        downlink: navigator.connection.downlink,
        rtt: navigator.connection.rtt
      } : null
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ User Agent
   */
  getUserAgent() {
    return {
      full: navigator.userAgent,
      vendor: navigator.vendor,
      appName: navigator.appName,
      appVersion: navigator.appVersion,
      platform: navigator.platform
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫ —Å–µ—Å—Å–∏–∏
   */
  getSessionMetrics() {
    const now = Date.now();
    const sessionDuration = now - this.sessionData.startTime;
    
    return {
      ...this.sessionData,
      currentUrl: window.location.href,
      sessionDuration,
      eventsCount: this.eventQueue.length,
      servicesActive: Array.from(this.services.keys()),
      lastActivity: now
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è GDPR compliance)
   */
  clearData() {
    this.eventQueue = [];
    this.sessionData = {};
    
    try {
      localStorage.removeItem('neuro_session');
    } catch (e) {
      console.warn('Cannot clear session data from localStorage:', e);
    }
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –æ–± –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
    for (const [serviceName, service] of this.services) {
      if (service.clearData) {
        service.clearData();
      }
    }
    
    console.log('üßπ Analytics data cleared for GDPR compliance');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   */
  getStats() {
    return {
      isInitialized: this.isInitialized,
      servicesCount: this.services.size,
      queueLength: this.eventQueue.length,
      sessionData: this.sessionData,
      config: this.config
    };
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
const analyticsOrchestrator = new AnalyticsOrchestrator();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export default analyticsOrchestrator;

// –≠–∫—Å–ø–æ—Ä—Ç —É–¥–æ–±–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
export const {
  track,
  trackPageView,
  trackSwipe,
  trackSectionView,
  trackPerformance,
  reportError,
  getSessionMetrics,
  clearData,
  getStats
} = analyticsOrchestrator;