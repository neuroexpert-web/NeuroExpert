import { NextResponse } from 'next/server';
import { securityMiddleware, getClientIP, validators } from '../../utils/security';

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–µ–º–æ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
const analyticsStore = [];

export async function POST(request) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const securityCheck = await securityMiddleware(request);
  if (securityCheck) return securityCheck;

  try {
    const event = await request.json();
    const ip = getClientIP(request);
    const userAgent = request.headers.get('user-agent') || 'unknown';

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!event.eventType || !event.eventName) {
      return NextResponse.json(
        { success: false, error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // –î–æ–ø–æ–ª–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const enrichedEvent = {
      ...event,
      serverTimestamp: Date.now(),
      ip: ip,
      userAgent: userAgent,
      processed: true
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
    analyticsStore.push(enrichedEvent);

    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ë–î –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
    if (process.env.NODE_ENV === 'production') {
      // await saveToDatabase(enrichedEvent);
      // await sendToAnalyticsService(enrichedEvent);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    if (['roi_calculation', 'form_submit', 'error'].includes(event.eventType)) {
      try {
        await fetch(`${process.env.NEXT_PUBLIC_APP_URL}/api/telegram`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            message: `üìä Analytics Event: ${event.eventName}\nType: ${event.eventType}\nDetails: ${JSON.stringify(event.properties, null, 2)}`
          })
        });
      } catch (error) {
        console.error('Failed to send to Telegram:', error);
      }
    }

    return NextResponse.json({
      success: true,
      eventId: enrichedEvent.timestamp,
      processed: true
    });

  } catch (error) {
    console.error('Analytics API Error:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to process event' },
      { status: 500 }
    );
  }
}

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö)
export async function GET(request) {
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const { searchParams } = new URL(request.url);
  const eventType = searchParams.get('eventType');
  const limit = parseInt(searchParams.get('limit') || '100');

  let events = analyticsStore;

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É
  if (eventType) {
    events = events.filter(e => e.eventType === eventType);
  }

  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  events = events.slice(-limit);

  // –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const stats = {
    total: analyticsStore.length,
    byType: {},
    lastHour: 0,
    uniqueSessions: new Set()
  };

  const hourAgo = Date.now() - 3600000;

  analyticsStore.forEach(event => {
    // –ü–æ —Ç–∏–ø–∞–º
    stats.byType[event.eventType] = (stats.byType[event.eventType] || 0) + 1;
    
    // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    if (event.timestamp > hourAgo) {
      stats.lastHour++;
    }
    
    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    if (event.sessionId) {
      stats.uniqueSessions.add(event.sessionId);
    }
  });

  stats.uniqueSessions = stats.uniqueSessions.size;

  return NextResponse.json({
    success: true,
    events,
    stats,
    timestamp: Date.now()
  });
}