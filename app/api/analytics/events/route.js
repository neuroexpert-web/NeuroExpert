/**
 * NeuroExpert Analytics Events API
 * –ó–∞—â–∏—â–µ–Ω–Ω—ã–π endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
 * –í–∫–ª—é—á–∞–µ—Ç: Rate Limiting, CSRF Protection, JWT Auth, Input Validation
 */

import { NextResponse } from 'next/server';
import { headers } from 'next/headers';
import rateLimit from '../../../lib/security/rateLimit';
import { validateAnalyticsEvent } from '../../../lib/analytics/validation';
import { saveAnalyticsEvents } from '../../../lib/analytics/storage';
import { verifyAPIKey } from '../../../lib/security/auth';

// Rate limiting –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const limiter = rateLimit({
  windowMs: 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞
  max: 100, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –º–∏–Ω—É—Ç—É
  message: 'Too many analytics requests from this IP',
  standardHeaders: true,
  legacyHeaders: false,
});

/**
 * POST /api/analytics/events
 * –ü—Ä–∏–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
 */
export async function POST(request) {
  try {
    // Rate limiting
    const rateLimitResult = await limiter(request);
    if (rateLimitResult.blocked) {
      return NextResponse.json(
        { 
          error: 'Rate limit exceeded',
          retryAfter: rateLimitResult.retryAfter 
        },
        { status: 429 }
      );
    }

    // CSRF –∑–∞—â–∏—Ç–∞
    const headersList = headers();
    const origin = headersList.get('origin');
    const host = headersList.get('host');
    const referer = headersList.get('referer');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç CSRF
    if (!isValidOrigin(origin, host, referer)) {
      return NextResponse.json(
        { error: 'Invalid origin' },
        { status: 403 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ (–¥–ª—è internal services)
    const apiKey = headersList.get('x-api-key');
    const source = headersList.get('x-analytics-source');
    
    if (source === 'internal' && !verifyAPIKey(apiKey)) {
      return NextResponse.json(
        { error: 'Invalid API key' },
        { status: 401 }
      );
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const body = await request.json();
    const validationResult = validateAnalyticsEvent(body);
    
    if (!validationResult.valid) {
      return NextResponse.json(
        { 
          error: 'Invalid event data',
          details: validationResult.errors 
        },
        { status: 400 }
      );
    }

    // –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const enrichedData = enrichEventData(body, headersList);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
    const saveResult = await saveAnalyticsEvents(enrichedData);
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞—É–¥–∏—Ç–∞
    console.log('üìä Analytics events received:', {
      eventType: body.eventType,
      eventCount: body.events?.length || 0,
      source: source || 'frontend',
      ip: getClientIP(headersList),
      timestamp: new Date().toISOString()
    });

    return NextResponse.json({
      success: true,
      processed: saveResult.processedCount,
      batchId: body.metadata?.batchId,
      timestamp: Date.now()
    });

  } catch (error) {
    console.error('‚ùå Analytics API error:', error);
    
    // –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç—É
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

/**
 * OPTIONS –¥–ª—è CORS preflight
 */
export async function OPTIONS(request) {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': getAllowedOrigin(request),
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, X-Analytics-Source, X-API-Key, X-Batch-Size',
      'Access-Control-Max-Age': '86400',
    },
  });
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
 */
function isValidOrigin(origin, host, referer) {
  const allowedOrigins = [
    `https://${host}`,
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    process.env.NEXT_PUBLIC_APP_URL,
    process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : null
  ].filter(Boolean);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ origin
  if (origin && allowedOrigins.includes(origin)) {
    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ referer –∫–∞–∫ fallback
  if (referer) {
    return allowedOrigins.some(allowed => referer.startsWith(allowed));
  }

  // –î–ª—è same-origin –∑–∞–ø—Ä–æ—Å–æ–≤ origin –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
  return !origin && !referer;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ origin –¥–ª—è CORS
 */
function getAllowedOrigin(request) {
  const origin = request.headers.get('origin');
  const allowedOrigins = [
    process.env.NEXT_PUBLIC_APP_URL,
    'http://localhost:3000',
    'http://127.0.0.1:3000'
  ].filter(Boolean);

  return allowedOrigins.includes(origin) ? origin : allowedOrigins[0];
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
 */
function getClientIP(headers) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP
  const forwardedFor = headers.get('x-forwarded-for');
  const realIP = headers.get('x-real-ip');
  const cfConnectingIP = headers.get('cf-connecting-ip');
  
  if (cfConnectingIP) return cfConnectingIP;
  if (realIP) return realIP;
  if (forwardedFor) return forwardedFor.split(',')[0].trim();
  
  return 'unknown';
}

/**
 * –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 */
function enrichEventData(data, headers) {
  const timestamp = Date.now();
  const clientIP = getClientIP(headers);
  const userAgent = headers.get('user-agent');
  
  return {
    ...data,
    metadata: {
      ...data.metadata,
      receivedAt: timestamp,
      serverTimestamp: timestamp,
      clientIP: hashIP(clientIP), // –•–µ—à–∏—Ä—É–µ–º IP –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
      userAgent: sanitizeUserAgent(userAgent),
      processingId: generateProcessingId(),
      apiVersion: '3.0.0'
    },
    events: data.events?.map(event => ({
      ...event,
      serverReceivedAt: timestamp,
      processingFlags: {
        validated: true,
        enriched: true,
        sanitized: true
      }
    })) || []
  };
}

/**
 * –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
 */
function hashIP(ip) {
  if (!ip || ip === 'unknown') return 'unknown';
  
  // –ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏
  const crypto = require('crypto');
  return crypto
    .createHash('sha256')
    .update(ip + process.env.IP_HASH_SALT || 'neuroexpert-salt')
    .digest('hex')
    .substring(0, 16);
}

/**
 * –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è User Agent
 */
function sanitizeUserAgent(userAgent) {
  if (!userAgent) return 'unknown';
  
  // –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  return userAgent
    .replace(/\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/g, '[IP]') // IP –∞–¥—Ä–µ—Å–∞
    .replace(/[A-Za-z0-9+/]{20,}/g, '[TOKEN]') // –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    .substring(0, 500); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
function generateProcessingId() {
  const timestamp = Date.now().toString(36);
  const random = Math.random().toString(36).substring(2, 8);
  return `proc_${timestamp}_${random}`;
}