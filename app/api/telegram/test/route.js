import { NextResponse } from 'next/server';

export async function GET() {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
  
  const diagnostics = {
    status: 'Telegram API Test',
    timestamp: new Date().toISOString(),
    config: {
      hasToken: !!TELEGRAM_BOT_TOKEN,
      tokenLength: TELEGRAM_BOT_TOKEN ? TELEGRAM_BOT_TOKEN.length : 0,
      tokenFormat: TELEGRAM_BOT_TOKEN ? 
        (TELEGRAM_BOT_TOKEN.match(/^\d+:[\w-]+$/) ? 'valid' : 'invalid format') : 
        'missing',
      hasChatId: !!TELEGRAM_CHAT_ID,
      chatIdFormat: TELEGRAM_CHAT_ID ? 
        (TELEGRAM_CHAT_ID.match(/^-?\d+$/) ? 'valid' : 'invalid format') : 
        'missing'
    },
    tests: {}
  };
  
  // Test 1: Check bot info
  if (TELEGRAM_BOT_TOKEN) {
    try {
      const botInfoResponse = await fetch(
        `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMe`
      );
      const botInfo = await botInfoResponse.json();
      diagnostics.tests.botInfo = {
        success: botInfo.ok,
        botName: botInfo.result?.username,
        botId: botInfo.result?.id,
        error: botInfo.description
      };
    } catch (error) {
      diagnostics.tests.botInfo = {
        success: false,
        error: error.message
      };
    }
  }
  
  // Test 2: Send test message
  if (TELEGRAM_BOT_TOKEN && TELEGRAM_CHAT_ID) {
    try {
      const testMessage = `üß™ *–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\n` +
        `‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n` +
        `üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n` +
        `üåê –ò—Å—Ç–æ—á–Ω–∏–∫: NeuroExpert API Test`;
        
      const sendResponse = await fetch(
        `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: TELEGRAM_CHAT_ID,
            text: testMessage,
            parse_mode: 'Markdown'
          })
        }
      );
      
      const sendResult = await sendResponse.json();
      diagnostics.tests.sendMessage = {
        success: sendResult.ok,
        messageId: sendResult.result?.message_id,
        error: sendResult.description
      };
    } catch (error) {
      diagnostics.tests.sendMessage = {
        success: false,
        error: error.message
      };
    }
  }
  
  // Recommendations
  diagnostics.recommendations = [];
  
  if (!TELEGRAM_BOT_TOKEN) {
    diagnostics.recommendations.push({
      issue: 'TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
      solution: '1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram\n2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω\n3. –î–æ–±–∞–≤—å—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è'
    });
  }
  
  if (!TELEGRAM_CHAT_ID) {
    diagnostics.recommendations.push({
      issue: 'TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
      solution: '1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç/–∫–∞–Ω–∞–ª\n2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç\n3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getUpdates API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id'
    });
  }
  
  if (diagnostics.tests.botInfo && !diagnostics.tests.botInfo.success) {
    diagnostics.recommendations.push({
      issue: '–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω',
      solution: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz'
    });
  }
  
  if (diagnostics.tests.sendMessage && !diagnostics.tests.sendMessage.success) {
    diagnostics.recommendations.push({
      issue: '–ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
      solution: '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n1. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç\n2. Chat ID –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π\n3. –£ –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π'
    });
  }
  
  return NextResponse.json(diagnostics, {
    status: 200,
    headers: {
      'Content-Type': 'application/json',
    }
  });
}

// POST endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
export async function POST(request) {
  try {
    const { message } = await request.json();
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
    
    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      return NextResponse.json({
        success: false,
        error: 'Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID'
      }, { status: 400 });
    }
    
    const telegramMessage = `üì® *–¢–µ—Å—Ç —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏*\n\n${message || '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}\n\nüïê ${new Date().toLocaleString('ru-RU')}`;
    
    const response = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: TELEGRAM_CHAT_ID,
          text: telegramMessage,
          parse_mode: 'Markdown'
        })
      }
    );
    
    const result = await response.json();
    
    return NextResponse.json({
      success: result.ok,
      messageId: result.result?.message_id,
      error: result.description
    });
    
  } catch (error) {
    return NextResponse.json({
      success: false,
      error: error.message
    }, { status: 500 });
  }
}