import { NextResponse } from 'next/server';
import { analytics } from '../../utils/analytics';

// –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î)
async function getSystemMetrics() {
  const now = new Date();
  const today = new Date(now.setHours(0, 0, 0, 0));
  const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);
  const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);

  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  const metrics = {
    overview: {
      totalUsers: 1847,
      activeUsers: 342,
      totalProjects: 89,
      completedProjects: 67,
      avgROI: 287,
      totalRevenue: 18500000,
      monthlyGrowth: 23.5
    },
    
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    timeline: {
      daily: generateTimelineData(24, 'hour'),
      weekly: generateTimelineData(7, 'day'),
      monthly: generateTimelineData(30, 'day'),
      yearly: generateTimelineData(12, 'month')
    },
    
    // KPI
    kpi: {
      conversionRate: {
        value: 34.7,
        target: 30,
        trend: 'up',
        change: 15.6
      },
      customerSatisfaction: {
        value: 4.8,
        target: 4.5,
        trend: 'up',
        change: 6.7
      },
      projectDeliveryTime: {
        value: 2.3,
        target: 3,
        trend: 'down',
        change: -23.3
      },
      supportResponseTime: {
        value: 15,
        target: 30,
        trend: 'down',
        change: -50
      }
    },
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Å–ª—É–≥–∞–º
    serviceDistribution: [
      { name: 'AI –î–∏—Ä–µ–∫—Ç–æ—Ä Pro', value: 35, revenue: 6475000 },
      { name: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤', value: 28, revenue: 5180000 },
      { name: 'AI –î–∏—Ä–µ–∫—Ç–æ—Ä Basic', value: 18, revenue: 3330000 },
      { name: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö', value: 12, revenue: 2220000 },
      { name: 'Custom AI —Ä–µ—à–µ–Ω–∏—è', value: 7, revenue: 1295000 }
    ],
    
    // –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    geoDistribution: [
      { region: '–ú–æ—Å–∫–≤–∞', clients: 42, revenue: 7770000 },
      { region: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', clients: 23, revenue: 4255000 },
      { region: '–†–µ–≥–∏–æ–Ω—ã', clients: 18, revenue: 3330000 },
      { region: '–°–ù–ì', clients: 6, revenue: 1110000 },
      { region: '–£–¥–∞–ª–µ–Ω–Ω–æ', clients: 11, revenue: 2035000 }
    ],
    
    // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
    teamPerformance: {
      developers: {
        utilization: 87,
        projectsCompleted: 23,
        avgDeliveryTime: 2.1,
        satisfaction: 4.9
      },
      aiSpecialists: {
        utilization: 92,
        projectsCompleted: 18,
        avgDeliveryTime: 2.5,
        satisfaction: 4.7
      },
      projectManagers: {
        utilization: 78,
        projectsCompleted: 45,
        avgDeliveryTime: 2.3,
        satisfaction: 4.8
      }
    },
    
    // AI –º–µ—Ç—Ä–∏–∫–∏
    aiMetrics: {
      totalInteractions: 28453,
      successfulResponses: 26789,
      avgResponseTime: 1.2,
      userSatisfaction: 91,
      tasksAutomated: 3456,
      timeSaved: 8923, // —á–∞—Å–æ–≤
      costSaved: 4461500 // —Ä—É–±–ª–µ–π
    },
    
    // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    financial: {
      mrr: 4625000, // Monthly Recurring Revenue
      arr: 55500000, // Annual Recurring Revenue
      churnRate: 2.3,
      ltv: 8500000, // Lifetime Value
      cac: 180000, // Customer Acquisition Cost
      ltvCacRatio: 47.2
    }
  };

  return metrics;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏
function generateTimelineData(points: number, type: string) {
  const data = [];
  const baseValue = 100;
  
  for (let i = 0; i < points; i++) {
    const variation = Math.random() * 40 - 20;
    const value = Math.round(baseValue + variation + (i * 2));
    
    let label = '';
    const now = new Date();
    
    switch(type) {
      case 'hour':
        const hour = new Date(now.getTime() - (points - i) * 60 * 60 * 1000);
        label = hour.getHours() + ':00';
        break;
      case 'day':
        const day = new Date(now.getTime() - (points - i) * 24 * 60 * 60 * 1000);
        label = day.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' });
        break;
      case 'month':
        const month = new Date(now.getFullYear(), now.getMonth() - (points - i), 1);
        label = month.toLocaleDateString('ru-RU', { month: 'short' });
        break;
    }
    
    data.push({ label, value, timestamp: new Date() });
  }
  
  return data;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const period = searchParams.get('period') || 'daily';
    const category = searchParams.get('category') || 'all';
    
    const metrics = await getSystemMetrics();
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let filteredMetrics = metrics;
    if (category !== 'all') {
      filteredMetrics = {
        ...metrics,
        [category]: metrics[category as keyof typeof metrics]
      };
    }
    
    // –¢—Ä–µ–∫–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫
    analytics.trackEvent('metrics_viewed', {
      period,
      category
    });
    
    return NextResponse.json({
      success: true,
      data: filteredMetrics,
      timestamp: new Date(),
      period,
      category
    });
    
  } catch (error) {
    console.error('Metrics error:', error);
    analytics.trackError(error as Error, 'metrics_fetch');
    
    return NextResponse.json(
      { 
        success: false, 
        error: 'Failed to fetch metrics' 
      },
      { status: 500 }
    );
  }
}

// WebSocket endpoint –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤ Next.js –∏—Å–ø–æ–ª—å–∑—É–µ–º polling)
export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { type, data } = body;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    switch(type) {
      case 'track_event':
        analytics.trackEvent(data.event, data.properties);
        break;
        
      case 'track_metric':
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ –ë–î
        console.log('Tracking metric:', data);
        break;
        
      case 'alert':
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö
        if (data.severity === 'critical') {
          await fetch('/api/telegram', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              message: `üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –º–µ—Ç—Ä–∏–∫–∞: ${data.metric}\n–ó–Ω–∞—á–µ–Ω–∏–µ: ${data.value}\n–ü–æ—Ä–æ–≥: ${data.threshold}`
            })
          });
        }
        break;
    }
    
    return NextResponse.json({
      success: true,
      message: 'Event processed'
    });
    
  } catch (error) {
    console.error('Metrics event error:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: 'Failed to process event' 
      },
      { status: 500 }
    );
  }
}