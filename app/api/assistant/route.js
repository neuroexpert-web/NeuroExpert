import { NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { assistantRateLimit } from '@/app/middleware/rateLimit';
import { validate, schemas } from '@/app/utils/validation';
import fs from 'fs';
import path from 'path';
// import { 
//   DIRECTOR_KNOWLEDGE_BASE, 
//   analyzeUserIntent,
//   personalizeResponse,
//   generateFollowUpQuestions,
//   addEmotionalTone
// } from '../../utils/ai-director-system';

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã –¥–ª—è –∫–ª—é—á–∞ Gemini,
// —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –∏–∑-–∑–∞ –æ–ø–µ—á–∞—Ç–æ–∫ –≤ –ø–∞–Ω–µ–ª–∏ —Ö–æ—Å—Ç–∏–Ω–≥–∞
const GEMINI_API_KEY = process.env.GOOGLE_GEMINI_API_KEY
  || process.env.GEMINI_API_KEY
  || process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;

if (!GEMINI_API_KEY && !ANTHROPIC_API_KEY && !OPENROUTER_API_KEY) {
  console.error('No AI API keys configured. Please check environment variables.');
}

let genAI = null;
try {
  if (GEMINI_API_KEY) {
    genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
    console.log('GoogleGenerativeAI initialized successfully');
  }
} catch (error) {
  console.error('Failed to initialize GoogleGenerativeAI:', error);
}

// Debug logging
console.log('API Keys check:', {
  hasGeminiKey: !!GEMINI_API_KEY,
  hasAnthropicKey: !!ANTHROPIC_API_KEY,
  hasOpenRouterKey: !!OPENROUTER_API_KEY,
  genAIInitialized: !!genAI,
  geminiKeyLength: GEMINI_API_KEY ? GEMINI_API_KEY.length : 0,
  openRouterKeyLength: OPENROUTER_API_KEY ? OPENROUTER_API_KEY.length : 0
});

// Load system prompt for NeuroExpert v4.0 Enhanced (used as systemInstruction)
// This file contains the complete system prompt for the AI assistant
// Vercel deployment trigger - updated at: ${new Date().toISOString()}
const PROMPT_PATH = path.join(process.cwd(), 'app', 'utils', 'prompts', 'neuroexpert_v4_enhanced.md');
let SYSTEM_PROMPT = '';

// Check if file exists
try {
  if (fs.existsSync(PROMPT_PATH)) {
    console.log('Prompt file exists at:', PROMPT_PATH);
    SYSTEM_PROMPT = fs.readFileSync(PROMPT_PATH, 'utf-8');
    console.log('System prompt loaded successfully, length:', SYSTEM_PROMPT.length);
    console.log('System prompt preview:', SYSTEM_PROMPT.substring(0, 200) + '...');
  } else {
    console.error('Prompt file does not exist at:', PROMPT_PATH);
    // Try alternative paths
    const altPaths = [
      path.join(process.cwd(), 'app', 'utils', 'prompts', 'neuroexpert_v3_2.md'),
      path.join(process.cwd(), 'neuroexpert_v3_2.md'),
      path.join(process.cwd(), 'app', 'utils', 'prompts', 'neuroexpert_v3_2.md')
    ];
    
    for (const altPath of altPaths) {
      if (fs.existsSync(altPath)) {
        console.log('Found prompt file at alternative path:', altPath);
        SYSTEM_PROMPT = fs.readFileSync(altPath, 'utf-8');
        break;
      }
    }
  }
} catch (e) {
  console.error('Failed to load system prompt for assistant:', e);
  console.error('Prompt path:', PROMPT_PATH);
  console.error('Current working directory:', process.cwd());
  console.error('Available files in utils:', fs.readdirSync(path.join(process.cwd(), 'app', 'utils')).join(', '));
}

async function sendTelegramNotification(question, answer, model) {
  try {
    if (!process.env.TELEGRAM_BOT_TOKEN || !process.env.TELEGRAM_CHAT_ID) {
      return;
    }

    const message = `
ü§ñ <b>–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å AI —É–ø—Ä–∞–≤–ª—è—é—â–∏–º</b>

üë§ <b>–í–æ–ø—Ä–æ—Å:</b> ${question}

üéØ <b>–û—Ç–≤–µ—Ç:</b> ${answer}

üìä <b>–ú–æ–¥–µ–ª—å:</b> ${model}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
    `;

    const response = await fetch(
      `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: process.env.TELEGRAM_CHAT_ID,
          text: message,
          parse_mode: 'HTML'
        })
      }
    );

    if (!response.ok) {
      console.error('Failed to send Telegram notification');
    }
  } catch (error) {
    console.error('Telegram notification error:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å OpenRouter API (GPT-4)
async function getOpenRouterResponse(prompt, history = []) {
  if (!OPENROUTER_API_KEY) {
    throw new Error('OPENROUTER_API_KEY is not set');
  }

  console.log('OpenRouter request:', {
    keyLength: OPENROUTER_API_KEY.length,
    keyPrefix: OPENROUTER_API_KEY.substring(0, 15),
    keySuffix: OPENROUTER_API_KEY.substring(OPENROUTER_API_KEY.length - 5),
    fullKey: OPENROUTER_API_KEY, // –í—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    hasSpaces: OPENROUTER_API_KEY !== OPENROUTER_API_KEY.trim()
  });

  try {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è OpenRouter
    const messages = history.length > 0 ? history : [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (messages.length === 0 || messages[0].role !== 'system') {
      messages.unshift({
        role: 'system',
        content: SYSTEM_PROMPT || 'You are a helpful AI assistant.'
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages.push({
      role: 'user',
      content: prompt
    });

    // –û—á–∏—Å—Ç–∏–º –∫–ª—é—á –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    const cleanKey = OPENROUTER_API_KEY.trim();
    
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${cleanKey}`,
        'HTTP-Referer': 'https://neuroexpert.vercel.app', // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL
        'X-Title': 'NeuroExpert',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'openrouter/auto',  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –¥–æ—Å—Ç—É–ø–Ω–æ–π –º–æ–¥–µ–ª–∏
        messages: messages,
        temperature: 0.7,
        max_tokens: 2048
      })
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('OpenRouter API error:', {
        status: response.status,
        statusText: response.statusText,
        errorBody: errorData,
        keyLength: OPENROUTER_API_KEY?.length,
        keyStart: OPENROUTER_API_KEY?.substring(0, 10)
      });
      throw new Error(`OpenRouter API error: ${response.status} - ${errorData}`);
    }

    const data = await response.json();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
    return {
      text: data.choices[0].message.content,
      updatedHistory: [...messages, {
        role: 'assistant',
        content: data.choices[0].message.content
      }]
    };
  } catch (error) {
    console.error('OpenRouter API error:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Claude API (Anthropic)
async function getClaudeResponse(prompt, history = []) {
  if (!ANTHROPIC_API_KEY) {
    throw new Error('ANTHROPIC_API_KEY is not set');
  }

  try {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è Claude
    const messages = history.length > 0 ? history : [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages.push({
      role: 'user',
      content: prompt
    });

    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': ANTHROPIC_API_KEY,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-haiku-20240307',
        max_tokens: 2048,
        system: SYSTEM_PROMPT, // Claude –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç system prompt –Ω–∞–ø—Ä—è–º—É—é!
        messages: messages,
        temperature: 0.7
      })
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('Claude API error response:', errorData);
      throw new Error(`Claude API error: ${response.status}`);
    }

    const data = await response.json();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
    return {
      text: data.content[0].text,
      updatedHistory: [...messages, {
        role: 'assistant',
        content: data.content[0].text
      }]
    };
  } catch (error) {
    console.error('Claude API error:', error);
    throw error;
  }
}

async function handler(request) {
  const startTime = Date.now();
  
  try {
    const requestData = await request.json();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–π –≤ –Ω–∞—á–∞–ª–µ (—Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    const isValidGeminiKey = GEMINI_API_KEY && 
                             !GEMINI_API_KEY.includes('your_') && 
                             !GEMINI_API_KEY.includes('here') &&
                             GEMINI_API_KEY.length > 30 &&
                             (GEMINI_API_KEY.startsWith('AI') || GEMINI_API_KEY.startsWith('sk-'));
    const isValidAnthropicKey = ANTHROPIC_API_KEY && 
                               !ANTHROPIC_API_KEY.includes('your_') && 
                               !ANTHROPIC_API_KEY.includes('here') &&
                               ANTHROPIC_API_KEY.length > 30;
    const isValidOpenRouterKey = OPENROUTER_API_KEY && 
                                !OPENROUTER_API_KEY.includes('your_') && 
                                !OPENROUTER_API_KEY.includes('here') &&
                                OPENROUTER_API_KEY.length > 30 &&
                                OPENROUTER_API_KEY.startsWith('sk-');
    
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô DEMO MODE –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('API Keys validation:', { 
      isValidGeminiKey, 
      isValidAnthropicKey, 
      isValidOpenRouterKey,
      GEMINI_KEY_START: GEMINI_API_KEY?.substring(0, 10) + '...',
      OPENROUTER_KEY_START: OPENROUTER_API_KEY?.substring(0, 10) + '...',
      GEMINI_KEY_LENGTH: GEMINI_API_KEY?.length,
      OPENROUTER_KEY_LENGTH: OPENROUTER_API_KEY?.length,
      requestedModel: requestData.model || requestData.message?.model || 'not specified'
    });
    
    // DEMO MODE: –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏—Ö API –∫–ª—é—á–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
    if (!isValidGeminiKey && !isValidAnthropicKey && !isValidOpenRouterKey) {
      const demoResponses = [
        "üöÄ –î–µ–º–æ-—Ä–µ–∂–∏–º NeuroExpert AI –∞–∫—Ç–∏–≤–µ–Ω! –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏ –≤ .env.local —Ñ–∞–π–ª.\n\n‚ú® –í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –Ω–æ —ç—Ç–æ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç. –ù–∞—Å—Ç–æ—è—â–∏–π AI –ø–æ–º–æ–∂–µ—Ç —Å:\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –∑–∞–¥–∞—á\n‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–∏–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏",
        "ü§ñ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç NeuroExpert AI! –ù–∞—Å—Ç–æ—è—â–∏–π AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –±–∏–∑–Ω–µ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.\n\nüìã –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n1. –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á: https://ai.google.dev/\n2. –î–æ–±–∞–≤—å—Ç–µ –≤ .env.local\n3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä",
        "‚ö° NeuroExpert AI –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! (–¥–µ–º–æ-—Ä–µ–∂–∏–º)\n\n–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π —è —Å–º–æ–≥—É:\n‚Ä¢ –ü—Ä–æ–≤–æ–¥–∏—Ç—å –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞\n‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
        "üéØ –î–µ–º–æ-–æ—Ç–≤–µ—Ç NeuroExpert v4.0!\n\n–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π AI –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –±–∏–∑–Ω–µ—Å —Å –ø–æ–º–æ—â—å—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.\n\nüîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ: /AI_SETUP_INSTRUCTIONS.md"
      ];
      
      const randomResponse = demoResponses[Math.floor(Math.random() * demoResponses.length)];
      
      return NextResponse.json({
        success: true,
        response: randomResponse,
        demo: true,
        message: "API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –≠—Ç–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º."
      });
    }
    
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞: —Å—Ç–∞—Ä—ã–π (userMessage) –∏ –Ω–æ–≤—ã–π (message)
    const message = requestData.message || requestData.userMessage;
    const context = requestData.context || 'general';
    const systemPrompt = requestData.systemPrompt;
    

    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validationResult = validate({ question: message }, schemas.apiRequest);
    
    if (!validationResult.isValid) {
      const firstError = Object.values(validationResult.errors)[0];
      return NextResponse.json({ error: firstError }, { status: 400 });
    }
    
    const { question } = validationResult.sanitizedData;
    const { model = 'gemini', history = [] } = requestData;
    
    // Debug logging
    console.log('Assistant API called:', { 
      model, 
      questionLength: question?.length,
      hasAnthropicKey: !!ANTHROPIC_API_KEY,
      hasGeminiKey: !!GEMINI_API_KEY,
      hasOpenRouterKey: !!OPENROUTER_API_KEY,
      isValidGeminiKey,
      isValidAnthropicKey,
      isValidOpenRouterKey,
      genAIInitialized: !!genAI,
      anthropicKeyLength: ANTHROPIC_API_KEY ? ANTHROPIC_API_KEY.length : 0,
      geminiKeyLength: GEMINI_API_KEY ? GEMINI_API_KEY.length : 0,
      openRouterKeyLength: OPENROUTER_API_KEY ? OPENROUTER_API_KEY.length : 0,
      nodeEnv: process.env.NODE_ENV
    });

    // –°–æ–∑–¥–∞—ë–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    // const enhancedPrompt = createEnhancedPrompt(question, context);
    
    let answer;
    let usedModel = model;
    let updatedHistory = history; // Initialize updatedHistory
    
    try {
      // –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (model === 'gpt-4') {
        if (isValidOpenRouterKey) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT-4 —á–µ—Ä–µ–∑ OpenRouter
          console.log('Using GPT-4 via OpenRouter with system prompt');
          console.log('OPENROUTER_API_KEY exists:', !!OPENROUTER_API_KEY);
          console.log('OPENROUTER_API_KEY length:', OPENROUTER_API_KEY ? OPENROUTER_API_KEY.length : 0);
          const gptResponse = await getOpenRouterResponse(question, history);
          answer = gptResponse.text;
          updatedHistory = gptResponse.updatedHistory;
          usedModel = 'gpt-4';
        } else {
          console.log('GPT-4 requested but OpenRouter key is invalid');
          throw new Error('OpenRouter API key is not valid');
        }
      } else if (model === 'claude' && isValidAnthropicKey) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Claude —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        console.log('Using Claude with system prompt');
        console.log('ANTHROPIC_API_KEY exists:', !!ANTHROPIC_API_KEY);
        console.log('ANTHROPIC_API_KEY length:', ANTHROPIC_API_KEY ? ANTHROPIC_API_KEY.length : 0);
        const claudeResponse = await getClaudeResponse(question, history);
        answer = claudeResponse.text;
        updatedHistory = claudeResponse.updatedHistory;
        usedModel = 'claude';
      } else if (model === 'gemini') {
        if (genAI && isValidGeminiKey) {
          // –í—ã–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
          let finalSystemPrompt = SYSTEM_PROMPT;
          
          if (context === 'support' && systemPrompt) {
            finalSystemPrompt = systemPrompt;
            console.log('Using custom support system prompt');
          } else {
            console.log('Using default Gemini system prompt, length:', SYSTEM_PROMPT.length);
          }
          
          console.log('Gemini API key exists:', !!GEMINI_API_KEY);
          console.log('genAI initialized:', !!genAI);
          console.log('Context:', context);
          
          try {
            // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini
            let geminiModel;
            const modelsToTry = ['gemini-1.5-flash', 'gemini-1.5-pro', 'gemini-pro'];
            
            for (const modelName of modelsToTry) {
              try {
                console.log(`Trying Gemini model: ${modelName}`);
                geminiModel = genAI.getGenerativeModel({ 
                  model: modelName,
                  systemInstruction: finalSystemPrompt
                });
                console.log(`Successfully initialized model: ${modelName}`);
                break;
              } catch (e) {
                console.error(`Failed to initialize ${modelName}:`, e.message);
                if (modelName === modelsToTry[modelsToTry.length - 1]) {
                  throw new Error(`All Gemini models failed. Last error: ${e.message}`);
                }
              }
            }
            
            const chat = geminiModel.startChat({ history: history || [] });
            const result = await chat.sendMessage(question);
            answer = result.response.text();
            updatedHistory = await chat.getHistory();
            usedModel = 'gemini';
            console.log('Gemini answer generated, length:', answer.length);
          } catch (geminiError) {
            console.error('Gemini API call failed:', geminiError);
            throw geminiError;
          }
        } else {
          console.log('Gemini requested but key is invalid or genAI not initialized');
          throw new Error('Gemini API key is not valid or SDK not initialized');
        }
      } else if (isValidOpenRouterKey && model !== 'gemini' && model !== 'claude') {
        // Fallback –Ω–∞ GPT-4 –µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        console.log('Fallback to GPT-4 via OpenRouter');
        const gptResponse = await getOpenRouterResponse(question, history);
        answer = gptResponse.text;
        updatedHistory = gptResponse.updatedHistory;
        usedModel = 'gpt-4';
      } else if (isValidAnthropicKey && model !== 'gemini') {
        // Fallback –Ω–∞ Claude –µ—Å–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        console.log('Fallback to Claude (Gemini not available)');
        const claudeResponse = await getClaudeResponse(question, history);
        answer = claudeResponse.text;
        updatedHistory = claudeResponse.updatedHistory;
        usedModel = 'claude';
      } else {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º Gemini –¥–∞–∂–µ –±–µ–∑ API –∫–ª—é—á–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        console.log('Forcing Gemini usage for testing...');
        try {
          // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π API –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          const tempGenAI = new GoogleGenerativeAI('test-key-for-debugging');
          const geminiModel = tempGenAI.getGenerativeModel({ 
            model: "gemini-1.5-pro-latest",
            systemInstruction: SYSTEM_PROMPT || '–¢—ã ‚Äî –£–ø—Ä–∞–≤–ª—è—é—â–∏–π NeuroExpert v3.2. –ù–∞—á–∏–Ω–∞–π —Å –≤–æ–ø—Ä–æ—Å–∞ –æ –±–∏–∑–Ω–µ—Å-—Ü–µ–ª–∏.',
          });
          
          const chat = geminiModel.startChat({ history: history || [] });
          const result = await chat.sendMessage(question);
          answer = result.response.text();
          updatedHistory = await chat.getHistory();
          usedModel = 'gemini-forced';
          console.log('Forced Gemini answer generated, length:', answer.length);
        } catch (error) {
          console.error('Forced Gemini failed:', error);
          // Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ –ø—Ä–æ–º–ø—Ç—É
          answer = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –Ø –£–ø—Ä–∞–≤–ª—è—é—â–∏–π NeuroExpert v3.2. 

${SYSTEM_PROMPT ? '–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ.' : '–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.'}

–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–ª—é—á–µ–≤—É—é –±–∏–∑–Ω–µ—Å-—Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.${process.env.NODE_ENV !== 'production' ? `\n\n[–û—Ç–ª–∞–¥–∫–∞: API –∫–ª—é—á Gemini: ${!!GEMINI_API_KEY}, genAI: ${!!genAI}, –ø—Ä–æ–º–ø—Ç –¥–ª–∏–Ω–∞: ${SYSTEM_PROMPT.length}]` : ''}`;
          usedModel = 'fallback-with-prompt';
        }
      }
    } catch (error) {
      console.error('AI API Error:', error);
      console.error('Error details:', {
        message: error.message,
        stack: error.stack,
        model: model,
        isValidGeminiKey,
        isValidOpenRouterKey,
        isValidAnthropicKey
      });
      answer = `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏ ${model}. –î–µ—Ç–∞–ª–∏: ${error.message}`;
      usedModel = 'error';
    }

    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
    // const personalized = personalizeResponse(answer, context);
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏—é: –¥–ª—è pricing/timeline ‚Äì excitement, trust ‚Äì trust, –∏–Ω–∞—á–µ professional
    // const primaryIntent = analyzeUserIntent(question)[0];
    // const emotionMap = { pricing: 'excitement', timeline: 'excitement', trust: 'trust', services: 'professional' };
    // const emotion = emotionMap[primaryIntent] || 'professional';
    // const finalAnswer = addEmotionalTone(personalized, emotion);
    const finalAnswer = answer;

    const responseTime = Date.now() - startTime;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    sendTelegramNotification(question, finalAnswer, usedModel).catch(console.error);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–Ω—Ç –¥–ª—è follow-up
    // const intent = analyzeUserIntent(question);
    // const followUpQuestions = generateFollowUpQuestions(intent[0], context);

    return NextResponse.json({
      success: true,
      response: finalAnswer, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å UI –ø–æ–¥–¥–µ—Ä–∂–∫–∏
      reply: finalAnswer, // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'answer' –Ω–∞ 'reply' —Å–æ–≥–ª–∞—Å–Ω–æ —á–µ–∫-–ª–∏—Å—Ç—É
      model: usedModel,
      context: context,
      responseTime,
      updated_history: updatedHistory || history,
      timestamp: new Date().toISOString(),
      // intent,
      // followUpQuestions,
      // emotion: 'professional' // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
    });

  } catch (error) {
    console.error('Assistant API error:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// Export the POST handler
export async function POST(request) {
  // Temporarily disabled rate limiting for deployment
  // TODO: Fix rate limiter return type
  return handler(request);
}

// Add GET method for testing prompt loading
export async function GET() {
  try {
    const PROMPT_PATH = path.join(process.cwd(), 'app', 'utils', 'prompts', 'neuroexpert_v4_enhanced.md');
    
    let fileExists = false;
    let promptContent = '';
    let error = null;
    
    try {
      fileExists = fs.existsSync(PROMPT_PATH);
      if (fileExists) {
        promptContent = fs.readFileSync(PROMPT_PATH, 'utf-8');
      }
    } catch (e) {
      error = e.message;
    }
    
    return NextResponse.json({
      success: true,
      fileExists,
      promptPath: PROMPT_PATH,
      currentWorkingDir: process.cwd(),
      promptLength: promptContent.length,
      promptPreview: promptContent.substring(0, 500),
      error: error || null,
      env: {
        hasGeminiKey: !!process.env.GOOGLE_GEMINI_API_KEY,
        geminiKeyLength: process.env.GOOGLE_GEMINI_API_KEY ? process.env.GOOGLE_GEMINI_API_KEY.length : 0,
        hasAnthropicKey: !!process.env.ANTHROPIC_API_KEY,
        anthropicKeyLength: process.env.ANTHROPIC_API_KEY ? process.env.ANTHROPIC_API_KEY.length : 0,
        nodeEnv: process.env.NODE_ENV
      }
    });
  } catch (error) {
    return NextResponse.json({
      success: false,
      error: error.message
    }, { status: 500 });
  }
}