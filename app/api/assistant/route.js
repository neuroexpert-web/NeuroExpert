import { NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { assistantRateLimit } from '@/app/middleware/rateLimit';
import fs from 'fs';
import path from 'path';
// import { 
//   DIRECTOR_KNOWLEDGE_BASE, 
//   analyzeUserIntent,
//   personalizeResponse,
//   generateFollowUpQuestions,
//   addEmotionalTone
// } from '../../utils/ai-director-system';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–µ–π
const GEMINI_API_KEY = process.env.GOOGLE_GEMINI_API_KEY;
const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;

if (!GEMINI_API_KEY && !ANTHROPIC_API_KEY) {
  console.error('No AI API keys configured. Please check environment variables.');
}

const genAI = GEMINI_API_KEY ? new GoogleGenerativeAI(GEMINI_API_KEY) : null;

// Load system prompt for NeuroExpert v3.2 (used as systemInstruction)
const PROMPT_PATH = path.join(process.cwd(), 'app', 'utils', 'prompts', 'neuroexpert_v3_2.md');
let SYSTEM_PROMPT = '';
try {
  SYSTEM_PROMPT = fs.readFileSync(PROMPT_PATH, 'utf-8');
  console.log('System prompt loaded successfully, length:', SYSTEM_PROMPT.length);
} catch (e) {
  console.error('Failed to load system prompt for assistant:', e);
}

async function sendTelegramNotification(question, answer, model) {
  try {
    if (!process.env.TELEGRAM_BOT_TOKEN || !process.env.TELEGRAM_CHAT_ID) {
      return;
    }

    const message = `
ü§ñ <b>–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å AI —É–ø—Ä–∞–≤–ª—è—é—â–∏–º</b>

üë§ <b>–í–æ–ø—Ä–æ—Å:</b> ${question}

üéØ <b>–û—Ç–≤–µ—Ç:</b> ${answer}

üìä <b>–ú–æ–¥–µ–ª—å:</b> ${model}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
    `;

    const response = await fetch(
      `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: process.env.TELEGRAM_CHAT_ID,
          text: message,
          parse_mode: 'HTML'
        })
      }
    );

    if (!response.ok) {
      console.error('Failed to send Telegram notification');
    }
  } catch (error) {
    console.error('Telegram notification error:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Claude API (Anthropic)
async function getClaudeResponse(prompt) {
  if (!ANTHROPIC_API_KEY) {
    throw new Error('ANTHROPIC_API_KEY is not set');
  }

  try {
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': ANTHROPIC_API_KEY,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-opus-20240229',
        max_tokens: 1024,
        messages: [{
          role: 'user',
          content: prompt
        }],
        temperature: 0.7
      })
    });

    if (!response.ok) {
      throw new Error(`Claude API error: ${response.status}`);
    }

    const data = await response.json();
    return data.content[0].text;
  } catch (error) {
    console.error('Claude API error:', error);
    throw error;
  }
}

async function handler(request) {
  const startTime = Date.now();
  
  try {
    const { question, model = 'gemini', context = {} } = await request.json();
    
    // Log only in development without sensitive data
    if (process.env.NODE_ENV !== 'production') {
      console.log('Assistant API called:', { model, questionLength: question?.length });
    }
    
    if (!question) {
      return NextResponse.json({ error: '–í–æ–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, { status: 400 });
    }

    // –°–æ–∑–¥–∞—ë–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    // const enhancedPrompt = createEnhancedPrompt(question, context);
    
    let answer;
    let usedModel = model;
    
    try {
      if (model === 'claude' && ANTHROPIC_API_KEY) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Claude
        answer = await getClaudeResponse(question);
        usedModel = 'claude';
      } else if (genAI && GEMINI_API_KEY) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º v3.2
        const geminiModel = genAI.getGenerativeModel({ 
          model: "gemini-pro",
          systemInstruction: SYSTEM_PROMPT || undefined,
        });
        const result = await geminiModel.generateContent(question);
        const response = result.response;
        answer = response.text();
        usedModel = 'gemini';
      } else {
        // –î–µ–º–æ —Ä–µ–∂–∏–º —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
        // const intent = analyzeUserIntent(question);
        // answer = generateDemoResponse(question, intent);
        answer = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –Ø –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è –∏ –º–æ–≥—É —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –±–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã.';
        usedModel = 'demo';
      }
    } catch (error) {
      console.error('AI API Error:', error);
      answer = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (996) 009-63-34 –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ neuroexpertai@gmail.com. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º!';
      usedModel = 'error';
    }

    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
    // const personalized = personalizeResponse(answer, context);
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏—é: –¥–ª—è pricing/timeline ‚Äì excitement, trust ‚Äì trust, –∏–Ω–∞—á–µ professional
    // const primaryIntent = analyzeUserIntent(question)[0];
    // const emotionMap = { pricing: 'excitement', timeline: 'excitement', trust: 'trust', services: 'professional' };
    // const emotion = emotionMap[primaryIntent] || 'professional';
    // const finalAnswer = addEmotionalTone(personalized, emotion);
    const finalAnswer = answer;

    const responseTime = Date.now() - startTime;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    sendTelegramNotification(question, finalAnswer, usedModel).catch(console.error);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–Ω—Ç –¥–ª—è follow-up
    // const intent = analyzeUserIntent(question);
    // const followUpQuestions = generateFollowUpQuestions(intent[0], context);

    return NextResponse.json({
      answer: finalAnswer,
      model: usedModel,
      responseTime,
      // intent,
      // followUpQuestions,
      // emotion: 'professional' // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
    });

  } catch (error) {
    console.error('Assistant API error:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// Export the POST handler
export async function POST(request) {
  // Temporarily disabled rate limiting for deployment
  // TODO: Fix rate limiter return type
  return handler(request);
}