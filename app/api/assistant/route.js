import { NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { withRateLimit } from '../../middleware/rateLimit';
import { 
  DIRECTOR_KNOWLEDGE_BASE, 
  analyzeUserIntent,
  personalizeResponse,
  generateFollowUpQuestions,
  addEmotionalTone
} from '../../utils/ai-director-system';

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ ~64KB
const MAX_REQUEST_SIZE = 64 * 1024;

const TONES = {
  friendly: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —Ç—ë–ø–ª—ã–π, –≤–æ–≤–ª–µ–∫–∞—é—â–∏–π —Å—Ç–∏–ª—å',
  formal: '–ë–æ–ª–µ–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π, –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å',
  concise: '–ö–æ—Ä–æ—Ç–∫–∏–µ, –ø–æ –¥–µ–ª—É –æ—Ç–≤–µ—Ç—ã',
  persuasive: '–£–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–Ω —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–∏'
};

function normalizeTone(tone) {
  if (!tone) return null;
  const key = String(tone).toLowerCase();
  return TONES[key] ? key : null;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–µ–π
const GEMINI_API_KEY = process.env.GOOGLE_GEMINI_API_KEY;
const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;

if (!GEMINI_API_KEY && !ANTHROPIC_API_KEY) {
  console.error('No AI API keys found. Please set GOOGLE_GEMINI_API_KEY or ANTHROPIC_API_KEY');
}

const genAI = GEMINI_API_KEY ? new GoogleGenerativeAI(GEMINI_API_KEY) : null;

// –°–æ–∑–¥–∞—ë–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
function createEnhancedPrompt(userMessage, context = {}, toneKey = null) {
  const hour = new Date().getHours();
  const timeOfDay = hour < 12 ? 'morning' : hour < 18 ? 'day' : 'evening';
  const userIntent = analyzeUserIntent(userMessage);
  const toneInstruction = toneKey ? `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª—å: ${TONES[toneKey]}.` : '';
  
  return `
–¢—ã - ${DIRECTOR_KNOWLEDGE_BASE.personality.name}, ${DIRECTOR_KNOWLEDGE_BASE.personality.role}.

–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –°–¢–ò–õ–Æ: ${toneInstruction}

–õ–ò–ß–ù–û–°–¢–¨:
${JSON.stringify(DIRECTOR_KNOWLEDGE_BASE.personality, null, 2)}

–≠–ú–û–¶–ò–ò/–≠–ú–ü–ê–¢–ò–Ø:
${JSON.stringify(DIRECTOR_KNOWLEDGE_BASE.emotionalIntelligence.empathy, null, 2)}

–ö–û–ú–ü–ê–ù–ò–Ø/–£–°–õ–£–ì–ò/–ü–†–û–¶–ï–°–°/–í–û–ó–†–ê–ñ–ï–ù–ò–Ø/–≠–ö–°–ü–ï–†–¢–ò–ó–ê/–ú–ï–¢–†–ò–ö–ò:
${JSON.stringify({
  companyInfo: DIRECTOR_KNOWLEDGE_BASE.companyInfo,
  services: DIRECTOR_KNOWLEDGE_BASE.services,
  workProcess: DIRECTOR_KNOWLEDGE_BASE.workProcess,
  objectionHandling: DIRECTOR_KNOWLEDGE_BASE.objectionHandling,
  industryExpertise: DIRECTOR_KNOWLEDGE_BASE.industryExpertise,
  successMetrics: DIRECTOR_KNOWLEDGE_BASE.successMetrics,
}, null, 2)}

–ö–û–ù–¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
- –í—Ä–µ–º—è —Å—É—Ç–æ–∫: ${timeOfDay}
- –ù–∞–º–µ—Ä–µ–Ω–∏—è: ${userIntent.join(', ')}
- –ò—Å—Ç–æ—Ä–∏—è: ${context.previousInteractions || '–ü–µ—Ä–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ'}

–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –û–¢–í–ï–¢–£:
1) –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–∏–π —Å–º—ã—Å–ª –æ—Ç–≤–µ—Ç–∞
2) –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ–≤–µ—Ç/—á–∏—Å–ª–∞/–ø—Ä–∏–º–µ—Ä—ã
3) 1-2 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–µ–π—Å–∞
4) –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
5) –£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è

–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: "${userMessage}"
`;
}

async function sendTelegramNotification(question, answer, model) {
  try {
    if (!process.env.TELEGRAM_BOT_TOKEN || !process.env.TELEGRAM_CHAT_ID) {
      return;
    }

    const message = `
ü§ñ <b>–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å AI —É–ø—Ä–∞–≤–ª—è—é—â–∏–º</b>

üë§ <b>–í–æ–ø—Ä–æ—Å:</b> ${question}

üéØ <b>–û—Ç–≤–µ—Ç:</b> ${answer}

üìä <b>–ú–æ–¥–µ–ª—å:</b> ${model}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
    `;

    const response = await fetch(
      `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: process.env.TELEGRAM_CHAT_ID,
          text: message,
          parse_mode: 'HTML'
        })
      }
    );

    if (!response.ok) {
      console.error('Failed to send Telegram notification');
    }
  } catch (error) {
    console.error('Telegram notification error:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Claude API (Anthropic)
async function getClaudeResponse(prompt) {
  if (!ANTHROPIC_API_KEY) {
    throw new Error('ANTHROPIC_API_KEY is not set');
  }

  try {
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': ANTHROPIC_API_KEY,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-opus-20240229',
        max_tokens: 1024,
        messages: [{
          role: 'user',
          content: prompt
        }],
        temperature: 0.7
      })
    });

    if (!response.ok) {
      throw new Error(`Claude API error: ${response.status}`);
    }

    const data = await response.json();
    return data.content[0].text;
  } catch (error) {
    console.error('Claude API error:', error);
    throw error;
  }
}

async function handler(request) {
  const startTime = Date.now();
  
  try {
    // –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–∞–∑, –µ—Å–ª–∏ Content-Length —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
    const contentLength = Number(request.headers.get('content-length') || 0);
    if (contentLength > MAX_REQUEST_SIZE) {
      return NextResponse.json({ error: '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∑–∞–ø—Ä–æ—Å' }, { status: 413, headers: { 'Cache-Control': 'no-store' } });
    }

    const { question, model = 'gemini', context = {}, tone } = await request.json();
    
    if (process.env.NODE_ENV !== 'production') {
      console.log('Assistant API called:', { question, model, tone });
      console.log('API Keys available:', { 
        gemini: !!GEMINI_API_KEY, 
        claude: !!ANTHROPIC_API_KEY 
      });
    }
    
    if (!question || typeof question !== 'string' || question.trim().length === 0) {
      return NextResponse.json({ error: '–í–æ–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, { status: 400, headers: { 'Cache-Control': 'no-store' } });
    }
    if (question.length > 4000) {
      return NextResponse.json({ error: '–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π' }, { status: 413, headers: { 'Cache-Control': 'no-store' } });
    }

    const toneKey = normalizeTone(tone);

    // –°–æ–∑–¥–∞—ë–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    const enhancedPrompt = createEnhancedPrompt(question, context, toneKey);
    
    let answer;
    let usedModel = model;
    
    try {
      if (model === 'claude' && ANTHROPIC_API_KEY) {
        answer = await getClaudeResponse(enhancedPrompt);
        usedModel = 'claude';
      } else if (genAI && GEMINI_API_KEY) {
        const geminiModel = genAI.getGenerativeModel({ model: "gemini-pro" });
        const result = await geminiModel.generateContent(enhancedPrompt);
        const response = result.response;
        answer = response.text();
        usedModel = 'gemini';
      } else {
        const intent = analyzeUserIntent(question);
        answer = generateDemoResponse(question, intent);
        usedModel = 'demo';
      }
    } catch (error) {
      console.error('AI API Error:', error);
      answer = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (904) 047-63-83 –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ aineuroexpert@gmail.com. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º!';
      usedModel = 'error';
    }

    const responseTime = Date.now() - startTime;
    sendTelegramNotification(question, answer, usedModel).catch(console.error);
    const intent = analyzeUserIntent(question);
    const followUpQuestions = generateFollowUpQuestions(intent[0], context);

    return NextResponse.json({
      answer,
      model: usedModel,
      responseTime,
      intent,
      followUpQuestions,
      tone: toneKey || 'default',
      emotion: 'professional'
    }, { headers: { 'Cache-Control': 'no-store' } });

  } catch (error) {
    console.error('Assistant API error:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500, headers: { 'Cache-Control': 'no-store' } }
    );
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–æ–≤
function generateDemoResponse(question, intent) {
  const lowerQuestion = question.toLowerCase();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
  if (intent.includes('pricing')) {
    return DIRECTOR_KNOWLEDGE_BASE.objectionHandling.expensive.response;
  }
  
  if (intent.includes('timeline')) {
    return `‚ö° –û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —Å—Ä–æ–∫–∏!

${DIRECTOR_KNOWLEDGE_BASE.workProcess.steps.map(step => 
  `${step.number}. ${step.name}: ${step.duration}`
).join('\n')}

–í —Å—Ä–µ–¥–Ω–µ–º:
‚Ä¢ Landing page: ${DIRECTOR_KNOWLEDGE_BASE.services.websites.landing.timeline}
‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç: ${DIRECTOR_KNOWLEDGE_BASE.services.websites.corporate.timeline}
‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω: ${DIRECTOR_KNOWLEDGE_BASE.services.websites.ecommerce.timeline}

–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`;
  }
  
  if (intent.includes('services')) {
    return `üöÄ –†–∞–¥ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–∞—à–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö!

–ú—ã —Å–æ–∑–¥–∞—ë–º —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–æ—Å—è—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:

üíé –í–µ–±-—Ä–µ—à–µ–Ω–∏—è:
${Object.values(DIRECTOR_KNOWLEDGE_BASE.services.websites).map(service => 
  `‚Ä¢ ${service.name} - ${service.price}, ROI: ${service.roi}`
).join('\n')}

üì± –ú–æ–±–∏–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:
‚Ä¢ ${DIRECTOR_KNOWLEDGE_BASE.services.applications.mobile.name} - ${DIRECTOR_KNOWLEDGE_BASE.services.applications.mobile.price}

ü§ñ AI-—Ä–µ—à–µ–Ω–∏—è:
${Object.values(DIRECTOR_KNOWLEDGE_BASE.services.ai_solutions).map(solution => 
  `‚Ä¢ ${solution.name} - ${solution.price}`
).join('\n')}

–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –±–ª–∏–∂–µ –∫ –≤–∞—à–∏–º –∑–∞–¥–∞—á–∞–º?`;
  }
  
  // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
  return `${DIRECTOR_KNOWLEDGE_BASE.emotionalIntelligence.greetings.default}

${DIRECTOR_KNOWLEDGE_BASE.companyInfo.mission}

–ò–º–µ—é ${DIRECTOR_KNOWLEDGE_BASE.personality.experience}. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–æ—Å—è—Ç –∏–∑–º–µ—Ä–∏–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å —Ä–∞—Å—á—ë—Ç–æ–º ROI!`;
}

// Export with rate limiting
export const POST = withRateLimit(handler, 'ai');