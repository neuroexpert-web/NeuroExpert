import { NextResponse } from 'next/server';

// Telegram Bot API endpoint
const TELEGRAM_API_URL = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}`;

export async function POST(request) {
  try {
    const body = await request.json();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
    if (body.action === 'send_notification') {
      return await sendNotification(body);
    } else if (body.action === 'webhook') {
      return await handleWebhook(body);
    } else if (body.action === 'setup_bot') {
      return await setupBot();
    }
    
    return NextResponse.json(
      { error: 'Invalid action' },
      { status: 400 }
    );
  } catch (error) {
    console.error('Telegram API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function sendNotification({ chatId, message, options = {} }) {
  if (!chatId || !message) {
    return NextResponse.json(
      { error: 'Missing chatId or message' },
      { status: 400 }
    );
  }

  const payload = {
    chat_id: chatId,
    text: message,
    parse_mode: 'HTML',
    ...options
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
  if (options.buttons) {
    payload.reply_markup = {
      inline_keyboard: options.buttons
    };
  }

  try {
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload),
    });

    const data = await response.json();
    
    if (!data.ok) {
      throw new Error(data.description || 'Failed to send message');
    }

    return NextResponse.json({
      success: true,
      messageId: data.result.message_id
    });
  } catch (error) {
    return NextResponse.json(
      { error: error.message },
      { status: 500 }
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram
async function handleWebhook(update) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (update.message) {
    const { chat, text, from } = update.message;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`Telegram message from ${from.username}: ${text}`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text === '/start') {
      await sendWelcomeMessage(chat.id, from.first_name);
    } else if (text === '/help') {
      await sendHelpMessage(chat.id);
    } else if (text === '/status') {
      await sendStatusMessage(chat.id);
    } else {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      await processUserMessage(chat.id, text, from);
    }
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –∫–Ω–æ–ø–∫–∏
  if (update.callback_query) {
    await handleCallbackQuery(update.callback_query);
  }
  
  return NextResponse.json({ ok: true });
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async function sendWelcomeMessage(chatId, firstName) {
  const message = `
üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NeuroExpert Bot!</b>

–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üìä –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
‚Ä¢ üìà –°–ª–µ–¥–∏—Ç—å –∑–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ ü§ñ –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ üì± –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π –ø—Ä—è–º–æ –∏–∑ Telegram

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.
  `;
  
  const buttons = [
    [
      { text: 'üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data: 'connect_account' },
      { text: 'üìä –î–µ–º–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', callback_data: 'show_demo' }
    ],
    [
      { text: 'üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'ask_question' }
    ]
  ];
  
  await sendNotification({
    chatId,
    message,
    options: { buttons }
  });
}

// –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
async function sendHelpMessage(chatId) {
  const message = `
üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/status - –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
/analytics - –ö—Ä–∞—Ç–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üí° <i>–°–æ–≤–µ—Ç: –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!</i>
  `;
  
  await sendNotification({ chatId, message });
}

// –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
async function sendStatusMessage(chatId) {
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const isConnected = false; // –ó–∞–≥–ª—É—à–∫–∞
  
  const message = isConnected ? `
‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω</b>

‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: NeuroExpert
‚Ä¢ –¢–∞—Ä–∏—Ñ: –ë–∏–∑–Ω–µ—Å
‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω –¥–æ: 31.12.2025
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã

üìä –ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: neuroexpert.io/dashboard
  ` : `
‚ùå <b>–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</b>

–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:
1. –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç NeuroExpert
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
3. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram"
4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
  `;
  
  const buttons = isConnected ? [] : [
    [{ text: 'üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data: 'connect_account' }]
  ];
  
  await sendNotification({
    chatId,
    message,
    options: { buttons }
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function processUserMessage(chatId, text, from) {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å AI –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
  await sendNotification({
    chatId,
    message: `–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}". –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ NeuroExpert! ü§ñ`,
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async function handleCallbackQuery(callbackQuery) {
  const { data, from, message } = callbackQuery;
  const chatId = message.chat.id;
  
  switch (data) {
    case 'connect_account':
      await sendNotification({
        chatId,
        message: 'üîó –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://neuroexpert.io/connect-telegram?chat_id=' + chatId
      });
      break;
      
    case 'show_demo':
      await sendDemoAnalytics(chatId);
      break;
      
    case 'ask_question':
      await sendNotification({
        chatId,
        message: 'üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!'
      });
      break;
  }
  
  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
  await fetch(`${TELEGRAM_API_URL}/answerCallbackQuery`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ callback_query_id: callbackQuery.id })
  });
}

// –î–µ–º–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
async function sendDemoAnalytics(chatId) {
  const message = `
üìä <b>–î–µ–º–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>

üìà <b>–ü—Ä–æ–¥–∞–∂–∏</b>
‚Ä¢ –í—ã—Ä—É—á–∫–∞: 156,430 ‚ÇΩ (+23%)
‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: 47 (+15%)
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: 3,328 ‚ÇΩ (+7%)

üë• <b>–ö–ª–∏–µ–Ω—Ç—ã</b>
‚Ä¢ –ù–æ–≤—ã—Ö: 12
‚Ä¢ –í–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è: 35
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: 3.2%

üéØ <b>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥</b>
‚Ä¢ CTR: 2.8% (+0.5%)
‚Ä¢ CAC: 1,240 ‚ÇΩ (-18%)
‚Ä¢ ROI: 285%

üí° <b>AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>
–£–≤–µ–ª–∏—á—å—Ç–µ –±—é–¥–∂–µ—Ç –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é —Ä–µ–∫–ª–∞–º—É –Ω–∞ 15% - –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ +42,000 ‚ÇΩ/–º–µ—Å

<i>–≠—Ç–æ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.</i>
  `;
  
  await sendNotification({ chatId, message });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ (webhook)
async function setupBot() {
  const webhookUrl = `${process.env.NEXT_PUBLIC_API_URL}/api/integrations/telegram`;
  
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/setWebhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        url: webhookUrl,
        allowed_updates: ['message', 'callback_query']
      })
    });
    
    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    return NextResponse.json(
      { error: error.message },
      { status: 500 }
    );
  }
}

export async function GET() {
  // Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
  return NextResponse.json({
    status: 'ok',
    bot: process.env.TELEGRAM_BOT_TOKEN ? 'configured' : 'not configured'
  });
}