/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI-–∞–≥–µ–Ω—Ç–æ–≤
 */

const testAIIntegration = async () => {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI-–∞–≥–µ–Ω—Ç–æ–≤...\n');

  // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
  await new Promise(resolve => setTimeout(resolve, 5000));

  const testQueries = [
    {
      query: "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö",
      context: { testMode: true }
    },
    {
      query: "–ö–∞–∫ –º–Ω–µ —É–ª—É—á—à–∏—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤?",
      context: { requireCapabilities: ['analysis'] }
    },
    {
      query: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞",
      context: { requireCapabilities: ['analysis', 'long-context'] }
    }
  ];

  for (const test of testQueries) {
    console.log(`\nüìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${test.query}"`);
    console.log('‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');

    try {
      const response = await fetch('http://localhost:3000/api/ai-agent', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-neuroexpert-csrf': '1'
        },
        body: JSON.stringify(test)
      });

      const data = await response.json();

      if (data.success) {
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞: ${data.data.agent}`);
        console.log(`üìä –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞: ${data.data.quality.score}%`);
        console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${data.data.responseTime}ms`);
        console.log(`üí¨ –û—Ç–≤–µ—Ç: ${data.data.content.substring(0, 200)}...`);
        
        if (data.data.suggestions?.length > 0) {
          console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:');
          data.data.suggestions.forEach(s => console.log(`   - ${s}`));
        }
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞: ${data.error}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
    }
  }

  console.log('\n\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤...');
  
  try {
    const metricsResponse = await fetch('http://localhost:3000/api/ai-agent');
    const metricsData = await metricsResponse.json();
    
    if (metricsData.success) {
      console.log('\nüéØ –ú–µ—Ç—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤:');
      
      Object.entries(metricsData.data.agents).forEach(([agent, metrics]) => {
        console.log(`\n${agent.toUpperCase()}:`);
        console.log(`  ‚Ä¢ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${metrics.satisfaction.avg}%`);
        console.log(`  ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: ${metrics.accuracy.avg}%`);
        console.log(`  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${metrics.responseTime.avg}ms`);
        console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: ${metrics.totalInteractions}`);
      });
      
      if (metricsData.data.summary.bestPerforming) {
        console.log(`\nüèÜ –õ—É—á—à–∏–π –∞–≥–µ–Ω—Ç: ${metricsData.data.summary.bestPerforming.agent} (${metricsData.data.summary.bestPerforming.satisfactionScore}%)`);
      }
    }
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏:', error.message);
  }

  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testAIIntegration().catch(console.error);