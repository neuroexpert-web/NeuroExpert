#!/usr/bin/env node

console.log('üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–û–ï–ö–¢–ê\n');

async function check() {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    const mainPage = await fetch('http://localhost:3000');
    const html = await mainPage.text();

    console.log('   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    console.log('   –†–∞–∑–º–µ—Ä HTML:', (html.length / 1024).toFixed(1), 'KB');

    // 2. –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    console.log('\n2. –ü–æ–∏—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:');

    const components = {
      '–ó–∞–≥–æ–ª–æ–≤–æ–∫ H1': /<h1/i,
      '–§–æ—Ä–º–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤': /contact|—Ñ–æ—Ä–º–∞|–∑–∞—è–≤–∫/i,
      '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ROI': /roi|–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä/i,
      –ö–Ω–æ–ø–∫–∏: /<button/i,
      'AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã': /ai|smart|floating/i,
    };

    for (const [name, pattern] of Object.entries(components)) {
      if (pattern.test(html)) {
        console.log(`   ‚úÖ ${name} –Ω–∞–π–¥–µ–Ω`);
      } else {
        console.log(`   ‚ùå ${name} –ù–ï –Ω–∞–π–¥–µ–Ω`);
      }
    }

    // 3. API —Ç–µ—Å—Ç—ã
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ API:');

    // Health check
    try {
      const health = await fetch('http://localhost:3000/api/health');
      const healthData = await health.json();
      console.log(`   ‚úÖ Health API: ${healthData.status} (${health.status})`);
    } catch (e) {
      console.log('   ‚ùå Health API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    // Contact form
    try {
      const contact = await fetch('http://localhost:3000/api/contact-form', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-neuroexpert-csrf': '1',
        },
        body: JSON.stringify({
          name: 'Test',
          email: 'test@test.com',
          message: 'Test',
        }),
      });
      const contactData = await contact.json();
      console.log(
        `   ‚úÖ Contact API: ${contact.status === 200 ? '—Ä–∞–±–æ—Ç–∞–µ—Ç' : '–æ—à–∏–±–∫–∞ ' + contact.status}`
      );
    } catch (e) {
      console.log('   ‚ùå Contact API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü:');

    const pages = ['/api-docs', '/design-showcase', '/test-sentry'];

    for (const page of pages) {
      try {
        const response = await fetch(`http://localhost:3000${page}`);
        console.log(`   ${response.ok ? '‚úÖ' : '‚ùå'} ${page} - ${response.status}`);
      } catch (e) {
        console.log(`   ‚ùå ${page} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
      }
    }

    // 5. –ò—Ç–æ–≥
    console.log('\nüìä –†–ï–ó–Æ–ú–ï:');
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è');
    console.log('‚úÖ API endpoints –¥–æ—Å—Ç—É–ø–Ω—ã');
    console.log('\nüí° –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê:', error.message);
    console.log('\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ dev —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run dev');
  }
}

check();
