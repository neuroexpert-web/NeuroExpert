#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º...\n');

// 1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
function addMobileStyles() {
  console.log('üì± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');

  const mobileStyles = `
/* === –ú–û–ë–ò–õ–¨–ù–ê–Ø –ê–î–ê–ü–¢–ê–¶–ò–Ø === */

/* –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã (–ø–æ—Ä—Ç—Ä–µ—Ç) */
@media only screen and (max-width: 480px) {
  /* –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ */
  body {
    font-size: 14px;
  }
  
  h1 {
    font-size: 2rem !important;
    line-height: 1.2;
  }
  
  h2 {
    font-size: 1.5rem !important;
  }
  
  h3 {
    font-size: 1.25rem !important;
  }
  
  /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã */
  .container {
    padding: 1rem !important;
    max-width: 100% !important;
  }
  
  /* Hero —Å–µ–∫—Ü–∏—è */
  .hero-section {
    padding: 2rem 1rem !important;
    min-height: 80vh !important;
  }
  
  .hero-content h1 {
    font-size: 2rem !important;
  }
  
  /* –ö–Ω–æ–ø–∫–∏ */
  .btn, button {
    padding: 0.75rem 1.5rem !important;
    font-size: 0.9rem !important;
    width: 100%;
    margin-bottom: 1rem;
  }
  
  /* –ö–∞—Ä—Ç–æ—á–∫–∏ */
  .card, .feature-card, .pricing-card {
    padding: 1.5rem !important;
    margin-bottom: 1rem;
  }
  
  /* –°–µ—Ç–∫–∏ */
  .grid, .features-grid, .pricing-grid {
    grid-template-columns: 1fr !important;
    gap: 1rem !important;
  }
  
  /* –§–æ—Ä–º—ã */
  .form-group {
    margin-bottom: 1rem;
  }
  
  input, textarea, select {
    width: 100% !important;
    font-size: 16px !important; /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑—É–º –Ω–∞ iOS */
  }
  
  /* ROI –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä */
  .roi-calculator {
    padding: 1rem !important;
  }
  
  .roi-inputs {
    flex-direction: column !important;
  }
  
  /* AI —á–∞—Ç */
  .ai-float-button {
    bottom: 20px !important;
    right: 20px !important;
    width: 50px !important;
    height: 50px !important;
  }
  
  .ai-chat-container {
    width: 100% !important;
    height: 100vh !important;
    bottom: 0 !important;
    right: 0 !important;
    border-radius: 0 !important;
  }
  
  /* –ù–∞–≤–∏–≥–∞—Ü–∏—è */
  .nav-menu {
    flex-direction: column;
    width: 100%;
  }
  
  /* –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */
  .desktop-only {
    display: none !important;
  }
  
  /* –ê–Ω–∏–º–∞—Ü–∏–∏ - —É–ø—Ä–æ—â–∞–µ–º –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */
  .animated-element {
    animation: none !important;
  }
}

/* –ü–ª–∞–Ω—à–µ—Ç—ã */
@media only screen and (min-width: 481px) and (max-width: 768px) {
  .container {
    padding: 1.5rem !important;
  }
  
  .grid, .features-grid {
    grid-template-columns: repeat(2, 1fr) !important;
  }
  
  h1 {
    font-size: 2.5rem !important;
  }
}

/* –ú–∞–ª—ã–µ –Ω–æ—É—Ç–±—É–∫–∏ */
@media only screen and (min-width: 769px) and (max-width: 1024px) {
  .container {
    max-width: 90% !important;
  }
}

/* –í—ã—Å–æ–∫–∏–µ –º–æ–±–∏–ª—å–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã */
@media only screen and (max-height: 600px) and (orientation: landscape) {
  .hero-section {
    min-height: auto !important;
    padding: 1rem !important;
  }
}

/* –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è OLED —ç–∫—Ä–∞–Ω–æ–≤ */
@media (prefers-color-scheme: dark) {
  :root {
    --noir-900: #000000;
  }
}

/* Reduced motion –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}
`;

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ globals.css
  const globalsPath = path.join(process.cwd(), 'app/globals.css');
  if (fs.existsSync(globalsPath)) {
    const currentContent = fs.readFileSync(globalsPath, 'utf8');
    if (!currentContent.includes('–ú–û–ë–ò–õ–¨–ù–ê–Ø –ê–î–ê–ü–¢–ê–¶–ò–Ø')) {
      fs.appendFileSync(globalsPath, mobileStyles);
      console.log('‚úÖ –ú–æ–±–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ globals.css');
    } else {
      console.log('‚ÑπÔ∏è  –ú–æ–±–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    }
  }
}

// 2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
function createLinkChecker() {
  console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫...');

  const linkChecker = `'use client';

import { useEffect, useState } from 'react';
import { showNotification } from './enhanced/NotificationSystem';

export default function LinkChecker() {
  const [brokenLinks, setBrokenLinks] = useState([]);
  const [checking, setChecking] = useState(false);

  const checkAllLinks = async () => {
    setChecking(true);
    const links = document.querySelectorAll('a, button');
    const broken = [];

    links.forEach((link, index) => {
      const href = link.href || link.getAttribute('data-href');
      const onClick = link.onclick || link.getAttribute('onClick');
      
      if (!href && !onClick) {
        broken.push({
          element: link.outerHTML.substring(0, 100),
          text: link.textContent,
          issue: '–ù–µ—Ç href –∏–ª–∏ onClick'
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∫–æ—Ä–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
      if (href && href.includes('#')) {
        const anchor = href.split('#')[1];
        if (anchor && !document.getElementById(anchor)) {
          broken.push({
            element: link.outerHTML.substring(0, 100),
            text: link.textContent,
            issue: \`–Ø–∫–æ—Ä—å #\${anchor} –Ω–µ –Ω–∞–π–¥–µ–Ω\`
          });
        }
      }
    });

    setBrokenLinks(broken);
    setChecking(false);

    if (broken.length === 0) {
      showNotification.success('–í—Å–µ —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    } else {
      showNotification.warning(\`–ù–∞–π–¥–µ–Ω–æ \${broken.length} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Å—ã–ª–æ–∫\`);
    }
  };

  useEffect(() => {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ dev —Ä–µ–∂–∏–º–µ
    if (process.env.NODE_ENV === 'development') {
      setTimeout(checkAllLinks, 2000);
    }
  }, []);

  if (process.env.NODE_ENV !== 'development') return null;

  return (
    <div style={{
      position: 'fixed',
      bottom: '100px',
      right: '20px',
      background: 'var(--noir-800)',
      padding: '1rem',
      borderRadius: '8px',
      border: '1px solid var(--gold-500)',
      zIndex: 9999,
      maxWidth: '300px',
      maxHeight: '400px',
      overflow: 'auto'
    }}>
      <h4 style={{ color: 'var(--gold-500)', marginBottom: '1rem' }}>
        üîç Link Checker
      </h4>
      
      <button 
        onClick={checkAllLinks}
        disabled={checking}
        style={{
          background: 'var(--gold-500)',
          color: 'var(--noir-900)',
          border: 'none',
          padding: '0.5rem 1rem',
          borderRadius: '4px',
          cursor: checking ? 'wait' : 'pointer',
          marginBottom: '1rem',
          width: '100%'
        }}
      >
        {checking ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏'}
      </button>
      
      {brokenLinks.length > 0 && (
        <div>
          <p style={{ color: 'var(--warning)', marginBottom: '0.5rem' }}>
            –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {brokenLinks.length}
          </p>
          <ul style={{ fontSize: '0.8rem', paddingLeft: '1rem' }}>
            {brokenLinks.map((link, index) => (
              <li key={index} style={{ marginBottom: '0.5rem', color: 'var(--gray-400)' }}>
                <strong>{link.text}</strong><br/>
                <small>{link.issue}</small>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}`;

  const componentPath = path.join(process.cwd(), 'app/components/LinkChecker.js');
  fs.writeFileSync(componentPath, linkChecker);
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç LinkChecker.js');
}

// 3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ viewport –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
function fixViewport() {
  console.log('üìê –ü—Ä–æ–≤–µ—Ä–∫–∞ viewport meta —Ç–µ–≥–∞...');

  const layoutPath = path.join(process.cwd(), 'app/layout.js');
  if (fs.existsSync(layoutPath)) {
    const content = fs.readFileSync(layoutPath, 'utf8');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ viewport
    if (!content.includes('viewport') || !content.includes('width=device-width')) {
      console.log('‚ö†Ô∏è  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å viewport –≤ metadata');
    } else {
      console.log('‚úÖ Viewport –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }
  }
}

// 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤
function createTextValidator() {
  console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤...');

  const validator = `'use client';

import { useEffect, useState } from 'react';

export default function TextValidator() {
  const [issues, setIssues] = useState([]);

  useEffect(() => {
    const checkTexts = () => {
      const textIssues = [];
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Lorem ipsum
      if (document.body.textContent.includes('Lorem ipsum')) {
        textIssues.push('–ù–∞–π–¥–µ–Ω placeholder —Ç–µ–∫—Å—Ç (Lorem ipsum)');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      document.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(heading => {
        if (!heading.textContent.trim()) {
          textIssues.push(\`–ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: <\${heading.tagName.toLowerCase()}>\`);
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∏—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã
      const brokenChars = ['ÔøΩ', '???', 'undefined', 'null'];
      brokenChars.forEach(char => {
        if (document.body.textContent.includes(char)) {
          textIssues.push(\`–ù–∞–π–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª: "\${char}"\`);
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ alt —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      document.querySelectorAll('img').forEach(img => {
        if (!img.alt) {
          textIssues.push(\`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ alt —Ç–µ–∫—Å—Ç–∞: \${img.src}\`);
        }
      });
      
      setIssues(textIssues);
    };
    
    setTimeout(checkTexts, 1000);
  }, []);

  if (process.env.NODE_ENV !== 'development' || issues.length === 0) return null;

  return (
    <div style={{
      position: 'fixed',
      top: '20px',
      right: '20px',
      background: 'var(--noir-800)',
      padding: '1rem',
      borderRadius: '8px',
      border: '1px solid var(--warning)',
      zIndex: 9999,
      maxWidth: '300px'
    }}>
      <h4 style={{ color: 'var(--warning)', marginBottom: '0.5rem' }}>
        ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ–∫—Å—Ç–æ–º
      </h4>
      <ul style={{ fontSize: '0.8rem', paddingLeft: '1rem' }}>
        {issues.map((issue, index) => (
          <li key={index} style={{ marginBottom: '0.25rem' }}>
            {issue}
          </li>
        ))}
      </ul>
    </div>
  );
}`;

  const validatorPath = path.join(process.cwd(), 'app/components/TextValidator.js');
  fs.writeFileSync(validatorPath, validator);
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç TextValidator.js');
}

// 5. –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
function runAutoFix() {
  addMobileStyles();
  createLinkChecker();
  fixViewport();
  createTextValidator();

  console.log('\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
  console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
  console.log('2. –î–æ–±–∞–≤—å—Ç–µ LinkChecker –∏ TextValidator –≤ layout.js (—Ç–æ–ª—å–∫–æ –¥–ª—è dev)');
  console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ responsive-test.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
  console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é');
}

// –ó–∞–ø—É—Å–∫
runAutoFix();
