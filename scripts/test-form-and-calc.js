#!/usr/bin/env node

const { execSync } = require('child_process');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ ROI\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ dev —Å–µ—Ä–≤–µ—Ä
try {
  execSync('curl -s http://localhost:3000 > /dev/null 2>&1');
  console.log('‚úÖ Dev —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000');
} catch (error) {
  console.log('‚ùå Dev —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
  process.exit(1);
}

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoint —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
console.log('\nüìù –¢–µ—Å—Ç 1: API —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏');
console.log('=====================================');

async function testContactForm() {
  try {
    // –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const validData = {
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      email: 'test@example.com',
      phone: '+7 (999) 123-45-67',
      company: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
      message: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º—ã',
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    const response = await fetch('http://localhost:3000/api/contact-form', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-neuroexpert-csrf': '1',
      },
      body: JSON.stringify(validData),
    });

    const result = await response.json();

    if (response.ok) {
      console.log('‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
      console.log('   –û—Ç–≤–µ—Ç:', result.message);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', result.error);
    }

    // –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('\nüì§ –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º email...');
    const invalidData = {
      name: '–¢–µ—Å—Ç',
      email: '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π-email',
      message: '–¢–µ—Å—Ç',
    };

    const invalidResponse = await fetch('http://localhost:3000/api/contact-form', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-neuroexpert-csrf': '1',
      },
      body: JSON.stringify(invalidData),
    });

    const invalidResult = await invalidResponse.json();

    if (!invalidResponse.ok) {
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      console.log('   –û—à–∏–±–∫–∞:', invalidResult.error);
    } else {
      console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–∏–Ω—è—Ç—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }

    // –¢–µ—Å—Ç —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    console.log('\nüì§ –¢–µ—Å—Ç —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏...');
    const emptyData = {
      name: '–¢–µ—Å—Ç',
      // email –∏ message –ø—Ä–æ–ø—É—â–µ–Ω—ã
    };

    const emptyResponse = await fetch('http://localhost:3000/api/contact-form', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-neuroexpert-csrf': '1',
      },
      body: JSON.stringify(emptyData),
    });

    const emptyResult = await emptyResponse.json();

    if (!emptyResponse.ok) {
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('   –û—à–∏–±–∫–∞:', emptyResult.error);
    } else {
      console.log('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ä–º—ã:', error.message);
  }
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ ROI
console.log('\nüí∞ –¢–µ—Å—Ç 2: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ROI');
console.log('========================');

function testROICalculator() {
  console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–æ–≤:');

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testCases = [
    {
      name: '–ú–∞–ª—ã–π –±–∏–∑–Ω–µ—Å + –†–æ–∑–Ω–∏—Ü–∞',
      businessSize: 'small',
      industry: 'retail',
      budget: 200000,
      expectedMultiplier: 3.2 * 1.2,
    },
    {
      name: '–°—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å + IT',
      businessSize: 'medium',
      industry: 'it',
      budget: 500000,
      expectedMultiplier: 4.5 * 1.5,
    },
    {
      name: '–ö—Ä—É–ø–Ω—ã–π –±–∏–∑–Ω–µ—Å + –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
      businessSize: 'large',
      industry: 'production',
      budget: 1000000,
      expectedMultiplier: 6.0 * 1.1,
    },
  ];

  testCases.forEach((test) => {
    console.log(`\n   ${test.name}:`);
    console.log(`   - –ë—é–¥–∂–µ—Ç: ${test.budget.toLocaleString('ru-RU')} ‚ÇΩ`);

    const roi = Math.round(test.expectedMultiplier * 100);
    const savings = Math.round(test.budget * 0.35);
    const growth = Math.round(test.budget * test.expectedMultiplier);
    const payback = Math.round(test.budget / (savings / 12));

    console.log(`   - ROI: ${roi}%`);
    console.log(`   - –≠–∫–æ–Ω–æ–º–∏—è: ${savings.toLocaleString('ru-RU')} ‚ÇΩ`);
    console.log(`   - –†–æ—Å—Ç: ${growth.toLocaleString('ru-RU')} ‚ÇΩ`);
    console.log(`   - –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: ${payback} –º–µ—Å.`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤
    if (roi > 0 && savings > 0 && growth > test.budget && payback > 0) {
      console.log('   ‚úÖ –†–∞—Å—á–µ—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
    } else {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö');
    }
  });
}

// –¢–µ—Å—Ç 3: UI —Ç–µ—Å—Ç—ã
console.log('\nüñ•Ô∏è  –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞');
console.log('==============================');

async function testUI() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const pageResponse = await fetch('http://localhost:3000');
    const html = await pageResponse.text();

    console.log('\nüì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã
    if (html.includes('contact-form') || html.includes('ContactForm')) {
      console.log('‚úÖ –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞–π–¥–µ–Ω–∞');
    } else {
      console.log('‚ùå –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    if (html.includes('roi-calculator') || html.includes('ROICalculator')) {
      console.log('‚úÖ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ROI –Ω–∞–π–¥–µ–Ω');
    } else {
      console.log('‚ùå –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ROI –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    if (html.includes('required') && html.includes('name="name"')) {
      console.log('‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    } else {
      console.log('‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ UI:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
  await testContactForm();
  testROICalculator();
  await testUI();

  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
  console.log('================');
  console.log('‚úÖ –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:');
  console.log('   - API endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç');
  console.log('   - –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
  console.log('   - –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)');
  console.log('\n‚úÖ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ROI:');
  console.log('   - –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
  console.log('   - –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
  console.log('   - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã —Ä–∞–±–æ—Ç–∞–µ—Ç');

  console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  console.log('2. –î–æ–±–∞–≤—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
  console.log('3. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–ø—á—É –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞');
  console.log('4. –î–æ–±–∞–≤—å—Ç–µ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª');
  console.log('5. –î–æ–±–∞–≤—å—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runAllTests().catch(console.error);
