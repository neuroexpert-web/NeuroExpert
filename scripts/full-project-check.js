#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–û–ï–ö–¢–ê NEUROEXPERT\n');
console.log('=====================================\n');

const results = {
  passed: [],
  failed: [],
  warnings: [],
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: Dev —Å–µ—Ä–≤–µ—Ä
function checkDevServer() {
  console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ dev —Å–µ—Ä–≤–µ—Ä–∞...');
  try {
    execSync('curl -s http://localhost:3000 > /dev/null 2>&1');
    results.passed.push('Dev —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3000');
    return true;
  } catch (error) {
    results.failed.push('Dev —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function checkPages() {
  console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü...');

  const pages = [
    { url: 'http://localhost:3000', name: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' },
    { url: 'http://localhost:3000/api-docs', name: 'API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è' },
    { url: 'http://localhost:3000/design-showcase', name: 'Showcase –¥–∏–∑–∞–π–Ω–∞' },
    { url: 'http://localhost:3000/test-sentry', name: '–¢–µ—Å—Ç Sentry' },
  ];

  for (const page of pages) {
    try {
      const response = await fetch(page.url);
      if (response.ok) {
        results.passed.push(`‚úÖ ${page.name} –¥–æ—Å—Ç—É–ø–Ω–∞`);
      } else {
        results.failed.push(`‚ùå ${page.name} –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É ${response.status}`);
      }
    } catch (error) {
      results.failed.push(`‚ùå ${page.name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π
async function checkMainComponents() {
  console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');

  try {
    const response = await fetch('http://localhost:3000');
    const html = await response.text();

    const components = [
      { name: 'Hero —Å–µ–∫—Ü–∏—è', pattern: /NeuroExpert|AI.*–î–∏—Ä–µ–∫—Ç–æ—Ä|–Ω–µ–π—Ä–æ—Å–µ—Ç–∏/i },
      { name: '–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏', pattern: /contact|ContactForm|–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É/i },
      { name: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ROI', pattern: /roi|ROICalculator|–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.*–≤—ã–≥–æ–¥—ã/i },
      { name: 'AI —á–∞—Ç', pattern: /SmartFloatingAI|AI.*–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç/i },
      { name: '–°–µ–∫—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π', pattern: /AIDirectorCapabilities|–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏/i },
      { name: '–°–µ–∫—Ü–∏—è "–ü–æ—á–µ–º—É –º—ã"', pattern: /WhyUsSection|–ü–æ—á–µ–º—É.*–≤—ã–±–∏—Ä–∞—é—Ç/i },
      { name: '–°–µ–∫—Ü–∏—è —Ü–µ–Ω', pattern: /PricingSection|–¢–∞—Ä–∏—Ñ—ã|–°—Ç–æ–∏–º–æ—Å—Ç—å/i },
    ];

    components.forEach((comp) => {
      if (comp.pattern.test(html)) {
        results.passed.push(`‚úÖ ${comp.name} –Ω–∞–π–¥–µ–Ω–∞`);
      } else {
        results.failed.push(`‚ùå ${comp.name} –ù–ï –Ω–∞–π–¥–µ–Ω–∞`);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const h1Count = (html.match(/<h1/g) || []).length;
    const h2Count = (html.match(/<h2/g) || []).length;

    if (h1Count > 0) {
      results.passed.push(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${h1Count} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ H1`);
    } else {
      results.failed.push('‚ùå –ó–∞–≥–æ–ª–æ–≤–∫–∏ H1 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    if (h2Count > 0) {
      results.passed.push(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${h2Count} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ H2`);
    } else {
      results.warnings.push('‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ H2 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
  } catch (error) {
    results.failed.push('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: API endpoints
async function checkAPIEndpoints() {
  console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints...');

  const endpoints = [
    {
      url: 'http://localhost:3000/api/health',
      method: 'GET',
      name: 'Health check',
    },
    {
      url: 'http://localhost:3000/api/contact-form',
      method: 'POST',
      name: '–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏',
      body: {
        name: '–¢–µ—Å—Ç',
        email: 'test@test.com',
        phone: '+7 999 123-45-67',
        message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      },
    },
  ];

  for (const endpoint of endpoints) {
    try {
      const options = {
        method: endpoint.method,
        headers: { 'Content-Type': 'application/json' },
      };

      if (endpoint.body) {
        options.body = JSON.stringify(endpoint.body);
      }

      const response = await fetch(endpoint.url, options);

      if (response.ok) {
        results.passed.push(`‚úÖ API ${endpoint.name} —Ä–∞–±–æ—Ç–∞–µ—Ç`);
      } else {
        results.failed.push(`‚ùå API ${endpoint.name} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É ${response.status}`);
      }
    } catch (error) {
      results.failed.push(`‚ùå API ${endpoint.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
async function checkMobileVersion() {
  console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏...');

  try {
    const response = await fetch('http://localhost:3000', {
      headers: {
        'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15',
      },
    });
    const html = await response.text();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
    if (html.includes('mobile:') || html.includes('sm:') || html.includes('@media')) {
      results.passed.push('‚úÖ –ú–æ–±–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –Ω–∞–π–¥–µ–Ω—ã');
    } else {
      results.warnings.push('‚ö†Ô∏è –ú–æ–±–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ viewport
    if (html.includes('viewport')) {
      results.passed.push('‚úÖ Viewport meta —Ç–µ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    } else {
      results.failed.push('‚ùå Viewport meta —Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  } catch (error) {
    results.failed.push('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏');
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –ö–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫–∏
async function checkButtonsAndLinks() {
  console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ —Å—Å—ã–ª–æ–∫...');

  try {
    const response = await fetch('http://localhost:3000');
    const html = await response.text();

    // –ü–æ–¥—Å—á–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const buttonCount = (html.match(/<button/g) || []).length;
    const linkCount = (html.match(/<a\s/g) || []).length;
    const formCount = (html.match(/<form/g) || []).length;

    if (buttonCount > 0) {
      results.passed.push(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${buttonCount} –∫–Ω–æ–ø–æ–∫`);
    } else {
      results.warnings.push('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    if (linkCount > 0) {
      results.passed.push(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${linkCount} —Å—Å—ã–ª–æ–∫`);
    } else {
      results.warnings.push('‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    if (formCount > 0) {
      results.passed.push(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${formCount} —Ñ–æ—Ä–º`);
    } else {
      results.failed.push('‚ùå –§–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö —Å—Å—ã–ª–æ–∫
    const emptyLinks = (html.match(/href=["']#["']/g) || []).length;
    if (emptyLinks > 0) {
      results.warnings.push(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${emptyLinks} –ø—É—Å—Ç—ã—Ö —Å—Å—ã–ª–æ–∫ (href="#")`);
    }
  } catch (error) {
    results.failed.push('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–Ω–æ–ø–æ–∫ –∏ —Å—Å—ã–ª–æ–∫');
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 7: –§–∞–π–ª—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
function checkProjectStructure() {
  console.log('\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...');

  const requiredFiles = [
    'package.json',
    'next.config.js',
    'app/layout.js',
    'app/page.js',
    'app/globals.css',
    '.gitignore',
    'README.md',
  ];

  const requiredDirs = ['app/components', 'app/api', 'public', 'scripts'];

  requiredFiles.forEach((file) => {
    if (fs.existsSync(path.join('/workspace', file))) {
      results.passed.push(`‚úÖ –§–∞–π–ª ${file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    } else {
      results.failed.push(`‚ùå –§–∞–π–ª ${file} –ù–ï –Ω–∞–π–¥–µ–Ω`);
    }
  });

  requiredDirs.forEach((dir) => {
    if (fs.existsSync(path.join('/workspace', dir))) {
      results.passed.push(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    } else {
      results.failed.push(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir} –ù–ï –Ω–∞–π–¥–µ–Ω–∞`);
    }
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 8: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
function checkEnvVariables() {
  console.log('\n8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');

  const envFile = path.join('/workspace', '.env.local');
  const envExampleFile = path.join('/workspace', '.env.example');

  if (fs.existsSync(envFile)) {
    results.passed.push('‚úÖ –§–∞–π–ª .env.local —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
  } else {
    results.warnings.push('‚ö†Ô∏è –§–∞–π–ª .env.local –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  if (fs.existsSync(envExampleFile)) {
    results.passed.push('‚úÖ –§–∞–π–ª .env.example —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

    // –ß–∏—Ç–∞–µ–º –ø—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    const envExample = fs.readFileSync(envExampleFile, 'utf8');
    const requiredVars = envExample.match(/^[A-Z_]+=/gm) || [];

    if (requiredVars.length > 0) {
      results.warnings.push(`‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å ${requiredVars.length} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è`);
    }
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runFullCheck() {
  const serverRunning = checkDevServer();

  if (!serverRunning) {
    console.log('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Dev —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!');
    console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: npm run dev');
    console.log('–ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞.');
    return;
  }

  await checkPages();
  await checkMainComponents();
  await checkAPIEndpoints();
  await checkMobileVersion();
  await checkButtonsAndLinks();
  checkProjectStructure();
  checkEnvVariables();

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\n\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
  console.log('=================\n');

  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${results.passed.length}`);
  console.log(`‚ùå –û—à–∏–±–∫–∏: ${results.failed.length}`);
  console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${results.warnings.length}`);

  if (results.failed.length > 0) {
    console.log('\n‚ùå –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
    results.failed.forEach((fail) => console.log(`   ${fail}`));
  }

  if (results.warnings.length > 0) {
    console.log('\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:');
    results.warnings.forEach((warn) => console.log(`   ${warn}`));
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');

  if (results.failed.length === 0) {
    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç.');
  } else {
    console.log('1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–∫—Ä–∞—Å–Ω—ã–µ)');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–∂–µ–ª—Ç—ã–µ)');
    console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
  }

  console.log('\nüì± –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:');
  console.log('1. –£–∑–Ω–∞–π—Ç–µ IP –≤–∞—à–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: ifconfig –∏–ª–∏ ipconfig');
  console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ: http://–í–ê–®_IP:3000');

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
  const report = {
    timestamp: new Date().toISOString(),
    passed: results.passed.length,
    failed: results.failed.length,
    warnings: results.warnings.length,
    details: results,
  };

  fs.writeFileSync(path.join('/workspace', 'check-report.json'), JSON.stringify(report, null, 2));

  console.log('\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ check-report.json');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
runFullCheck().catch(console.error);
