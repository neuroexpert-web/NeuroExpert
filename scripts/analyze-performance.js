#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ NeuroExpert
 * –î–∞—Ç–∞: 20.01.2025
 */

const fs = require('fs');
const path = require('path');

console.log('üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ NeuroExpert\n');

// –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
function analyzeFileSize(filePath) {
  try {
    const stats = fs.statSync(filePath);
    const sizeInKB = (stats.size / 1024).toFixed(2);
    const sizeInMB = (stats.size / 1024 / 1024).toFixed(2);
    
    if (sizeInMB > 0.1) {
      return `${sizeInMB} MB`;
    }
    return `${sizeInKB} KB`;
  } catch (err) {
    return '–ù–µ –Ω–∞–π–¥–µ–Ω';
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
const criticalFiles = [
  { path: 'app/page.js', maxSize: 200 }, // KB
  { path: 'app/globals.css', maxSize: 100 },
  { path: 'package.json', maxSize: 10 },
  { path: 'app/layout.js', maxSize: 50 }
];

console.log('üìä –†–∞–∑–º–µ—Ä—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤:');
console.log('‚îÄ'.repeat(50));

criticalFiles.forEach(file => {
  const size = analyzeFileSize(file.path);
  const sizeInKB = parseFloat(size);
  const status = sizeInKB > file.maxSize ? '‚ö†Ô∏è  –ë–û–õ–¨–®–û–ô' : '‚úÖ';
  console.log(`${status} ${file.path}: ${size}`);
});

// –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤
console.log('\nüì¶ –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤:');
console.log('‚îÄ'.repeat(50));

const pageContent = fs.readFileSync('app/page.js', 'utf8');
const dynamicImports = pageContent.match(/dynamic\(\(\) => import\(.+?\)/g) || [];
console.log(`–ù–∞–π–¥–µ–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤: ${dynamicImports.length}`);

// –ü–æ–∏—Å–∫ —Ç—è–∂–µ–ª—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
console.log('\n‚ö° –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
console.log('‚îÄ'.repeat(50));

const issues = [];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
if (pageContent.length > 100000) {
  issues.push('- app/page.js —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (> 100KB)');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω–ª–∞–π–Ω —Å—Ç–∏–ª–∏
const inlineStyles = pageContent.match(/style={{[^}]+}}/g) || [];
if (inlineStyles.length > 20) {
  issues.push(`- –ú–Ω–æ–≥–æ –∏–Ω–ª–∞–π–Ω —Å—Ç–∏–ª–µ–π (${inlineStyles.length})`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ console.log
const consoleLogs = pageContent.match(/console\.log/g) || [];
if (consoleLogs.length > 5) {
  issues.push(`- –ú–Ω–æ–≥–æ console.log (${consoleLogs.length})`);
}

if (issues.length === 0) {
  console.log('‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
} else {
  issues.forEach(issue => console.log(issue));
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
console.log('‚îÄ'.repeat(50));

const recommendations = [
  '1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å React.memo –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
  '2. –î–æ–±–∞–≤–∏—Ç—å lazy loading –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
  '3. –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å CSS –∏ JS —Ñ–∞–π–ª—ã',
  '4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Web Workers –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π',
  '5. –í–∫–ª—é—á–∏—Ç—å gzip –∫–æ–º–ø—Ä–µ—Å—Å–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'
];

recommendations.forEach(rec => console.log(rec));

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
const report = {
  date: new Date().toISOString(),
  fileSizes: criticalFiles.map(file => ({
    path: file.path,
    size: analyzeFileSize(file.path),
    maxSize: file.maxSize + ' KB'
  })),
  dynamicImports: dynamicImports.length,
  issues: issues,
  recommendations: recommendations
};

fs.writeFileSync(
  'performance-report.json',
  JSON.stringify(report, null, 2)
);

console.log('\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ performance-report.json');