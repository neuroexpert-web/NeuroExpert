#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è API routes
function scanApiRoutes(dir, basePath = '') {
  const routes = [];
  
  try {
    const files = fs.readdirSync(dir);
    
    for (const file of files) {
      const fullPath = path.join(dir, file);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        routes.push(...scanApiRoutes(fullPath, path.join(basePath, file)));
      } else if (file === 'route.js' || file === 'route.ts') {
        // –ù–∞—à–ª–∏ API route
        const routePath = basePath || '/';
        const fileContent = fs.readFileSync(fullPath, 'utf-8');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º HTTP –º–µ—Ç–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–∞
        const methods = [];
        if (fileContent.includes('export async function GET')) methods.push('GET');
        if (fileContent.includes('export async function POST')) methods.push('POST');
        if (fileContent.includes('export async function PUT')) methods.push('PUT');
        if (fileContent.includes('export async function DELETE')) methods.push('DELETE');
        if (fileContent.includes('export async function PATCH')) methods.push('PATCH');
        
        if (methods.length > 0) {
          routes.push({
            path: routePath,
            methods,
            file: fullPath
          });
        }
      }
    }
  } catch (error) {
    console.error(`Error scanning directory ${dir}:`, error.message);
  }
  
  return routes;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–∏ –¥–ª—è OpenAPI
function generateOpenApiPath(route) {
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Next.js dynamic routes –≤ OpenAPI —Ñ–æ—Ä–º–∞—Ç
  let apiPath = route.path
    .replace(/\[([^\]]+)\]/g, '{$1}')  // [id] -> {id}
    .replace(/\\/g, '/');               // Windows path fix
    
  return `/api${apiPath}`;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
function generateOpenApiSpec() {
  console.log('üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ API routes...');
  
  const apiDir = path.join(process.cwd(), 'app', 'api');
  const routes = scanApiRoutes(apiDir);
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${routes.length} API routes`);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
  let spec;
  const specPath = path.join(process.cwd(), 'openapi.yaml');
  
  if (fs.existsSync(specPath)) {
    console.log('üìÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    spec = yaml.load(fs.readFileSync(specPath, 'utf-8'));
  } else {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    spec = {
      openapi: '3.0.3',
      info: {
        title: 'NeuroExpert API',
        version: '1.0.0',
        description: 'Auto-generated API documentation'
      },
      servers: [
        {
          url: 'http://localhost:3000/api',
          description: 'Development server'
        }
      ],
      paths: {},
      components: {
        schemas: {},
        securitySchemes: {
          bearerAuth: {
            type: 'http',
            scheme: 'bearer',
            bearerFormat: 'JWT'
          }
        }
      }
    };
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ routes
  routes.forEach(route => {
    const apiPath = generateOpenApiPath(route);
    
    if (!spec.paths[apiPath]) {
      spec.paths[apiPath] = {};
    }
    
    route.methods.forEach(method => {
      const lowerMethod = method.toLowerCase();
      
      // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ —É–∂–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (spec.paths[apiPath][lowerMethod]) {
        return;
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
      spec.paths[apiPath][lowerMethod] = {
        summary: `${method} ${apiPath}`,
        description: `Auto-generated documentation for ${method} ${apiPath}`,
        operationId: `${lowerMethod}${apiPath.replace(/[^a-zA-Z0-9]/g, '')}`,
        responses: {
          '200': {
            description: 'Successful response',
            content: {
              'application/json': {
                schema: {
                  type: 'object'
                }
              }
            }
          },
          '400': {
            description: 'Bad request'
          },
          '500': {
            description: 'Internal server error'
          }
        }
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è dynamic routes
      const params = apiPath.match(/{([^}]+)}/g);
      if (params) {
        spec.paths[apiPath][lowerMethod].parameters = params.map(param => ({
          name: param.slice(1, -1),
          in: 'path',
          required: true,
          schema: {
            type: 'string'
          }
        }));
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è POST/PUT/PATCH
      if (['post', 'put', 'patch'].includes(lowerMethod)) {
        spec.paths[apiPath][lowerMethod].requestBody = {
          required: true,
          content: {
            'application/json': {
              schema: {
                type: 'object'
              }
            }
          }
        };
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints
      if (apiPath.includes('admin') || apiPath.includes('protected')) {
        spec.paths[apiPath][lowerMethod].security = [
          { bearerAuth: [] }
        ];
      }
    });
  });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
  const yamlStr = yaml.dump(spec, { lineWidth: -1 });
  fs.writeFileSync(specPath, yamlStr);
  
  // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º JSON –≤–µ—Ä—Å–∏—é
  const jsonPath = path.join(process.cwd(), 'swagger.json');
  fs.writeFileSync(jsonPath, JSON.stringify(spec, null, 2));
  
  console.log('‚ú® OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
  console.log(`   YAML: ${specPath}`);
  console.log(`   JSON: ${jsonPath}`);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ routes –¥–ª—è README
  console.log('\nüìã API Endpoints:');
  routes.forEach(route => {
    const apiPath = generateOpenApiPath(route);
    console.log(`   ${route.methods.join(', ')}: ${apiPath}`);
  });
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  generateOpenApiSpec();
}

module.exports = { generateOpenApiSpec, scanApiRoutes };