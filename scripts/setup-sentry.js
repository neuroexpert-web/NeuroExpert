#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

console.log('üõ°Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Sentry –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫\n');

async function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function setupSentry() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const envPath = path.join(process.cwd(), '.env.local');
    let envContent = '';

    if (fs.existsSync(envPath)) {
      envContent = fs.readFileSync(envPath, 'utf-8');
    }

    console.log('üìã –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Sentry –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:');
    console.log('1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ https://sentry.io');
    console.log('2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç (Next.js)');
    console.log('3. –ü–æ–ª—É—á–∏—Ç—å DSN –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞\n');

    const dsn = await question('–í–≤–µ–¥–∏—Ç–µ Sentry DSN (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ');

    if (!dsn) {
      console.log('\n‚è≠Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Sentry –ø—Ä–æ–ø—É—â–µ–Ω–∞');
      rl.close();
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º DSN –≤ .env.local
    if (!envContent.includes('NEXT_PUBLIC_SENTRY_DSN')) {
      envContent += `\n# Sentry Error Tracking\nNEXT_PUBLIC_SENTRY_DSN=${dsn}\nSENTRY_ORG=your-org-slug\nSENTRY_PROJECT=your-project-slug\nSENTRY_AUTH_TOKEN=your-auth-token\n`;
      fs.writeFileSync(envPath, envContent);
      console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ .env.local');
    }

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º Sentry –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const sentryFiles = [
      'sentry.client.config.ts.disabled',
      'sentry.edge.config.ts.disabled',
      'sentry.server.config.ts.disabled',
    ];

    for (const file of sentryFiles) {
      const oldPath = path.join(process.cwd(), file);
      const newPath = oldPath.replace('.disabled', '');

      if (fs.existsSync(oldPath)) {
        fs.renameSync(oldPath, newPath);
        console.log(`‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: ${path.basename(newPath)}`);
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º next.config.js
    const nextConfigPath = path.join(process.cwd(), 'next.config.js');
    let nextConfig = fs.readFileSync(nextConfigPath, 'utf-8');

    if (nextConfig.includes('// Temporarily disable Sentry')) {
      nextConfig = nextConfig.replace(
        '// Temporarily disable Sentry completely until properly configured\nmodule.exports = nextConfig;',
        `// Sentry configuration
const { withSentryConfig } = require('@sentry/nextjs');

module.exports = withSentryConfig(
  nextConfig,
  {
    // For all available options, see:
    // https://github.com/getsentry/sentry-webpack-plugin#options
    silent: true,
    org: process.env.SENTRY_ORG,
    project: process.env.SENTRY_PROJECT,
  },
  {
    // Upload source maps only in production
    widenClientFileUpload: true,
    transpileClientSDK: true,
    hideSourceMaps: true,
    disableLogger: true,
    automaticVercelMonitors: true,
  }
);`
      );

      fs.writeFileSync(nextConfigPath, nextConfig);
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω next.config.js');
    }

    console.log('\nüéâ Sentry —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
    console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Sentry SDK: npm install --save @sentry/nextjs');
    console.log('2. –û–±–Ω–æ–≤–∏—Ç–µ SENTRY_ORG, SENTRY_PROJECT –∏ SENTRY_AUTH_TOKEN –≤ .env.local');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É: npm run dev');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    rl.close();
  }
}

setupSentry();
