#!/usr/bin/env node

/**
 * –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CSS –∫–ª–∞—Å—Å–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
 * –ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ç–∏–ª–∏
 */

const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CSS_FILE = path.join(process.cwd(), 'app', 'globals.css');
const SCAN_DIRS = ['app', 'components'];
const FILE_EXTENSIONS = ['.js', '.jsx', '.ts', '.tsx'];

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
let stats = {
  totalClasses: 0,
  usedClasses: new Set(),
  unusedClasses: new Set(),
  fileScanned: 0
};

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ CSS –∫–ª–∞—Å—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
function extractCSSClasses(cssContent) {
  const classRegex = /\.([a-zA-Z0-9_-]+)(?:\s*{|:)/g;
  const classes = new Set();
  let match;
  
  while ((match = classRegex.exec(cssContent)) !== null) {
    classes.add(match[1]);
  }
  
  return classes;
}

// –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –≤ JS/JSX —Ñ–∞–π–ª–∞—Ö
function findClassUsageInFile(filePath, classes) {
  const content = fs.readFileSync(filePath, 'utf8');
  const usedClasses = new Set();
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª–∞—Å—Å–æ–≤
  const patterns = [
    /className=["|']([^"']+)["|']/g,  // className="class"
    /className={[`|"]([^`"]+)[`|"]}/g, // className={`class`}
    /classList\.add\(["|']([^"']+)["|']\)/g, // classList.add
    /\.([a-zA-Z0-9_-]+)/g // –î–ª—è CSS –º–æ–¥—É–ª–µ–π
  ];
  
  patterns.forEach(pattern => {
    let match;
    while ((match = pattern.exec(content)) !== null) {
      const classNames = match[1].split(/\s+/);
      classNames.forEach(className => {
        if (classes.has(className)) {
          usedClasses.add(className);
        }
      });
    }
  });
  
  return usedClasses;
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function scanDirectory(dirPath, classes) {
  const items = fs.readdirSync(dirPath);
  
  items.forEach(item => {
    const itemPath = path.join(dirPath, item);
    const stat = fs.statSync(itemPath);
    
    if (stat.isDirectory() && !item.includes('node_modules')) {
      scanDirectory(itemPath, classes);
    } else if (stat.isFile() && FILE_EXTENSIONS.includes(path.extname(item))) {
      stats.fileScanned++;
      const usedClasses = findClassUsageInFile(itemPath, classes);
      usedClasses.forEach(cls => stats.usedClasses.add(cls));
    }
  });
}

// –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ CSS –ø—Ä–∞–≤–∏–ª
function analyzeCSSSize(cssContent, unusedClasses) {
  let totalSize = cssContent.length;
  let unusedSize = 0;
  
  unusedClasses.forEach(className => {
    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø—Ä–∞–≤–∏–ª
    const regex = new RegExp(`\\.${className}[^{]*{[^}]*}`, 'g');
    const matches = cssContent.match(regex);
    if (matches) {
      matches.forEach(match => {
        unusedSize += match.length;
      });
    }
  });
  
  return {
    totalSize,
    unusedSize,
    percentage: ((unusedSize / totalSize) * 100).toFixed(2)
  };
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CSS...\n');
  
  // –ß–∏—Ç–∞–µ–º CSS —Ñ–∞–π–ª
  const cssContent = fs.readFileSync(CSS_FILE, 'utf8');
  const cssClasses = extractCSSClasses(cssContent);
  stats.totalClasses = cssClasses.size;
  
  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ CSS –∫–ª–∞—Å—Å–æ–≤: ${stats.totalClasses}`);
  
  // –°–∫–∞–Ω–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
  SCAN_DIRS.forEach(dir => {
    const dirPath = path.join(process.cwd(), dir);
    if (fs.existsSync(dirPath)) {
      console.log(`üìÇ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${dir}...`);
      scanDirectory(dirPath, cssClasses);
    }
  });
  
  // –í—ã—á–∏—Å–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–ª–∞—Å—Å—ã
  cssClasses.forEach(cls => {
    if (!stats.usedClasses.has(cls)) {
      stats.unusedClasses.add(cls);
    }
  });
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞
  const sizeAnalysis = analyzeCSSSize(cssContent, stats.unusedClasses);
  
  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:');
  console.log(`–§–∞–π–ª–æ–≤ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${stats.fileScanned}`);
  console.log(`–í—Å–µ–≥–æ CSS –∫–ª–∞—Å—Å–æ–≤: ${stats.totalClasses}`);
  console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å–æ–≤: ${stats.usedClasses.size} (${((stats.usedClasses.size / stats.totalClasses) * 100).toFixed(2)}%)`);
  console.log(`–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å–æ–≤: ${stats.unusedClasses.size} (${((stats.unusedClasses.size / stats.totalClasses) * 100).toFixed(2)}%)`);
  
  console.log('\nüíæ –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞:');
  console.log(`–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä CSS: ${(sizeAnalysis.totalSize / 1024).toFixed(2)} KB`);
  console.log(`–†–∞–∑–º–µ—Ä –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ CSS: ${(sizeAnalysis.unusedSize / 1024).toFixed(2)} KB (${sizeAnalysis.percentage}%)`);
  console.log(`–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${(sizeAnalysis.unusedSize / 1024).toFixed(2)} KB`);
  
  // –í—ã–≤–æ–¥–∏–º —Ç–æ–ø –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤
  if (stats.unusedClasses.size > 0) {
    console.log('\nüö´ –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤:');
    const unusedArray = Array.from(stats.unusedClasses);
    unusedArray.slice(0, 20).forEach(cls => {
      console.log(`  - .${cls}`);
    });
    
    if (unusedArray.length > 20) {
      console.log(`  ... –∏ –µ—â–µ ${unusedArray.length - 20} –∫–ª–∞—Å—Å–æ–≤`);
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
  const report = {
    date: new Date().toISOString(),
    stats: {
      totalClasses: stats.totalClasses,
      usedClasses: stats.usedClasses.size,
      unusedClasses: stats.unusedClasses.size,
      filesScanned: stats.fileScanned
    },
    sizeAnalysis,
    unusedClasses: Array.from(stats.unusedClasses)
  };
  
  fs.writeFileSync('css-usage-report.json', JSON.stringify(report, null, 2));
  console.log('\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ css-usage-report.json');
}

// –ó–∞–ø—É—Å–∫
main();