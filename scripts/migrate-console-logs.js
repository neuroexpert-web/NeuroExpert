#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ console.log –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π logger
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/migrate-console-logs.js [--dry-run]
 */

const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const DIRECTORIES_TO_SCAN = ['app', 'components', 'utils'];
const FILE_EXTENSIONS = ['.js', '.jsx', '.ts', '.tsx'];
const EXCLUDE_PATTERNS = ['node_modules', '.next', 'dist', 'build', '__tests__', '.test.'];

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã
const CONSOLE_PATTERNS = [
  {
    pattern: /console\.log\((.*)\)/g,
    replacement: (match, args) => `logger.info(${args})`,
    level: 'info'
  },
  {
    pattern: /console\.error\((.*)\)/g,
    replacement: (match, args) => `logger.error(${args})`,
    level: 'error'
  },
  {
    pattern: /console\.warn\((.*)\)/g,
    replacement: (match, args) => `logger.warn(${args})`,
    level: 'warn'
  },
  {
    pattern: /console\.debug\((.*)\)/g,
    replacement: (match, args) => `logger.debug(${args})`,
    level: 'debug'
  }
];

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
let stats = {
  filesScanned: 0,
  filesModified: 0,
  logsReplaced: 0,
  errors: []
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª
function shouldProcessFile(filePath) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  const ext = path.extname(filePath);
  if (!FILE_EXTENSIONS.includes(ext)) return false;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
  for (const pattern of EXCLUDE_PATTERNS) {
    if (filePath.includes(pattern)) return false;
  }

  return true;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ logger –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
function addLoggerImport(content, filePath) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–º–ø–æ—Ä—Ç logger
  if (content.includes('import { logger }') || content.includes('const logger =')) {
    return content;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞
  const relativePath = path.relative(path.dirname(filePath), path.join(process.cwd(), 'app/utils/logger.js'));
  const importPath = relativePath.startsWith('.') ? relativePath : './' + relativePath;

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
  const importStatement = `import { logger } from '${importPath.replace(/\\/g, '/')}';\n`;
  
  // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ import)
  const lastImportIndex = content.lastIndexOf('\nimport ');
  if (lastImportIndex !== -1) {
    const endOfImport = content.indexOf('\n', lastImportIndex + 1);
    return content.slice(0, endOfImport + 1) + importStatement + content.slice(endOfImport + 1);
  }

  // –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
  return importStatement + '\n' + content;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
function processFile(filePath, isDryRun) {
  stats.filesScanned++;

  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let modified = false;
    let replacements = 0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    for (const { pattern, replacement } of CONSOLE_PATTERNS) {
      const matches = content.match(pattern);
      if (matches) {
        replacements += matches.length;
        if (!isDryRun) {
          content = content.replace(pattern, replacement);
        }
        modified = true;
      }
    }

    if (modified) {
      stats.filesModified++;
      stats.logsReplaced += replacements;

      if (!isDryRun) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç logger
        content = addLoggerImport(content, filePath);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`‚úÖ Modified: ${filePath} (${replacements} replacements)`);
      } else {
        console.log(`üîç Would modify: ${filePath} (${replacements} replacements)`);
      }
    }
  } catch (error) {
    stats.errors.push({ file: filePath, error: error.message });
    console.error(`‚ùå Error processing ${filePath}: ${error.message}`);
  }
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function scanDirectory(dirPath, isDryRun) {
  try {
    const items = fs.readdirSync(dirPath);

    for (const item of items) {
      const itemPath = path.join(dirPath, item);
      const stat = fs.statSync(itemPath);

      if (stat.isDirectory() && !EXCLUDE_PATTERNS.some(p => item.includes(p))) {
        scanDirectory(itemPath, isDryRun);
      } else if (stat.isFile() && shouldProcessFile(itemPath)) {
        processFile(itemPath, isDryRun);
      }
    }
  } catch (error) {
    console.error(`Error scanning directory ${dirPath}: ${error.message}`);
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const isDryRun = process.argv.includes('--dry-run');
  
  console.log('üîç Console.log Migration Script');
  console.log(`Mode: ${isDryRun ? 'DRY RUN' : 'LIVE'}`);
  console.log('----------------------------\n');

  // –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  for (const dir of DIRECTORIES_TO_SCAN) {
    const dirPath = path.join(process.cwd(), dir);
    if (fs.existsSync(dirPath)) {
      console.log(`Scanning ${dir}...`);
      scanDirectory(dirPath, isDryRun);
    }
  }

  // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log('\nüìä Migration Statistics:');
  console.log(`Files scanned: ${stats.filesScanned}`);
  console.log(`Files modified: ${stats.filesModified}`);
  console.log(`Console.logs replaced: ${stats.logsReplaced}`);
  
  if (stats.errors.length > 0) {
    console.log(`\n‚ùå Errors: ${stats.errors.length}`);
    stats.errors.forEach(({ file, error }) => {
      console.log(`  - ${file}: ${error}`);
    });
  }

  if (isDryRun) {
    console.log('\nüí° This was a dry run. Use without --dry-run to apply changes.');
  } else {
    console.log('\n‚úÖ Migration completed!');
  }
}

// –ó–∞–ø—É—Å–∫
main();